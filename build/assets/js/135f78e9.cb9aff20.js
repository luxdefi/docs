"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[8479],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=r,h=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2119:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={},c="Using Truffle with the Lux C-Chain",u={unversionedId:"dapps/smart-contracts/using-truffle-with-the-lux-c-chain",id:"dapps/smart-contracts/using-truffle-with-the-lux-c-chain",title:"Using Truffle with the Lux C-Chain",description:"Introduction",source:"@site/docs/dapps/smart-contracts/using-truffle-with-the-lux-c-chain.md",sourceDirName:"dapps/smart-contracts",slug:"/dapps/smart-contracts/using-truffle-with-the-lux-c-chain",permalink:"/dapps/smart-contracts/using-truffle-with-the-lux-c-chain",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/dapps/smart-contracts/using-truffle-with-the-lux-c-chain.md",tags:[],version:"current",frontMatter:{},sidebar:"dapps",previous:{title:"Using Hardhat with the Lux C-Chain",permalink:"/dapps/smart-contracts/using-hardhat-with-the-lux-c-chain"},next:{title:"Verifying Smart Contracts Using Hardhat and Snowtrace",permalink:"/dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace"}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Start up a Local Lux Network",id:"start-up-a-local-lux-network",level:2},{value:"Create Truffle Directory and Install Dependencies",id:"create-truffle-directory-and-install-dependencies",level:2},{value:"Update truffle-config.js",id:"update-truffle-configjs",level:2},{value:"Add Storage.sol",id:"add-storagesol",level:2},{value:"Add New Migration",id:"add-new-migration",level:2},{value:"Compile Contracts with Truffle",id:"compile-contracts-with-truffle",level:2},{value:"Accounts on C-chain",id:"accounts-on-c-chain",level:2},{value:"Truffle Accounts",id:"truffle-accounts",level:3},{value:"Scripting Account Funding",id:"scripting-account-funding",level:3},{value:"Fund Your Account",id:"fund-your-account",level:3},{value:"Personal APIs",id:"personal-apis",level:3},{value:"Run Migrations",id:"run-migrations",level:2},{value:"Interacting with your contract",id:"interacting-with-your-contract",level:2},{value:"Writing a number to the blockchain",id:"writing-a-number-to-the-blockchain",level:3},{value:"Reading a number from the blockhain",id:"reading-a-number-from-the-blockhain",level:3},{value:"Summary",id:"summary",level:2}],p={toc:d};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-truffle-with-the-lux-c-chain"},"Using Truffle with the Lux C-Chain"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.trufflesuite.com"},"Truffle Suite")," is a toolkit for launching decentralized applications (dapps) on the EVM. With Truffle you can write and compile smart contracts, build artifacts, run migrations and interact with deployed contracts. This tutorial illustrates how Truffle can be used with Lux's C-Chain, which is an instance of the EVM."),(0,o.kt)("h2",{id:"requirements"},"Requirements"),(0,o.kt)("p",null,"You've completed ",(0,o.kt)("a",{parentName:"p",href:"/nodes/build/run-lux-node-manually"},"Run an Lux Node")," and are familiar with ",(0,o.kt)("a",{parentName:"p",href:"/overview/getting-started/lux-platform"},"Lux's architecture"),". You've also performed a cross-chain swap via this ",(0,o.kt)("a",{parentName:"p",href:"https://support.lux.network/en/articles/6169872-how-to-make-a-cross-chain-transfer-in-the-lux-wallet"},"this tutorial")," to get funds to your C-Chain address."),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/luxdefi/lux-network-runner"},"Lux Network Runner")," is a tool for running a local Lux network. It's similar to Truffle's ",(0,o.kt)("a",{parentName:"li",href:"https://www.trufflesuite.com/ganache"},"Ganache"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://nodejs.org/en"},"NodeJS")," v8.9.4 or later."),(0,o.kt)("li",{parentName:"ul"},"Truffle, which you can install with ",(0,o.kt)("inlineCode",{parentName:"li"},"npm install -g truffle"))),(0,o.kt)("h2",{id:"start-up-a-local-lux-network"},"Start up a Local Lux Network"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-network-runner"},"Lux Network Runner")," allows you to spin up private test network deployments. Start a local five node Lux network:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"cd /path/to/lux-network-runner\n# start a five node staking network\n./go run examples/local/fivenodenetwork/main.go\n")),(0,o.kt)("p",null,"A five node Lux network is running on your machine. Network will run until you CTRL + C to exit."),(0,o.kt)("h2",{id:"create-truffle-directory-and-install-dependencies"},"Create Truffle Directory and Install Dependencies"),(0,o.kt)("p",null,"Open a new terminal tab to so we can create a ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle")," directory and install some further dependencies."),(0,o.kt)("p",null,"First, navigate to the directory within which you intend to create your ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle")," working directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"cd /path/to/directory\n")),(0,o.kt)("p",null,"Create and enter a new directory named ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"mkdir truffle; cd truffle\n")),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"npm")," to install ",(0,o.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io"},"web3"),", which is a library through which we can talk to the EVM and ",(0,o.kt)("a",{parentName:"p",href:"/apis/luxjs/"},"LuxJS")," which is used for cross chain swaps."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"npm install web3 lux -s\n")),(0,o.kt)("p",null,"We'll use web3 to set an HTTP Provider which is how web3 will speak to the EVM. Lastly, create a boilerplace truffle project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"truffle init\n")),(0,o.kt)("p",null,"The local development network pre-funds some static addresses when created. We'll use ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@truffle/hdwallet-provider"},"@truffle/hdwallet-provider")," to use these pre-funded addresses as our accounts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"npm install @truffle/hdwallet-provider\n")),(0,o.kt)("h2",{id:"update-truffle-configjs"},"Update truffle-config.js"),(0,o.kt)("p",null,"One of the files created when you ran ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle init")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle-config.js"),". Add the following to ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle-config.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const Web3 = require("web3")\nconst HDWalletProvider = require("@truffle/hdwallet-provider")\n\nconst protocol = "http"\nconst ip = "localhost"\nconst port = 9650\nWeb3.providers.HttpProvider.prototype.sendAsync =\n  Web3.providers.HttpProvider.prototype.send\nconst provider = new Web3.providers.HttpProvider(\n  `${protocol}://${ip}:${port}/ext/bc/C/rpc`\n)\n\nconst privateKeys = [\n  "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027",\n  "0x7b4198529994b0dc604278c99d153cfd069d594753d471171a1d102a10438e07",\n  "0x15614556be13730e9e8d6eacc1603143e7b96987429df8726384c2ec4502ef6e",\n  "0x31b571bf6894a248831ff937bb49f7754509fe93bbd2517c9c73c4144c0e97dc",\n  "0x6934bef917e01692b789da754a0eae31a8536eb465e7bff752ea291dad88c675",\n  "0xe700bdbdbc279b808b1ec45f8c2370e4616d3a02c336e68d85d4668e08f53cff",\n  "0xbbc2865b76ba28016bc2255c7504d000e046ae01934b04c694592a6276988630",\n  "0xcdbfd34f687ced8c6968854f8a99ae47712c4f4183b78dcc4a903d1bfe8cbf60",\n  "0x86f78c5416151fe3546dece84fda4b4b1e36089f2dbc48496faf3a950f16157c",\n  "0x750839e9dbbd2a0910efe40f50b2f3b2f2f59f5580bb4b83bd8c1201cf9a010a",\n]\n\nmodule.exports = {\n  networks: {\n    development: {\n      provider: () => {\n        return new HDWalletProvider({\n          privateKeys: privateKeys,\n          providerOrUrl: provider,\n        })\n      },\n      network_id: "*",\n      gas: 3000000,\n      gasPrice: 225000000000,\n    },\n  },\n}\n')),(0,o.kt)("p",null,"Note that you can change the ",(0,o.kt)("inlineCode",{parentName:"p"},"protocol"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ip")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"port")," if you want to direct API calls to a different LuxGo node. Also note that we're setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"gasPrice")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"gas")," to the appropriate values for the Lux C-Chain."),(0,o.kt)("h2",{id:"add-storagesol"},"Add Storage.sol"),(0,o.kt)("p",null,"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"contracts")," directory add a new file called ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage.sol")," and add the following block of code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\n/**\n * @title Storage\n * @dev Store & retrieve value in a variable\n */\ncontract Storage {\n\n    uint256 number;\n\n    /**\n     * @dev Store value in variable\n     * @param num value to store\n     */\n    function store(uint256 num) public {\n        number = num;\n    }\n\n    /**\n     * @dev Return value\n     * @return value of 'number'\n     */\n    function retrieve() public view returns (uint256){\n        return number;\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Storage")," is a solidity smart contract which lets us write a number to the blockchain via a ",(0,o.kt)("inlineCode",{parentName:"p"},"store")," function and then read the number back from the blockchain via a ",(0,o.kt)("inlineCode",{parentName:"p"},"retrieve")," function."),(0,o.kt)("h2",{id:"add-new-migration"},"Add New Migration"),(0,o.kt)("p",null,"Create a new file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"migrations")," directory named ",(0,o.kt)("inlineCode",{parentName:"p"},"2_deploy_contracts.js"),", and add the following block of code. This handles deploying the ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage")," smart contract to the blockchain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'const Storage = artifacts.require("Storage")\n\nmodule.exports = function (deployer) {\n  deployer.deploy(Storage)\n}\n')),(0,o.kt)("h2",{id:"compile-contracts-with-truffle"},"Compile Contracts with Truffle"),(0,o.kt)("p",null,"Any time you make a change to ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage.sol")," you need to run ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle compile"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"truffle compile\n")),(0,o.kt)("p",null,"You should see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Compiling your contracts...\n===========================\n> Compiling ./contracts/Migrations.sol\n> Compiling ./contracts/Storage.sol\n> Artifacts written to /path/to/build/contracts\n> Compiled successfully using:\n   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang\n")),(0,o.kt)("h2",{id:"accounts-on-c-chain"},"Accounts on C-chain"),(0,o.kt)("p",null,"When deploying smart contracts to the C-Chain, truffle will default to the first available account provided by your C-Chain client as the ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," address used during migrations. We have added some pre-defined private keys as our accounts in the ",(0,o.kt)("inlineCode",{parentName:"p"},"truffle-config.json"),". The first and default account should have some pre-funded LUX."),(0,o.kt)("h3",{id:"truffle-accounts"},"Truffle Accounts"),(0,o.kt)("p",null,"You can view imported accounts with truffle console."),(0,o.kt)("p",null,"To open the truffle console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"truffle console --network development\n")),(0,o.kt)("p",null,"Note: If you see ",(0,o.kt)("inlineCode",{parentName:"p"},'Error: Invalid JSON RPC response: "API call rejected because chain is not done bootstrapping"'),", you need to wait until network is bootstrapped and ready to use. It should not take too long."),(0,o.kt)("p",null,"Inside truffle console:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"truffle(development)> accounts\n[\n  '0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC',\n  '0x9632a79656af553F58738B0FB750320158495942',\n  '0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430',\n  '0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4',\n  '0x0B891dB1901D4875056896f28B6665083935C7A8',\n  '0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2',\n  '0x78A23300E04FB5d5D2820E23cc679738982e1fd5',\n  '0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293',\n  '0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB',\n  '0x0Fa8EA536Be85F32724D57A37758761B86416123'\n]\n")),(0,o.kt)("p",null,"You can see balances with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"truffle(development)> await web3.eth.getBalance(accounts[0])\n'50000000000000000000000000'\n\ntruffle(development)> await web3.eth.getBalance(accounts[1])\n'0'\n")),(0,o.kt)("p",null,"Notice that ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts[0]")," (default account) has some balance, while ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts[1]")," has no balance."),(0,o.kt)("h3",{id:"scripting-account-funding"},"Scripting Account Funding"),(0,o.kt)("p",null,"There is a convenient script that funds the ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts")," list . You can find it ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/luxdefi/lux-docs/master/scripts/fund-cchain-addresses.js"},"here"),". You can also download it using this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"wget -nd -m https://raw.githubusercontent.com/luxdefi/lux-docs/master/scripts/fund-cchain-addresses.js\n")),(0,o.kt)("p",null,"You can run the script with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"truffle exec fund-cchain-addresses.js --network development\n")),(0,o.kt)("p",null,"Script will fund 1000 LUX to each account in ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts")," list above. After succesfully running the script you can check balances with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"truffle(development)> await web3.eth.getBalance(accounts[0]);\n'50000001000000000000000000'\ntruffle(development)> await web3.eth.getBalance(accounts[1]);\n'1000000000000000000'\n")),(0,o.kt)("h3",{id:"fund-your-account"},"Fund Your Account"),(0,o.kt)("p",null,"If you wish to fund accounts your own, follow the steps in this ",(0,o.kt)("a",{parentName:"p",href:"https://support.lux.network/en/articles/6169872-how-to-make-a-cross-chain-transfer-in-the-lux-wallet"},"tutorial"),". You'll need to send at least ",(0,o.kt)("inlineCode",{parentName:"p"},"135422040")," nLUX to the account to cover the cost of contract deployments."),(0,o.kt)("h3",{id:"personal-apis"},"Personal APIs"),(0,o.kt)("p",null,"Personal APIs interact with node\u2019s accounts. ",(0,o.kt)("inlineCode",{parentName:"p"},"web3")," has some functions that uses it, e.g: ",(0,o.kt)("inlineCode",{parentName:"p"},"web3.eth.personal.newAccount"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"web3.eth.personal.unlockAccount")," etc... However this API is disabled by default. It can be activated with ",(0,o.kt)("inlineCode",{parentName:"p"},"C-chain"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"Coreth")," configs. The Lux Network Runner currently does not support activating this API. So if you want to use these features you need to run your own network manually with ",(0,o.kt)("inlineCode",{parentName:"p"},"internal-private-personal")," API enabled via the ",(0,o.kt)("inlineCode",{parentName:"p"},"eth-apis")," flag. See ",(0,o.kt)("a",{parentName:"p",href:"/quickstart/create-a-local-test-network#manually"},"Create a Local Test Network/Manually")," and ",(0,o.kt)("a",{parentName:"p",href:"/nodes/maintain/chain-config-flags#c-chain-configs"},"C-Chain Configs"),"."),(0,o.kt)("h2",{id:"run-migrations"},"Run Migrations"),(0,o.kt)("p",null,"Now everything is in place to run migrations and deploy the ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage")," contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"truffle(development)> migrate --network development\n")),(0,o.kt)("p",null,"You should see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Compiling your contracts...\n===========================\n> Everything is up to date, there is nothing to compile.\n\nMigrations dry-run (simulation)\n===============================\n> Network name:    'development-fork'\n> Network id:      1\n> Block gas limit: 99804786 (0x5f2e672)\n\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   > block number:        4\n   > block timestamp:     1607734632\n   > account:             0x34Cb796d4D6A3e7F41c4465C65b9056Fe2D3B8fD\n   > balance:             1000.91683679\n   > gas used:            176943 (0x2b32f)\n   > gas price:           225 gwei\n   > value sent:          0 ETH\n   > total cost:          0.08316321 ETH\n\n   -------------------------------------\n   > Total cost:          0.08316321 ETH\n\n2_deploy_contracts.js\n=====================\n\n   Deploying 'Storage'\n   -------------------\n   > block number:        6\n   > block timestamp:     1607734633\n   > account:             0x34Cb796d4D6A3e7F41c4465C65b9056Fe2D3B8fD\n   > balance:             1000.8587791\n   > gas used:            96189 (0x177bd)\n   > gas price:           225 gwei\n   > value sent:          0 ETH\n   > total cost:          0.04520883 ETH\n\n   -------------------------------------\n   > Total cost:          0.04520883 ETH\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.13542204 ETH\n")),(0,o.kt)("p",null,"If you didn't create an account on the C-Chain you'll see this error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Error: Expected parameter 'from' not passed to function.\n")),(0,o.kt)("p",null,"If you didn't fund the account, you'll see this error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Error:  *** Deployment Failed ***\n\n\"Migrations\" could not deploy due to insufficient funds\n   * Account:  0x090172CD36e9f4906Af17B2C36D662E69f162282\n   * Balance:  0 wei\n   * Message:  sender doesn't have enough funds to send tx. The upfront cost is: 1410000000000000000 and the sender's account only has: 0\n   * Try:\n      + Using an adequately funded account\n")),(0,o.kt)("h2",{id:"interacting-with-your-contract"},"Interacting with your contract"),(0,o.kt)("p",null,"Now the ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage")," contract has been deployed. Let's write a number to the blockchain and then read it back. Open the truffle console again:"),(0,o.kt)("p",null,"Get an instance of the deployed ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage")," contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"truffle(development)> let instance = await Storage.deployed()\n")),(0,o.kt)("p",null,"This returns:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"undefined\n")),(0,o.kt)("h3",{id:"writing-a-number-to-the-blockchain"},"Writing a number to the blockchain"),(0,o.kt)("p",null,"Now that you have an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage")," contract, call it's ",(0,o.kt)("inlineCode",{parentName:"p"},"store")," method and pass in a number to write to the blockchain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"truffle(development) > instance.store(1234)\n")),(0,o.kt)("p",null,"You should see something like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"{\n  tx: '0x10afbc5e0b9fa0c1ef1d9ec3cdd673e7947bd8760b22b8cdfe08f27f3a93ef1e',\n  receipt: {\n    blockHash: '0x8bacbce7c9d835db524bb856288e3a73a6afbe49ab34abd8cd8826db0240eb21',\n    blockNumber: 9,\n    contractAddress: null,\n    cumulativeGasUsed: 26458,\n    from: '0x34cb796d4d6a3e7f41c4465c65b9056fe2d3b8fd',\n    gasUsed: 26458,\n    logs: [],\n    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n    status: true,\n    to: '0x0d507b0467baef742f9cc0e671eddbdf6df41d33',\n    transactionHash: '0x10afbc5e0b9fa0c1ef1d9ec3cdd673e7947bd8760b22b8cdfe08f27f3a93ef1e',\n    transactionIndex: 0,\n    rawLogs: []\n  },\n  logs: []\n}\n")),(0,o.kt)("h3",{id:"reading-a-number-from-the-blockhain"},"Reading a number from the blockhain"),(0,o.kt)("p",null,"To read the number from the blockchain, call the ",(0,o.kt)("inlineCode",{parentName:"p"},"retrieve")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage")," contract instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"truffle(development)> let i = await instance.retrieve()\n")),(0,o.kt)("p",null,"This should return:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"undefined\n")),(0,o.kt)("p",null,"The result of the call to ",(0,o.kt)("inlineCode",{parentName:"p"},"retrieve")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"BN")," (big number). Call its ",(0,o.kt)("inlineCode",{parentName:"p"},".toNumber")," method to see the value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"truffle(development) > i.toNumber()\n")),(0,o.kt)("p",null,"You should see the number you stored."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"1234\n")),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Now you have the tools you need to launch a local Lux network, create a truffle project, as well as create, compile, deploy and interact with Solidity contracts."))}f.isMDXComponent=!0}}]);