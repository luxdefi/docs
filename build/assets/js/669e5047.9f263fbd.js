"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[7348],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},f=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,d=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return n?r.createElement(d,o(o({ref:t},f),{},{components:n})):r.createElement(d,o({ref:t},f))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5723:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s="Verifying Smart Contracts with Truffle Verify",u={unversionedId:"dapps/smart-contracts/verify-smart-contracts-with-truffle-verify",id:"dapps/smart-contracts/verify-smart-contracts-with-truffle-verify",title:"Verifying Smart Contracts with Truffle Verify",description:"This tutorial includes items from the truffle quickstart docs",source:"@site/docs/dapps/smart-contracts/verify-smart-contracts-with-truffle-verify.md",sourceDirName:"dapps/smart-contracts",slug:"/dapps/smart-contracts/verify-smart-contracts-with-truffle-verify",permalink:"/dapps/smart-contracts/verify-smart-contracts-with-truffle-verify",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/dapps/smart-contracts/verify-smart-contracts-with-truffle-verify.md",tags:[],version:"current",frontMatter:{},sidebar:"dapps",previous:{title:"Verifying Smart Contracts Using Hardhat and Snowtrace",permalink:"/dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace"},next:{title:"Verify Smart Contracts on the C-Chain Explorer",permalink:"/dapps/smart-contracts/verify-smart-contracts"}},f={},c=[{value:"Create a project",id:"create-a-project",level:2},{value:"Compiling",id:"compiling",level:2},{value:"Migrate",id:"migrate",level:2},{value:"Truffle verify",id:"truffle-verify",level:2},{value:"Fuji Testnet",id:"fuji-testnet",level:3},{value:"Mainnet",id:"mainnet",level:3}],p={toc:c};function m(e){var t=e.components,l=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"verifying-smart-contracts-with-truffle-verify"},"Verifying Smart Contracts with Truffle Verify"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This tutorial includes items from the truffle ",(0,i.kt)("a",{parentName:"em",href:"https://www.trufflesuite.com/docs/truffle/quickstart"},"quickstart docs"))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Inspired by ",(0,i.kt)("a",{parentName:"em",href:"https://www.npmjs.com/package/truffle-plugin-verify"},"truffle verify docs"))),(0,i.kt)("h2",{id:"create-a-project"},"Create a project"),(0,i.kt)("p",null,"Make sure you have truffle installed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"npm install -g truffle\n")),(0,i.kt)("p",null,"Create a new directory for your Truffle project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"mkdir MetaCoin\ncd MetaCoin\n")),(0,i.kt)("p",null,'Download ("unbox") the MetaCoin box:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"truffle unbox metacoin\n")),(0,i.kt)("p",null,"Once this operation is completed, you'll now have a project structure with the following items:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contracts/"),": Directory for Solidity contracts"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"migrations/"),": Directory for scriptable deployment files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"test/"),": Directory for test files for testing your application and contracts"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"truffle.js"),": Truffle configuration file")),(0,i.kt)("h2",{id:"compiling"},"Compiling"),(0,i.kt)("p",null,"Before we compile our smart contract, we must set up our environment"),(0,i.kt)("p",null,"Run the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"npm init -y\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"yarn add @truffle/hdwallet-provider yarn add -D truffle-plugin-verify\n")),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},".env.json")," file in your project's root directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "mnemonic": "your-wallet-seed-phrase",\n  "snowtraceApiKey": "your-snowtrace-api-key"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Get your snowtrace API key ",(0,i.kt)("a",{parentName:"em",href:"https://snowtrace.io/myapikey"},"here"))),(0,i.kt)("p",null,"Configure your ",(0,i.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," file to the appropriate settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * Use this file to configure your truffle project. It's seeded with some\n * common settings for different networks and features like migrations,\n * compilation and testing. Uncomment the ones you need or modify\n * them to suit your project as necessary.\n *\n * More information about configuration can be found at:\n *\n * trufflesuite.com/docs/advanced/configuration\n *\n * To deploy via Infura you'll need a wallet provider (like @truffle/hdwallet-provider)\n * to sign your transactions before they're sent to a remote public node. Infura accounts\n * are available for free at: infura.io/register.\n *\n * You'll also need a mnemonic - the twelve word phrase the wallet uses to generate\n * public/private key pairs. If you're publishing your code to GitHub make sure you load this\n * phrase from a file you've .gitignored so it doesn't accidentally become public.\n *\n */\n\nconst HDWalletProvider = require(\"@truffle/hdwallet-provider\")\n\n//\nconst { snowtraceApiKey, mnemonic } = require(\"./.env.json\")\n\nmodule.exports = {\n  /**\n   * Networks define how you connect to your ethereum client and let you set the\n   * defaults web3 uses to send transactions. If you don't specify one truffle\n   * will spin up a development blockchain for you on port 9545 when you\n   * run `develop` or `test`. You can ask a truffle command to use a specific\n   * network from the command line, e.g\n   *\n   * $ truffle test --network <network-name>\n   */\n\n  plugins: [\"truffle-plugin-verify\"],\n  api_keys: {\n    snowtrace: snowtraceApiKey,\n  },\n  networks: {\n    fuji: {\n      provider: () =>\n        new HDWalletProvider(\n          mnemonic,\n          `https://api.lux-test.network/ext/bc/C/rpc`\n        ),\n      network_id: 1,\n      timeoutBlocks: 200,\n      confirmations: 5,\n    },\n  },\n}\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Network can be configured for mainnet deployment(see Alternatives)")),(0,i.kt)("p",null,"Run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"truffle compile\n")),(0,i.kt)("p",null,"Once this operation is completed, your ",(0,i.kt)("inlineCode",{parentName:"p"},"./build/contracts")," folder should contain the following items:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ConvertLib.json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MetaCoin.json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Migrations.json"))),(0,i.kt)("h2",{id:"migrate"},"Migrate"),(0,i.kt)("p",null,"Run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"npx truffle migrate --network fuji\n")),(0,i.kt)("p",null,"You should see the txn activity in your terminal\n",(0,i.kt)("img",{alt:"truffle-verify-txn1",src:n(3279).Z,width:"1586",height:"928"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"truffle-verify-txn2",src:n(6383).Z,width:"1798",height:"888"})),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"truffle-verify-txn3",src:n(3763).Z,width:"1588",height:"1070"})),(0,i.kt)("h2",{id:"truffle-verify"},"Truffle verify"),(0,i.kt)("p",null,"Truffle verify allows users to verify contracts from the CLI"),(0,i.kt)("h3",{id:"fuji-testnet"},"Fuji Testnet"),(0,i.kt)("p",null,"Take a look at the Fuji Testnet Explorer ",(0,i.kt)("a",{parentName:"p",href:"https://testnet.snowtrace.io/"},"here")," and read more about truffle verify ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rkalis/truffle-plugin-verify"},"here")),(0,i.kt)("p",null,"If you have issues, contact us on ",(0,i.kt)("a",{parentName:"p",href:"https://chat.lux.network"},"Discord")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Run the following command:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"npx truffle run verify ConvertLib MetaCoin --network fuji\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Wait for the verification message from the CLI\n",(0,i.kt)("img",{alt:"truffle-verify-message1",src:n(3397).Z,width:"1734",height:"234"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"View the verified contract\n",(0,i.kt)("img",{alt:"truffle-verify-view-contract",src:n(9359).Z,width:"2768",height:"1000"})))),(0,i.kt)("h3",{id:"mainnet"},"Mainnet"),(0,i.kt)("p",null,"Configure your ",(0,i.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," file to the appropriate settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n...\n   plugins: [\n    'truffle-plugin-verify'\n  ],\n  api_keys: {\n    snowtrace: snowtraceApiKey\n  },\n  networks: {\n\n    mainnet: {\n        provider: () => new HDWalletProvider(mnemonic, `https://api.lux.network/ext/bc/C/rpc`),\n        network_id: 1,\n        timeoutBlocks: 200,\n        confirmations: 5\n    }\n  }\n};\n")),(0,i.kt)("p",null,"Run the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"truffle migrate --network mainnet\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-zsh"},"truffle verify CovertLib MetaCoin --network mainnet\n")),(0,i.kt)("p",null,"Thanks for reading \ud83d\udd3a"))}m.isMDXComponent=!0},3397:function(e,t,n){t.Z=n.p+"assets/images/truffle-verify-message1-9784a1ee566edf291bdbb175436c02dc.png"},3279:function(e,t,n){t.Z=n.p+"assets/images/truffle-verify-txn1-972224d8b8af61b4a997f57c1d3f8666.png"},6383:function(e,t,n){t.Z=n.p+"assets/images/truffle-verify-txn2-dff791349635d8488568214daf9c8864.png"},3763:function(e,t,n){t.Z=n.p+"assets/images/truffle-verify-txn3-617cdd696763446e2592438997848061.png"},9359:function(e,t,n){t.Z=n.p+"assets/images/truffle-verify-view-contract-63bd76d40d3b2f3e059941f74861c046.png"}}]);