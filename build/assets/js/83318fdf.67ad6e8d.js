"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7321],{72426:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});var i=t(85893),o=t(11151);const c={},r="Create a Voting Dapp on Lux Using ReactJS",s={id:"deprecated/tutorials-contest/2021/evoting-dapp/README",title:"Create a Voting Dapp on Lux Using ReactJS",description:"These tutorials were published as a snapshot of when they were written,",source:"@site/docs/deprecated/tutorials-contest/2021/evoting-dapp/README.md",sourceDirName:"deprecated/tutorials-contest/2021/evoting-dapp",slug:"/deprecated/tutorials-contest/2021/evoting-dapp/",permalink:"/deprecated/tutorials-contest/2021/evoting-dapp/",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/tutorials-contest/2021/evoting-dapp/README.md",tags:[],version:"current",frontMatter:{}},a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Initializing the Working Directory",id:"initializing-the-working-directory",level:2},{value:"<strong>Setting up the ReactJS Project</strong>",id:"setting-up-the-reactjs-project",level:3},{value:"<strong>Setting up the Truffle Project</strong>",id:"setting-up-the-truffle-project",level:3},{value:"<strong>Get Lux Credentials</strong>",id:"get-lux-credentials",level:3},{value:"<strong>Add .env File</strong>",id:"add-env-file",level:3},{value:"<strong>Create Election Smart Contract</strong>",id:"create-election-smart-contract",level:2},{value:"<strong>Create MainContract Smart Contract</strong>",id:"create-maincontract-smart-contract",level:2},{value:"<strong>Create a File for Migrating Smart Contracts</strong>",id:"create-a-file-for-migrating-smart-contracts",level:2},{value:"<strong>Compile Contracts with Truffle</strong>",id:"compile-contracts-with-truffle",level:2},{value:"<strong>Fund the Account and Run Migrations on the C-Chain</strong>",id:"fund-the-account-and-run-migrations-on-the-c-chain",level:2},{value:"<strong>Fund Your Account</strong>",id:"fund-your-account",level:3},{value:"<strong>Run Migrations</strong>",id:"run-migrations",level:3},{value:"<strong>Building the User Interface</strong>",id:"building-the-user-interface",level:2},{value:"BlockchainUtils Component",id:"blockchainutils-component",level:3},{value:"Updating App.js",id:"updating-appjs",level:3},{value:"CreateElection Component",id:"createelection-component",level:3},{value:"ActiveElections Component",id:"activeelections-component",level:3},{value:"VoteModal Component",id:"votemodal-component",level:3},{value:"Integrating Components Into App.js",id:"integrating-components-into-appjs",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2},{value:"About the Author",id:"about-the-author",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"create-a-voting-dapp-on-lux-using-reactjs",children:"Create a Voting Dapp on Lux Using ReactJS"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"These tutorials were published as a snapshot of when they were written,\nand may contain out-of-date-information.\nFor up-to-date information, please reach out to the owners of these\nprojects."})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["We will generate ",(0,i.jsx)(n.a,{href:"https://reactjs.org",children:"ReactJS"})," boilerplate code using\n",(0,i.jsx)(n.code,{children:"create-react-app"}),", which we will modify for our dapp frontend. React is a good\nchoice for efficient, developer-friendly blockchain interactions. For the\nbackend, ",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.4/",children:"Solidity"})," smart contracts\nwill be deployed to the Lux blockchain using ",(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com",children:"Truffle\nSuite"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Truffle Suite is a toolkit for launching decentralized applications (dapps) on\nEthereum Virtual Machine (EVM) compatible blockchains like Lux. With\nTruffle you can write and compile smart contracts, build artifacts, run\nmigrations and interact with deployed contracts. This tutorial illustrates how\nTruffle can be used with Lux's C-Chain, which is an instance of the EVM."}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," and\n",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://reactjs.org/",children:"ReactJS"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://lux.network",children:"Lux"})," network,\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.6/",children:"Solidity"})," and\n",(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com/truffle",children:"Truffle"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," >= 10.16 and ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"})," >=\n5.6 installed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com/truffle",children:"Truffle"}),", which can be installed\nglobally with ",(0,i.jsx)(n.code,{children:"npm install -g truffle"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://metamask.io",children:"MetaMask"})," extension added to the browser."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"initializing-the-working-directory",children:"Initializing the Working Directory"}),"\n",(0,i.jsxs)(n.p,{children:["The client-side of our dapp is made using ",(0,i.jsx)(n.strong,{children:"ReactJS"}),". Smart contracts will be\nmade using ",(0,i.jsx)(n.strong,{children:"Solidity"})," language and will be deployed on the ",(0,i.jsx)(n.strong,{children:"Lux"}),"\nnetwork with ",(0,i.jsx)(n.strong,{children:"Truffle Suite"}),". Therefore, we need to set up our working\ndirectory according to ReactJS and Truffle, to make the development process\nsmoother."]}),"\n",(0,i.jsx)(n.p,{children:"Open a terminal and navigate to the directory where we will create the\napplication. Usually, this will be inside our user home directory but can be\nlocated wherever is practical. On most Linux distributions this will change into\n/home/ . On MacOS it will be /Users/. On Windows the user directories are\nlocated in C:\\Users."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ~\n"})}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-the-reactjs-project",children:(0,i.jsx)(n.strong,{children:"Setting up the ReactJS Project"})}),"\n",(0,i.jsx)(n.p,{children:"Create a new react app using npx. npx is a npm package runner (x probably stands\nfor eXecute). The typical use is to download and run a package temporarily or\nfor trials. Using npx to execute the package binaries for create-react-app will\ngenerate a new React app scaffold in the specified directory."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx create-react-app voting\n"})}),"\n",(0,i.jsx)(n.p,{children:"Move to the newly created directory and install the basic dependencies."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd voting\nnpm install --save dotenv web3 @truffle/contract @truffle/hdwallet-provider\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"index.html"})," file inside of the ",(0,i.jsx)(n.code,{children:"public"})," directory and replace the\nexisting code with the following HTML :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>Lux Elections</title>\n    <link\n      rel="stylesheet"\n      href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"\n    />\n  </head>\n\n  <body>\n    <div id="root"></div>\n  </body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"App.js"})," inside of the ",(0,i.jsx)(n.code,{children:"src"})," directory and replace the existing\ncode with the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\n\n// 1. Importing other modules\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: null,\n      account: null,\n      mainInstance: null,\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  async init() {\n    // 2. Load web3\n    // 3. Load Account\n    // 4. Load Smart-Contract instance\n  }\n\n  render() {\n    return <div>Lux evoting application</div>;\n  }\n}\nexport default App;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"App"})," component has a constructor to declare and initialize the state\nproperties. ",(0,i.jsx)(n.code,{children:"web3"})," is an instance of the ",(0,i.jsx)(n.code,{children:"MetaMask"})," provider for interacting\nwith the Lux network, ",(0,i.jsx)(n.code,{children:"account"})," is a user address and ",(0,i.jsx)(n.code,{children:"mainInstance"})," is\nthe instance of our smart contract."]}),"\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"index.js"})," inside of the ",(0,i.jsx)(n.code,{children:"src"})," directory and replace the existing\ncode with the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport ReactDOM from "react-dom";\nimport App from "./App";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById("root")\n);\n'})}),"\n",(0,i.jsx)(n.p,{children:"React project setup is now complete."}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-the-truffle-project",children:(0,i.jsx)(n.strong,{children:"Setting up the Truffle Project"})}),"\n",(0,i.jsx)(n.p,{children:"Run the following command in the project root directory, to create a boilerplate for the Truffle project."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle init\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will set up the initial project structure. Solidity code will be stored in\nthe ",(0,i.jsx)(n.code,{children:"contracts"})," directory. Deployment functions written in JavaScript will be\nstored in the ",(0,i.jsx)(n.code,{children:"migrations"})," folder. By default, the ",(0,i.jsx)(n.code,{children:"/build/contracts"})," folder\ncontains information about the compiled and deployed contract, like the ABI, in\nJSON format. These meta-files are commonly referred to as ",(0,i.jsx)(n.code,{children:"artifacts"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["There is also 1 ",(0,i.jsx)(n.strong,{children:"config"})," file created by the above command, which is,\n",(0,i.jsx)(n.strong,{children:"truffle-config.js"}),". In this file, there is a lot of information regarding how\nto deploy contracts, how to choose a network to deploy them, and many others.\nTherefore, we should preserve this file for reference. So, use the below command\nto make a copy of this file. This would create a copy named\n",(0,i.jsx)(n.code,{children:"truffle-config-default.js"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp truffle-config.js truffle-config-default.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we will update the ",(0,i.jsx)(n.code,{children:"truffle-config.js"})," file, with the information needed to\ndeploy the smart contract on the Testnet test network. This file helps us in\nconnecting to the Lux node, and we will require an Lux node's RPC\nurl along with an Lux wallet mnemonic for deploying the contract on the\nnetwork."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'require("dotenv").config();\nconst HDWalletProvider = require("@truffle/hdwallet-provider");\n\n// Account credentials from which our contract will be deployed\nconst MNEMONIC = process.env.MNEMONIC;\n\nmodule.exports = {\n  contracts_build_directory: "./src/build/contracts",\n  networks: {\n    development: {\n      host: "127.0.0.1",\n      port: 7545,\n      network_id: "*",\n    },\n    testnet: {\n      provider: function () {\n        return new HDWalletProvider({\n          mnemonic: MNEMONIC,\n          providerOrUrl: `https://api.lux-test.network/ext/bc/C/rpc`,\n        });\n      },\n      network_id: "*",\n      gas: 3000000,\n      gasPrice: 470000000000,\n      skipDryRun: true,\n    },\n  },\n  compilers: {\n    solc: {\n      version: "0.8.0",\n    },\n  },\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that we're setting the ",(0,i.jsx)(n.code,{children:"gasPrice"})," and ",(0,i.jsx)(n.code,{children:"gas"})," to the appropriate values for\nthe Lux C-Chain. Here, you can see that we have used\n",(0,i.jsx)(n.code,{children:"contracts_build_directory"})," to change the default location of ",(0,i.jsx)(n.code,{children:"artifacts"})," from\nthe project root directory to the ",(0,i.jsx)(n.code,{children:"src"})," folder. This is because React cannot\naccess files that are present outside the ",(0,i.jsx)(n.code,{children:"src"})," folder."]}),"\n",(0,i.jsx)(n.h3,{id:"get-lux-credentials",children:(0,i.jsx)(n.strong,{children:"Get Lux Credentials"})}),"\n",(0,i.jsx)(n.p,{children:"For deploying smart contracts we need two things: A node connected to the\nLux network and an account with few LUX. Lux connected node through\nRPC (Remote Procedure Call) is provided for free by the Lux Networks."}),"\n",(0,i.jsxs)(n.p,{children:["Now we need an Lux wallet, where we would keep our funds, required for all\nthe transactions on the network. So, visit ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network",children:"here"}),"\nand create an account. Save the mnemonic in a secure place (we would need it\nlater). Instructions to add funds will be provided later in the tutorial."]}),"\n",(0,i.jsx)(n.h3,{id:"add-env-file",children:(0,i.jsx)(n.strong,{children:"Add .env File"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we need a ",(0,i.jsx)(n.strong,{children:"Lux"})," wallet, where we would keep our funds, required for\nall the transactions on the network. Visit the ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network/",children:"Lux\nWallet"})," and create an account. While creating your\naccount you will see your public address and mnemonic. This public address will\nbe required to transfer funds. Save the ",(0,i.jsx)(n.strong,{children:"mnemonic"})," in a secure place, we will\nneed it later. Instructions to add funds will be provided later in the tutorial."]}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".env"})," file in the project root folder. Please take a note that dot (.)\nis necessary for the ",(0,i.jsx)(n.code,{children:".env"})," file name. Now copy your Lux wallet's mnemonic\nin the .env file as shown below. In the .env file, ",(0,i.jsx)(n.strong,{children:"MNEMONIC"}),' should be\nenclosed within double-quotes (" ").']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'MNEMONIC="<wallet-mnemonic>"\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Never share or commit your ",(0,i.jsx)(n.code,{children:".env"})," file. It contains your credentials like\n",(0,i.jsx)(n.code,{children:"mnemonics"}),". Therefore, it is advised to add ",(0,i.jsx)(n.code,{children:".env"})," to your ",(0,i.jsx)(n.code,{children:".gitignore"})," file."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Our project setup is now complete."}),"\n",(0,i.jsx)(n.p,{children:"To confirm that we are on the same page, run the following command in the project root folder."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,i.jsx)(n.p,{children:"It might take few seconds, to show output as in the image below."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"localhost react server",src:t(7504).Z+"",width:"411",height:"181"})}),"\n",(0,i.jsxs)(n.p,{children:["In a browser, visit the URL of our running dapp:\n",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),". If you followed the above steps,\nyou would see the page as shown below."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"localhost frontend",src:t(5287).Z+"",width:"316",height:"194"})}),"\n",(0,i.jsx)(n.h2,{id:"create-election-smart-contract",children:(0,i.jsx)(n.strong,{children:"Create Election Smart Contract"})}),"\n",(0,i.jsxs)(n.p,{children:["Create the file ",(0,i.jsx)(n.code,{children:"Election.sol"})," (",(0,i.jsx)(n.code,{children:".sol"})," stands for Solidity) inside of the\n",(0,i.jsx)(n.code,{children:"contracts"})," directory and use the code as given in this\n",(0,i.jsx)(n.a,{target:"_blank",href:t(23032).Z+"",children:"file"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Election"})," is a Solidity contract that lets us view the name and description,\nthe candidates standing in an election, and vote for them. For this dapp, we\nwill be accessing the deployed Election contracts using their ",(0,i.jsx)(n.code,{children:"address"})," and\n",(0,i.jsx)(n.code,{children:"ABI"}),". This Solidity code is what will be deployed to the blockchain, each time\nwe create a new election."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Let's understand this smart contract"})}),"\n",(0,i.jsxs)(n.p,{children:["The code for smart contract is everything within ",(0,i.jsx)(n.code,{children:"contract Election { }"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Basic fields about election"})," - This block of code would be storing basic\nfields of each ",(0,i.jsx)(n.code,{children:"Election"})," contract. Fields include ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"description"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// Election details will be stored in these variables\nstring public name;\nstring public description;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Storing candidate details"})," - The ",(0,i.jsx)(n.code,{children:"Candidate"})," struct consists of the data\nfields ",(0,i.jsx)(n.code,{children:"id"}),", ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"voteCount"}),". We will define a mapping between an\nunsigned integer (",(0,i.jsx)(n.code,{children:"uint"}),") and each instance of a Candidate. This will enable us\nto refer to each candidate by its index within the mapping - ",(0,i.jsx)(n.code,{children:"candidates[n]"}),",\nwhere ",(0,i.jsx)(n.code,{children:"n"})," is the corresponding ",(0,i.jsx)(n.code,{children:"uint"})," value."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// Structure of candidate standing in the election\nstruct Candidate {\n  uint256 id;\n  string name;\n  uint256 voteCount;\n}\n\n// Storing candidates in a map\nmapping(uint256 => Candidate) public candidates;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Storing address of voters who have already voted and the number of\ncandidates"})," - ",(0,i.jsx)(n.code,{children:"voters"})," is a mapping between the address of the voter and a\nboolean. In Solidity, the default boolean value is ",(0,i.jsx)(n.code,{children:"false"}),", so if the return\nvalue of ",(0,i.jsx)(n.code,{children:"voters(address)"})," is ",(0,i.jsx)(n.code,{children:"false"})," we can understand that this address has\nnot voted. ",(0,i.jsx)(n.code,{children:"true"})," indicates that the account has voted already."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// Storing address of those voters who already voted\nmapping(address => bool) public voters;\n\n// Number of candidates in standing in the election\nuint public candidatesCount = 0;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Constructor call and adding candidates to the election"})," - When a smart\ncontract is deployed on Lux, the first function to be called is the\n",(0,i.jsx)(n.code,{children:"constructor()"})," function. Whatever we want to initialize in our Solidity smart\ncontract, we do it inside the ",(0,i.jsx)(n.code,{children:"constructor()"})," function. We will be adding a\nname, description, and candidates to the election. Here, ",(0,i.jsx)(n.code,{children:"addCandidate()"})," is a\nprivate function, so that it cannot be called publicly. This function takes\n",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"description"})," as a single array named ",(0,i.jsx)(n.code,{children:"_nda"})," in the first argument\nand candidates' name as an array in the second argument."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'// Setting of variables and data, during the creation of election contract\nconstructor (string[] memory _nda, string[] memory _candidates) public {\n  require(_candidates.length > 0, "There should be atleast 1 candidate.");\n  name = _nda[0];\n  description = _nda[1];\n  for(uint i = 0; i < _candidates.length; i++) {\n    addCandidate(_candidates[i]);\n  }\n}\n\n// Private function to add a candidate\nfunction addCandidate (string memory _name) private {\n  candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);\n  candidatesCount ++;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Voting candidates in an election"})," - We made a ",(0,i.jsx)(n.code,{children:"vote()"})," function. It takes\n",(0,i.jsx)(n.code,{children:"candidateId"})," as an argument and increments the vote of the respective\ncandidate. It requires two things, a voter should not have voted in the\nparticular election by checking boolean across the ",(0,i.jsx)(n.code,{children:"voters"})," mapping and\n",(0,i.jsx)(n.code,{children:"candidateId"})," should be a valid one, that is ",(0,i.jsx)(n.code,{children:"0 <= candidateId < candiatesCount"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'// Public vote function for voting a candidate\nfunction vote (uint _candidate) public {\n  require(!voters[msg.sender], "Voter has already Voted!");\n  require(_candidate < candidatesCount && _candidate >= 0, "Invalid candidate to Vote!");\n  voters[msg.sender] = true;\n  candidates[_candidate].voteCount++;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"create-maincontract-smart-contract",children:(0,i.jsx)(n.strong,{children:"Create MainContract Smart Contract"})}),"\n",(0,i.jsxs)(n.p,{children:["Create the file ",(0,i.jsx)(n.code,{children:"MainContract.sol"})," inside of the ",(0,i.jsx)(n.code,{children:"contracts"})," directory and paste the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\nimport './Election.sol';\n\ncontract MainContract {\n  uint public electionId = 0;\n  mapping (uint => address) public Elections;\n\n  function createElection (string[] memory _nda, string[] memory _candidates) public {\n    Election election = new Election(_nda, _candidates);\n    Elections[electionId] = address(election);\n    electionId++;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"MainContract.sol"})," is the entry point of our dapp. To create a new election, we\nneed to call the ",(0,i.jsx)(n.code,{children:"createElection()"})," function from this deployed contract. It\nwill maintain the total number of election contracts deployed, their address on\nthe network and will also help in deploying them. We also\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.4/layout-of-source-files.html?highlight=import#syntax-and-semantics",children:"import"}),"\n",(0,i.jsx)(n.code,{children:"Elections.sol"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Here ",(0,i.jsx)(n.code,{children:"electionId"})," is used for assigning ID's to each election that a user\ncreates and is incremented for using it while creating the next election. Also,\n",(0,i.jsx)(n.code,{children:"Elections"})," is a public mapping between ",(0,i.jsx)(n.code,{children:"electionId"})," and the address of the\ndeployed election contract."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"uint public electionId = 0;\nmapping (uint => address) public Elections;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We have made a ",(0,i.jsx)(n.code,{children:"createElection()"})," function which will be used to deploy our\n",(0,i.jsx)(n.code,{children:"Election"})," smart contract. This function takes ",(0,i.jsx)(n.code,{children:"name"})," and ",(0,i.jsx)(n.code,{children:"description"})," as a\nsingle array named ",(0,i.jsx)(n.code,{children:"_nda"})," in the first argument and candidates' name as an array\nin the second argument."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"function createElection (string[] memory _nda, string[] memory _candidates) public {\n  Election election = new Election(_nda, _candidates);\n  Elections[electionId] = address(election);\n  electionId++;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Election"})," contract is deployed on the network using the ",(0,i.jsx)(n.code,{children:"new"})," keyword,\nwhich deploys the contract, initializes the contract's variables, runs the\n",(0,i.jsx)(n.code,{children:"constructor()"})," function and returns the ",(0,i.jsx)(n.strong,{children:"address"})," of the newly deployed\ncontract to the caller. Then the address is stored in the ",(0,i.jsx)(n.code,{children:"Elections"})," mapping.\nOnce the election contract is deployed successfully, ",(0,i.jsx)(n.code,{children:"electionId"})," is\nincremented."]}),"\n",(0,i.jsx)(n.h2,{id:"create-a-file-for-migrating-smart-contracts",children:(0,i.jsx)(n.strong,{children:"Create a File for Migrating Smart Contracts"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a new file in the ",(0,i.jsx)(n.code,{children:"migrations"})," directory named ",(0,i.jsx)(n.code,{children:"2_deploy_contracts.js"}),",\nand add the following block of code. This handles deploying the ",(0,i.jsx)(n.code,{children:"MainContract"}),"\nand ",(0,i.jsx)(n.code,{children:"Election"})," smart contract to the blockchain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const MainContract = artifacts.require("MainContract");\n\nmodule.exports = function (deployer) {\n  deployer.deploy(MainContract);\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We are deploying only the ",(0,i.jsx)(n.code,{children:"MainContract"}),", because the ",(0,i.jsx)(n.code,{children:"Election"})," contract will\nbe deployed by the ",(0,i.jsx)(n.code,{children:"MainContract"})," itself during the runtime, using the function\n",(0,i.jsx)(n.code,{children:"createElection()"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"compile-contracts-with-truffle",children:(0,i.jsx)(n.strong,{children:"Compile Contracts with Truffle"})}),"\n",(0,i.jsxs)(n.p,{children:["If we have altered the code within our Solidity source files or made new ones\n(like ",(0,i.jsx)(n.code,{children:"Elections.sol"}),"), we need to run ",(0,i.jsx)(n.code,{children:"truffle compile"})," in the terminal, from\ninside the project root directory."]}),"\n",(0,i.jsx)(n.p,{children:"The expected output would look similar:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Compiling your contracts...\n===========================\n> Compiling ./contracts/Election.sol\n> Compiling ./contracts/MainContract.sol\n> Compiling ./contracts/Migrations.sol\n\n> Artifacts written to /home/guest/blockchain/voting/build/contracts\n> Compiled successfully using:\n   - solc: 0.8.0+commit.c7dfd78e.Emscripten.clang\n"})}),"\n",(0,i.jsx)(n.p,{children:"The compiled smart contracts are written as JSON files in the\n/src/build/contracts directory. These are the stored ABI and other necessary\nmetadata - the artifacts."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ABI"})," refers to Application Binary Interface, which is a standard for\ninteracting with the smart contracts from outside the blockchain as well as\ncontract-to-contract interaction. Please refer to the Solidity's documentation\nabout ABIs\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.5.3/abi-spec.html#:~:text=The%20Contract%20Application%20Binary%20Interface,contract%2Dto%2Dcontract%20interaction.&text=This%20specification%20does%20not%20address,known%20only%20at%20run%2Dtime",children:"here"}),"\nto learn more."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fund-the-account-and-run-migrations-on-the-c-chain",children:(0,i.jsx)(n.strong,{children:"Fund the Account and Run Migrations on the C-Chain"})}),"\n",(0,i.jsxs)(n.p,{children:["When deploying smart contracts to the C-Chain, it will require some deployment\ncost. As you can see inside ",(0,i.jsx)(n.code,{children:"truffle-config.js"}),", HDWallet Provider will help us\nin deploying on Testnet C-chain and deployment cost will be managed by the account\nwhose mnemonic has been stored in the ",(0,i.jsx)(n.code,{children:".env"})," file. Therefore we need to fund the\naccount."]}),"\n",(0,i.jsx)(n.h3,{id:"fund-your-account",children:(0,i.jsx)(n.strong,{children:"Fund Your Account"})}),"\n",(0,i.jsxs)(n.p,{children:["We need funds in our C-Chain address, as smart contracts are deployed on C-Chain,\nthe Contract-Chain. This address can easily be found on the ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network",children:"Lux\nWallet"})," dashboard. Lux network has 3 chains:\nX-Chain, P-Chain and C-Chain. The address of all these chains can be found by\nswitching tabs at the bottom of the division, where there is a QR code. So,\nswitch to C-Chain, and copy the address. Now fund your account using the faucet\nlink ",(0,i.jsx)(n.a,{href:"https://faucet.lux.network/",children:"here"})," and paste your C-Chain address in the\ninput field. Refer to the below image, to identify the address section."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"wallet c-chain address",src:t(90772).Z+"",width:"353",height:"290"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["You'll need to send at least ",(0,i.jsx)(n.code,{children:"135422040"})," nLUX to the account to cover the\ncost of contract deployments. Here ",(0,i.jsx)(n.code,{children:"nLUX"})," refers nano-LUX, which is a billionth of\nan ",(0,i.jsx)(n.code,{children:"LUX"})," or simply 1 ",(0,i.jsx)(n.code,{children:"nLUX"})," = (1/1000,000,000) ",(0,i.jsx)(n.code,{children:"LUX"}),". Though funding\nthrough faucet would give you enough ",(0,i.jsx)(n.code,{children:"LUX"})," to run multiple deployments and\ntransactions on the network."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"run-migrations",children:(0,i.jsx)(n.strong,{children:"Run Migrations"})}),"\n",(0,i.jsxs)(n.p,{children:["Now everything is in place to run migrations and deploy the ",(0,i.jsx)(n.code,{children:"MainContract"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle migrate --network testnet\n"})}),"\n",(0,i.jsx)(n.p,{children:"This might take a while depending upon your internet connection or traffic on the network."}),"\n",(0,i.jsx)(n.p,{children:"Note - For development purpose, we may deploy our contracts on the local\nnetwork, by running Ganache (Truffle's local blockchain simulation) and using\nthe command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle migrate --network development\n"})}),"\n",(0,i.jsx)(n.p,{children:"On successful execution of this command, you should see:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Starting migrations...\n======================\n> Network name:    'testnet'\n> Network id:      1\n> Block gas limit: 8000000 (0x7a1200)\n\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   > transaction hash:    0x094a9c0f12ff3158bcb40e266859cb4f34a274ea492707f673b93790af40e9e9\n   > Blocks: 0            Seconds: 0\n   > contract address:    0x0b1f00d0Af6d5c864f86E6b96216e0a2Da111055\n   > block number:        40\n   > block timestamp:     1620393171\n   > account:             0x80599dd7F8c5426096FD189dcC6C40f47e8e3714\n   > balance:             39.71499696\n   > gas used:            173118 (0x2a43e)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.00346236 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.00346236 ETH\n\n\n2_deploy_contracts.js\n=====================\n\n   Deploying 'MainContract'\n   ------------------------\n   > transaction hash:    0xbeb13fc6bbee250eea9151faf02bfe247ec497294acc84c9b8319ed609ced086\n   > Blocks: 0            Seconds: 0\n   > contract address:    0xf30D372A6911CCF6BBa1e84c3CEd51cC0F3D7769\n   > block number:        42\n   > block timestamp:     1620393172\n   > account:             0x80599dd7F8c5426096FD189dcC6C40f47e8e3714\n   > balance:             39.69235442\n   > gas used:            1090212 (0x10a2a4)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.02180424 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.02180424 ETH\n\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.0252666 ETH\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you didn't create an account on the C-Chain you'll see this error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Error: Expected parameter 'from' not passed to function.\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you didn't fund the account, you'll see this error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Error:  *** Deployment Failed ***\n\n\"Migrations\" could not deploy due to insufficient funds\n   * Account:  0x090172CD36e9f4906Af17B2C36D662E69f162282\n   * Balance:  0 wei\n   * Message:  sender doesn't have enough funds to send tx. The upfront cost is: 1410000000000000000 and the sender's account only has: 0\n   * Try:\n      + Using an adequately funded account\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The information and ABI of the deployed contract are present in the\n",(0,i.jsx)(n.code,{children:"src/build/contract"})," directory as ",(0,i.jsx)(n.code,{children:"Election.json"}),". Information like contract\naddress, network info etc. could be found here."]}),"\n",(0,i.jsx)(n.h2,{id:"building-the-user-interface",children:(0,i.jsx)(n.strong,{children:"Building the User Interface"})}),"\n",(0,i.jsxs)(n.p,{children:["We have already set up our React project directory. The client-side files to\ninteract with the Lux blockchain are present in the ",(0,i.jsx)(n.code,{children:"src"})," directory.\nFirst, we will make a ReactJS component with of a couple of functions to connect\nour browser with the Lux network. These functions will be kept in a\nseparate file named ",(0,i.jsx)(n.code,{children:"BlockchainUtil.js"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"blockchainutils-component",children:"BlockchainUtils Component"}),"\n",(0,i.jsxs)(n.p,{children:["Create the file ",(0,i.jsx)(n.code,{children:"BlockchainUtil.js"})," inside of the project ",(0,i.jsx)(n.code,{children:"src"})," directory and paste the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport Web3 from "web3";\nimport TruffleContract from "@truffle/contract";\n\nexport class GetWeb3 extends React.Component {\n  async getWeb3() {\n    let web3 = window.web3;\n\n    if (typeof web3 !== "undefined") {\n      // Setup Web3 Provider\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n      return this.web3;\n    } else {\n      this.isWeb3 = false;\n    }\n  }\n}\n\nexport class GetContract extends React.Component {\n  async getContract(web3, contractJson) {\n    // Setup Contract\n    this.contract = await TruffleContract(contractJson);\n    this.contract.setProvider(web3.currentProvider);\n    return await this.contract.deployed();\n  }\n}\n\nexport class GetAccount extends React.Component {\n  async getAccount(web3) {\n    return await web3.eth.getAccounts();\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"updating-appjs",children:"Updating App.js"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"App.js"})," is the entry point of our React application. Therefore, we will need to\nupdate ",(0,i.jsx)(n.code,{children:"App.js"})," with the components which we want to show in our application. As\nwe move ahead and build components, we will update ",(0,i.jsx)(n.code,{children:"App.js"})," and import the\ncomponents so that we can make use of their functionality."]}),"\n",(0,i.jsxs)(n.p,{children:["So, now add the following line under the ",(0,i.jsx)(n.code,{children:"//Importing..."})," section of ",(0,i.jsx)(n.code,{children:"App.js"})," to\nimport ",(0,i.jsx)(n.code,{children:"BlockchainUtil.js"})," module."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// 1. Importing other modules\nimport { GetWeb3, GetContract, GetAccount } from "./BlockchainUtil";\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Paste the following code inside the ",(0,i.jsx)(n.code,{children:"init()"})," function of ",(0,i.jsx)(n.code,{children:"App.js"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// 2. Load web3\nconst Web3 = new GetWeb3();\nthis.web3 = await Web3.getWeb3();\nthis.setState({ web3: this.web3 });\n\n// 3. Load Account\nconst Account = new GetAccount();\nthis.account = await Account.getAccount(this.web3);\nthis.setState({ account: this.account[0] });\n\n// 4. Load Contract\nconst Contract = new GetContract();\nthis.mainInstance = await Contract.getContract(this.web3, contractJson);\nthis.setState({ mainInstance: this.mainInstance });\n"})}),"\n",(0,i.jsx)(n.h3,{id:"createelection-component",children:"CreateElection Component"}),"\n",(0,i.jsxs)(n.p,{children:["Now let's make a component that will create new elections using our deployed\nsmart contract. Create the file ",(0,i.jsx)(n.code,{children:"CreateElection.js"})," inside of the project ",(0,i.jsx)(n.code,{children:"src"}),"\ndirectory and use the code as given in this\n",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/evoting-dapp/frontend/CreateElection.js",children:"file"}),". The code is commented to draw attention\nto the important parts."]}),"\n",(0,i.jsx)(n.h3,{id:"activeelections-component",children:"ActiveElections Component"}),"\n",(0,i.jsxs)(n.p,{children:["Create the file ",(0,i.jsx)(n.code,{children:"ActiveElections.js"})," inside of the project ",(0,i.jsx)(n.code,{children:"src"})," directory and\nuse the code as given in this ",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/evoting-dapp/frontend/ActiveElections.js",children:"file"})]}),"\n",(0,i.jsx)(n.h3,{id:"votemodal-component",children:"VoteModal Component"}),"\n",(0,i.jsxs)(n.p,{children:["In the above component ",(0,i.jsx)(n.code,{children:"ActiveElections.js"}),", we have used a component called\n",(0,i.jsx)(n.code,{children:"VoteModal"})," which contains the candidate details and a button to cast a vote.\nNow we will make this component available by creating a file named\n",(0,i.jsx)(n.code,{children:"VoteModal.js"})," inside the ",(0,i.jsx)(n.code,{children:"src"})," directory. Use the code as present in this\n",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/evoting-dapp/frontend/VoteModal.js",children:"file"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"integrating-components-into-appjs",children:"Integrating Components Into App.js"}),"\n",(0,i.jsxs)(n.p,{children:["Now we need to update our ",(0,i.jsx)(n.code,{children:"App.js"})," file with all the components that we have made so far."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Import Modules"})," - First import all the modules and components into the\n",(0,i.jsx)(n.code,{children:"App.js"})," file by appending the following code under the ",(0,i.jsx)(n.code,{children:"// 1. Importing other modules"})," section."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// 1. Importing other modules\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Redirect,\n} from "react-router-dom";\nimport CreateElection from "./CreateElection";\nimport ActiveElections from "./ActiveElections";\nimport contractJson from "./build/contracts/MainContract.json";\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Load components"})," - Inside the ",(0,i.jsx)(n.code,{children:"<div>"})," tag of ",(0,i.jsx)(n.code,{children:"return()"})," function in ",(0,i.jsx)(n.code,{children:"App.js"}),",\nreplace the sample text (",(0,i.jsx)(n.code,{children:"Lux evoting"}),") with the code of the following\ncomponents."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// For routing through the react application\n<Router>\n  {/* Default route to ActiveElections component */}\n  <Route path="/" exact>\n    <Redirect to="/active" />\n  </Route>\n\n  {/* Navbar */}\n  <nav\n    className="navbar navbar-dark shadow"\n    style={{\n      backgroundColor: "#1b2021",\n      height: "60px",\n      color: "white",\n      marginBottom: "50px",\n    }}\n  >\n    {/* Link to Active election page (nav-header) */}\n    <Link to="/active">\n      <b style={{ cursor: "pointer", color: "white" }}>Lux Elections</b>\n    </Link>\n\n    {/* Account address on the right side of the navbar  */}\n    <span style={{ float: "right" }}>{this.state.account}</span>\n  </nav>\n\n  {/* Route to CreateElection page */}\n  {\n    <Route\n      path="/createElection"\n      exact\n      component={() => <CreateElection account={this.state.account} />}\n    />\n  }\n\n  {/* Route to Active election page */}\n  {\n    <Route\n      path="/active"\n      exact\n      component={() => <ActiveElections account={this.state.account} />}\n    />\n  }\n</Router>\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"We have used few other dependencies which we didn't install earlier. So, run\nthe following command in the terminal of your project directory."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save rimble-ui react-router-dom --force\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Rimble UI library comes with a peer dependency of ",(0,i.jsx)(n.code,{children:"react@16.9.0"})," which is not\nthe latest version of React that we are using which is ",(0,i.jsx)(n.code,{children:"react@17.0.2"}),". Running the\n",(0,i.jsx)(n.code,{children:"npm install"})," command without the ",(0,i.jsx)(n.code,{children:"--force"})," tag would cause an ",(0,i.jsx)(n.code,{children:"unable to resolve dependency tree"})," conflict. Thus, the ",(0,i.jsx)(n.code,{children:"--force"})," tag is used to override\nany type of conflicts and proceeds with the installation anyway. Another way\nto resolve this conflict is by using the ",(0,i.jsx)(n.code,{children:"--legacy-peer-deps"})," tag instead, but\nthis would ignore all peer dependencies which we do not require, as the\nconflict is only between ",(0,i.jsx)(n.code,{children:"react"})," and ",(0,i.jsx)(n.code,{children:"rimble-ui"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Now go to the project root directory, the ",(0,i.jsx)(n.code,{children:"voting"})," directory, and run\nthe command ",(0,i.jsx)(n.code,{children:"npm start"}),". The ReactJS server would start automatically. Visit\n",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," in a browser to interact with the\ndapp frontend."]}),"\n",(0,i.jsx)(n.p,{children:"Don't forget to set up MetaMask with Testnet and also fund the account with\nTestnet C-Chain test tokens to vote. In the MetaMask extension, add a custom RPC by\nclicking at the network dropdown in the centre of the extension. Fill in the\ndetails as shown below"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Info"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Network Name"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Lux Testnet"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"New RPC URL"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"https://api.lux-test.network/ext/bc/C/rpc",children:"https://api.lux-test.network/ext/bc/C/rpc"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Chain ID"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"43113"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Currency Symbol"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"LUX-C"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Block Explorer URL"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"https://testnet.snowtrace.io",children:"https://testnet.snowtrace.io"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"You have successfully built a full-fledged e-voting dapp with advanced features\nlike creating custom elections, voting in them and deployed the smart contract\non the Testnet test network using Truffle Suite. Along with that, we have also\nbuilt the client-side application using ReactJS for interacting with the\nnetwork. From this tutorial, you have learned not only how to make and\ndeploy smart contracts but also how to integrate ReactJS with the blockchain\nusing Truffle Suite."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"eVoting demo",src:t(43932).Z+"",width:"600",height:"337"})}),"\n",(0,i.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,i.jsx)(n.p,{children:"Now that we have built and deployed a voting dapp, we can make new elections\nwith a title and description, and vote on them separately. Some recommended\nfeatures to add would be the ability to add start and end dates for an election,\ndeclaring the winner after the election has ended, or UI enhancements like modal\nwindows and styled buttons."}),"\n",(0,i.jsx)(n.h2,{id:"about-the-author",children:"About the Author"}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial is created by ",(0,i.jsx)(n.a,{href:"https://www.linkedin.com/in/iamrajranjan",children:"Raj Ranjan"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},23032:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/files/Election-b0d55dd2b524ba642e66dc9faf7a279e.sol"},7504:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/evoting-dapp-00-localhost-react-server-ba81a9bcbab51d24676013d021beea36.png"},5287:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/evoting-dapp-01-localhost-frontend-91d5a2e2a460407a783c14d0c7e134b4.png"},90772:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/evoting-dapp-02-wallet-c-chain-address-9d61064592c1afbc3d45788091af9917.png"},43932:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/evoting-dapp-03-evoting-demo-581ea3569cef0fee9c80a0a772b17e84.gif"},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>r});var i=t(67294);const o={},c=i.createContext(o);function r(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);