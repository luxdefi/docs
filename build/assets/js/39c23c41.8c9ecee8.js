"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[1428],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,m=c["".concat(o,".").concat(d)]||c[d]||h[d]||i;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3387:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return h}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],s={sidebar_position:9,description:"This API can be used for measuring node health. Use Lux docs as a reference when testing node health. Helpful examples provided."},o="Health API",u={unversionedId:"apis/luxd/apis/health",id:"apis/luxd/apis/health",title:"Health API",description:"This API can be used for measuring node health. Use Lux docs as a reference when testing node health. Helpful examples provided.",source:"@site/docs/apis/luxd/apis/health.md",sourceDirName:"apis/luxd/apis",slug:"/apis/luxd/apis/health",permalink:"/apis/luxd/apis/health",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/apis/luxd/apis/health.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,description:"This API can be used for measuring node health. Use Lux docs as a reference when testing node health. Helpful examples provided."},sidebar:"apis",previous:{title:"Auth API",permalink:"/apis/luxd/apis/auth"},next:{title:"Index API",permalink:"/apis/luxd/apis/index-api"}},p={},h=[{value:"Format",id:"format",level:2},{value:"Endpoint",id:"endpoint",level:2},{value:"Methods",id:"methods",level:2},{value:"health.health",id:"healthhealth",level:3},{value:"<strong>Signature</strong>",id:"signature",level:4},{value:"<strong>Example Call</strong>",id:"example-call",level:4},{value:"<strong>Example Response</strong>",id:"example-response",level:4}],c={toc:h};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"health-api"},"Health API"),(0,i.kt)("p",null,"This API can be used for measuring node health."),(0,i.kt)("p",null,"To get an HTTP status code response that indicates the node\u2019s health, make a ",(0,i.kt)("inlineCode",{parentName:"p"},"GET")," request to ",(0,i.kt)("inlineCode",{parentName:"p"},"/ext/health"),". If the node is healthy, it will return a ",(0,i.kt)("inlineCode",{parentName:"p"},"200")," status code. If you want more in-depth information about a node\u2019s health, use the methods below."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This API set is for a specific node, it is unavailable on the ",(0,i.kt)("a",{parentName:"p",href:"/apis/luxd/public-api-server"},"public server"),".")),(0,i.kt)("h2",{id:"format"},"Format"),(0,i.kt)("p",null,"This API uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"json 2.0")," RPC format. For more information on making JSON RPC calls, see ",(0,i.kt)("a",{parentName:"p",href:"/apis/luxd/apis/issuing-api-calls"},"here"),"."),(0,i.kt)("h2",{id:"endpoint"},"Endpoint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"/ext/health\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"healthhealth"},"health.health"),(0,i.kt)("p",null,"The node runs a set of health checks every 30 seconds, including a health check for each chain. This method returns the last set of health check results."),(0,i.kt)("h4",{id:"signature"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"health.health() -> {\n    checks: []{\n        checkName: {\n            message: JSON,\n            error: JSON,\n            timestamp: string,\n            duration: int,\n            contiguousFailures: int,\n            timeOfFirstFailure: int\n        }\n    },\n    healthy: bool\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"healthy")," is true if the node if all health checks are passing."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"checks")," is a list of health check responses."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A check response may include a ",(0,i.kt)("inlineCode",{parentName:"li"},"message")," with additional context."),(0,i.kt)("li",{parentName:"ul"},"A check response may include an ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," describing why the check failed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timestamp")," is the timestamp of the last health check."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"duration")," is the execution duration of the last health check, in nanoseconds."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contiguousFailures")," is the number of times in a row this check failed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeOfFirstFailure")," is the time this check first failed.")),(0,i.kt)("p",null,"More information on these measurements can be found in the documentation for the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/AppsFlyer/go-sundheit"},"go-sundheit")," library."),(0,i.kt)("h4",{id:"example-call"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"health.health"\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/health\n')),(0,i.kt)("h4",{id:"example-response"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("p",null,"In this example response, the C-Chain\u2019s health check is failing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "checks": {\n      "C": {\n        "message": null,\n        "error": {\n          "message": "example error message"\n        },\n        "timestamp": "2020-10-14T14:04:20.57759662Z",\n        "duration": 465253,\n        "contiguousFailures": 50,\n        "timeOfFirstFailure": "2020-10-14T13:16:10.576435413Z"\n      },\n      "P": {\n        "message": {\n          "percentConnected": 0.9967694992864075\n        },\n        "timestamp": "2020-10-14T14:04:08.668743851Z",\n        "duration": 433363830,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      },\n      "X": {\n        "timestamp": "2020-10-14T14:04:20.3962705Z",\n        "duration": 1853,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      },\n      "chains.default.bootstrapped": {\n        "timestamp": "2020-10-14T14:04:04.238623814Z",\n        "duration": 8075,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      },\n      "network.validators.heartbeat": {\n        "message": {\n          "heartbeat": 1602684245\n        },\n        "timestamp": "2020-10-14T14:04:05.610007874Z",\n        "duration": 6124,\n        "contiguousFailures": 0,\n        "timeOfFirstFailure": null\n      }\n    },\n    "healthy": false\n  },\n  "id": 1\n}\n')))}d.isMDXComponent=!0}}]);