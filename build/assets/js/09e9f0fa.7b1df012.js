"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[3570],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},x=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),x=p(n),d=a,m=x["".concat(o,".").concat(d)]||x[d]||u[d]||i;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=x;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}x.displayName="MDXCreateElement"},2317:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],s={},o="Serialization Primitives",p={unversionedId:"specs/serialization-primitives",id:"specs/serialization-primitives",title:"Serialization Primitives",description:"Lux uses a simple, uniform, and elegant representation for all internal data. This document describes how primitive types are encoded on the Lux platform. Transactions are encoded in terms of these basic primitive types.",source:"@site/docs/specs/serialization-primitives.md",sourceDirName:"specs",slug:"/specs/serialization-primitives",permalink:"/specs/serialization-primitives",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/specs/serialization-primitives.md",tags:[],version:"current",frontMatter:{},sidebar:"specs",previous:{title:"Network Protocol",permalink:"/specs/network-protocol"},next:{title:"Platform Transaction Format",permalink:"/specs/platform-transaction-serialization"}},c={},u=[{value:"Byte",id:"byte",level:2},{value:"Short",id:"short",level:2},{value:"Integer",id:"integer",level:2},{value:"Long Integers",id:"long-integers",level:2},{value:"IP Addresses",id:"ip-addresses",level:2},{value:"Fixed-Length Array",id:"fixed-length-array",level:2},{value:"Variable Length Array",id:"variable-length-array",level:2},{value:"String",id:"string",level:2}],x={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"serialization-primitives"},"Serialization Primitives"),(0,i.kt)("p",null,"Lux uses a simple, uniform, and elegant representation for all internal data. This document describes how primitive types are encoded on the Lux platform. Transactions are encoded in terms of these basic primitive types."),(0,i.kt)("h2",{id:"byte"},"Byte"),(0,i.kt)("p",null,"Bytes are packed as-is into the message payload."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    0x01\nResults in:\n    [0x01]\n")),(0,i.kt)("h2",{id:"short"},"Short"),(0,i.kt)("p",null,"Shorts are packed in BigEndian format into the message payload."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    0x0102\nResults in:\n    [0x01, 0x02]\n")),(0,i.kt)("h2",{id:"integer"},"Integer"),(0,i.kt)("p",null,"Integers are 32-bit values packed in BigEndian format into the message payload."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    0x01020304\nResults in:\n    [0x01, 0x02, 0x03, 0x04]\n")),(0,i.kt)("h2",{id:"long-integers"},"Long Integers"),(0,i.kt)("p",null,"Long integers are 64-bit values packed in BigEndian format into the message payload."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    0x0102030405060708\nResults in:\n    [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]\n")),(0,i.kt)("h2",{id:"ip-addresses"},"IP Addresses"),(0,i.kt)("p",null,"IP addresses are represented as 16-byte IPv6 format, with the port appended into the message payload as a Short. IPv4 addresses are padded with 12 bytes of leading 0x00s."),(0,i.kt)("p",null,"IPv4 example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'Packing:\n    "127.0.0.1:9650"\nResults in:\n    [\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x01,\n        0x25, 0xb2,\n    ]\n')),(0,i.kt)("p",null,"IPv6 example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'Packing:\n    "[2001:0db8:ac10:fe01::]:12345"\nResults in:\n    [\n        0x20, 0x01, 0x0d, 0xb8, 0xac, 0x10, 0xfe, 0x01,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x30, 0x39,\n    ]\n')),(0,i.kt)("h2",{id:"fixed-length-array"},"Fixed-Length Array"),(0,i.kt)("p",null,"Fixed-length arrays, whose length is known ahead of time and by context, are packed in order."),(0,i.kt)("p",null,"Byte array example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    [0x01, 0x02]\nResults in:\n    [0x01, 0x02]\n")),(0,i.kt)("p",null,"Integer array example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    [0x03040506]\nResults in:\n    [0x03, 0x04, 0x05, 0x06]\n")),(0,i.kt)("h2",{id:"variable-length-array"},"Variable Length Array"),(0,i.kt)("p",null,"The length of the array is prefixed in Integer format, followed by the packing of the array contents in Fixed Length Array format."),(0,i.kt)("p",null,"Byte array example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    [0x01, 0x02]\nResults in:\n    [0x00, 0x00, 0x00, 0x02, 0x01, 0x02]\n")),(0,i.kt)("p",null,"Int array example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"Packing:\n    [0x03040506]\nResults in:\n    [0x00, 0x00, 0x00, 0x01, 0x03, 0x04, 0x05, 0x06]\n")),(0,i.kt)("h2",{id:"string"},"String"),(0,i.kt)("p",null,"A String is packed similarly to a variable-length byte array. However, the length prefix is a short rather than an int. Strings are encoded in UTF-8 format."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'Packing:\n    "Lux"\nResults in:\n    [0x00, 0x04, 0x41, 0x76, 0x61, 0x78]\n')))}d.isMDXComponent=!0}}]);