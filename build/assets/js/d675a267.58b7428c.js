"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[814],{43505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var i=t(85893),r=t(11151);const s={},o="Create an Auction Bidding on Lux using ReactJS",c={id:"deprecated/tutorials-contest/2021/drizzle-auction-manager/README",title:"Create an Auction Bidding on Lux using ReactJS",description:"These tutorials were published as a snapshot of when they were written,",source:"@site/docs/deprecated/tutorials-contest/2021/drizzle-auction-manager/README.md",sourceDirName:"deprecated/tutorials-contest/2021/drizzle-auction-manager",slug:"/deprecated/tutorials-contest/2021/drizzle-auction-manager/",permalink:"/deprecated/tutorials-contest/2021/drizzle-auction-manager/",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/tutorials-contest/2021/drizzle-auction-manager/README.md",tags:[],version:"current",frontMatter:{}},a={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Setup the ReactJS Project",id:"setup-the-reactjs-project",level:2},{value:"Setup the Truffle Project",id:"setup-the-truffle-project",level:2},{value:"Receive Lux Credentials",id:"receive-lux-credentials",level:2},{value:"<strong>Add .env File</strong>",id:"add-env-file",level:3},{value:"Create Auction Smart Contract",id:"create-auction-smart-contract",level:2},{value:"Let&#39;s Understand this Contract in Detail",id:"lets-understand-this-contract-in-detail",level:2},{value:"Users, Bids, Auctions and Analytics",id:"users-bids-auctions-and-analytics",level:3},{value:"Function to Check Registered User",id:"function-to-check-registered-user",level:3},{value:"Auction Analytics",id:"auction-analytics",level:3},{value:"Updating Auction Analytics",id:"updating-auction-analytics",level:3},{value:"Create Migration Smart Contracts",id:"create-migration-smart-contracts",level:2},{value:"Create a File for Migrating Smart Contracts",id:"create-a-file-for-migrating-smart-contracts",level:2},{value:"Compile Contracts with Truffle",id:"compile-contracts-with-truffle",level:2},{value:"<strong>Fund the Account and Run Migrations on the C-Chain</strong>",id:"fund-the-account-and-run-migrations-on-the-c-chain",level:2},{value:"<strong>Fund Your Account</strong>",id:"fund-your-account",level:3},{value:"Run Migration",id:"run-migration",level:2},{value:"Building the User Interface",id:"building-the-user-interface",level:2},{value:"Drizzle Option Component",id:"drizzle-option-component",level:2},{value:"Index Component",id:"index-component",level:2},{value:"Drizzle Context",id:"drizzle-context",level:2},{value:"Drizzle State",id:"drizzle-state",level:3},{value:"AuctionManager",id:"auctionmanager",level:3},{value:"App Component",id:"app-component",level:2},{value:"Auction Component",id:"auction-component",level:2},{value:"Auction List",id:"auction-list",level:2},{value:"Creating New Auctions",id:"creating-new-auctions",level:2},{value:"Starting the Application",id:"starting-the-application",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"About the Author",id:"about-the-author",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"create-an-auction-bidding-on-lux-using-reactjs",children:"Create an Auction Bidding on Lux using ReactJS"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"These tutorials were published as a snapshot of when they were written,\nand may contain out-of-date-information.\nFor up-to-date information, please reach out to the owners of these\nprojects."})}),"\n",(0,i.jsx)(n.p,{children:"Learn how to create an Lux-based auction bidding with a ReactJS frontend."}),"\n",(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(n.p,{children:"We will learn how to build smart contracts by making an auction bidding and\ndeploy them on Lux and interact with them using ReactJS and Drizzle."}),"\n",(0,i.jsxs)(n.p,{children:["We are going to generate ",(0,i.jsx)(n.a,{href:"https://reactjs.org",children:"ReactJS"})," boilerplate code using\n",(0,i.jsx)(n.code,{children:"create-react-app"}),", which we will modify for our auction bidding frontend. React\nis useful for the frontend due to its efficiency and user-friendly blockchain\ninteraction. For the backend,\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.4/",children:"Solidity"})," smart contracts will be\ndeployed to the Lux blockchain using ",(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com",children:"Truffle\nSuite"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," and\n",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://reactjs.org/",children:"ReactJS"}),", ",(0,i.jsx)(n.a,{href:"https://reactjs.org/docs/context.html",children:"React context\nAPIs"})," and\n",(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com/drizzle",children:"Drizzle"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://lux.network",children:"Lux"})," network,\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.6/",children:"Solidity"})," and\n",(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com/truffle",children:"Truffle"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," >= 10.16 and ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"})," >=\n5.6 installed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com/truffle",children:"Truffle"}),", which can be installed\nglobally with ",(0,i.jsx)(n.code,{children:"npm install -g truffle"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://metamask.io",children:"MetaMask"})," extension added to the browser."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note: Do not download MetaMask from an unofficial source"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"initialize-the-project-directory--install-all-dependencies",children:"Initialize the Project Directory & Install All Dependencies"}),"\n",(0,i.jsx)(n.p,{children:"The developer needs to set up a working directory according to ReactJS and Truffle."}),"\n",(0,i.jsxs)(n.p,{children:["Follow the steps below to create the application. Open up the terminal and\nnavigate to the directory where you would like to create this application. Now\ncreate a new directory with ",(0,i.jsx)(n.code,{children:"mkdir <directory_name>"})," command. Change the current\ndirectory to this newly created directory using ",(0,i.jsx)(n.code,{children:"cd <directory_name>"}),". For\ninstance: if we name it ",(0,i.jsx)(n.code,{children:"bid"}),", then"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir bid\ncd bid\n"})}),"\n",(0,i.jsx)(n.h2,{id:"setup-the-reactjs-project",children:"Setup the ReactJS Project"}),"\n",(0,i.jsxs)(n.p,{children:["Let us now create a new react app using ",(0,i.jsx)(n.em,{children:"npx"})," (npm package runner). The typical\nuse is to download and run a package temporarily or for trials. Using ",(0,i.jsx)(n.em,{children:"npx"})," to\nexecute the package binaries for ",(0,i.jsx)(n.code,{children:"create-react-app"})," will generate a new React\napp scaffold in the specified directory."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx create-react-app client\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Now change to the recent directory "client" using ',(0,i.jsx)(n.code,{children:"cd client"})," command and\ninstall the required dependencies using"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save dotenv web3 @truffle/contract @truffle/hdwallet-provider @drizzle/store\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"index.js"})," inside the ",(0,i.jsx)(n.code,{children:"src"})," directory and replace the existing\ncode with the following code."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Drizzle } from \"@drizzle/store\";\nimport drizzleOptions from './drizzleOptions';\nimport { DrizzleProvider } from './drizzleContext';\n\nconst drizzle = new Drizzle(drizzleOptions);\n\nReactDOM.render(\n  <DrizzleProvider drizzle={drizzle}>\n    <App/>\n  </DrizzleProvider>\n  ,\n  document.getElementById('root')\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Next step: Open up the ",(0,i.jsx)(n.code,{children:"App.js"})," file present inside the ",(0,i.jsx)(n.code,{children:"src"})," directory and\nreplace the existing code with the following code mentioned below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import Auction from "./Auction";\nimport { useDrizzleContext } from "./drizzleContext";\n\nfunction App() {\n  const {drizzleVariables} = useDrizzleContext();\n\n  if(!drizzleVariables.initialized) {\n    return "Loading..."\n  } else {\n    return <Auction/>\n  }\n}\n\nexport default App;\n'})}),"\n",(0,i.jsx)(n.p,{children:"By doing the above steps, the ReactJS project setup is completed."}),"\n",(0,i.jsx)(n.h2,{id:"setup-the-truffle-project",children:"Setup the Truffle Project"}),"\n",(0,i.jsx)(n.p,{children:"To create a boilerplate for the Truffle project execute the following command in the project root directory."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle init\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, the initial project is being set up. Solidity code will be stored in the\n",(0,i.jsx)(n.code,{children:"contracts"})," directory. Deployment functions written in JavaScript will be stored\nin the ",(0,i.jsx)(n.code,{children:"migrations"})," folder. By default, the ",(0,i.jsx)(n.code,{children:"/build/contracts"})," folder contains\ninformation about the compiled and deployed contract, like the ABI, in JSON\nformat. These meta-files are commonly referred to as ",(0,i.jsx)(n.code,{children:"artifacts"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"truffle-config.js"})," is another ",(0,i.jsx)(n.em,{children:"config"})," file created by the ",(0,i.jsx)(n.code,{children:"truffle init"}),"\ncommand. This file carries a lot of information like how to deploy a contract,\nhow to choose a network to deploy the following contract, and much more. Thus it\nbecame a priority to save this file for reference and we can create a copy of\nthis file using the command mentioned below."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp truffle-config.js truffle-config-default.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, the name of the copied file will be ",(0,i.jsx)(n.code,{children:"truffle-config-default.js"}),".\nConsequently, we will update the ",(0,i.jsx)(n.code,{children:"truffle-config.js"})," file, with the information\nneeded to deploy the smart contract on the Testnet test network. This file helps us\nin connecting to the Lux node, and we will require an Lux wallet\nmnemonic for deploying the contract on the network."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'require("dotenv").config();\nconst HDWalletProvider = require("@truffle/hdwallet-provider");\n\n// Account credentials from which our contract will be deployed\nconst MNEMONIC = process.env.MNEMONIC;\n\nmodule.exports = {\n  contracts_build_directory: "./src/build/contracts",\n  networks: {\n    development: {\n      host: "127.0.0.1",\n      port: 7545,\n      network_id: "*",\n    },\n    testnet: {\n      provider: function () {\n        return new HDWalletProvider({\n          mnemonic: MNEMONIC,\n          providerOrUrl: `https://api.lux-test.network/ext/bc/C/rpc`,\n        });\n      },\n      network_id: "*",\n      gas: 3000000,\n      gasPrice: 470000000000,\n      skipDryRun: true,\n    },\n  },\n  compilers: {\n    solc: {\n      version: "0.8.0"\n    }\n  }\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here we are setting the ",(0,i.jsx)(n.code,{children:"gas"})," and ",(0,i.jsx)(n.code,{children:"gasprice"})," to an appropriate value of the\nLux C-chain. The developer may observe that ",(0,i.jsx)(n.code,{children:"contract_build_directory"})," is\nbeing used to change the default location of ",(0,i.jsx)(n.code,{children:"artifacts"})," from the project root\ndirectory to the ",(0,i.jsx)(n.code,{children:"src"})," folder. Since React is unable to access the files present\noutside the ",(0,i.jsx)(n.code,{children:"src"})," folder."]}),"\n",(0,i.jsx)(n.h2,{id:"receive-lux-credentials",children:"Receive Lux Credentials"}),"\n",(0,i.jsx)(n.p,{children:"For deploying smart contracts we need two things: A node connected to the\nLux network and an account with few LUX. Lux connected node through\nRPC (Remote Procedure Call) is provided for free by the Lux Networks."}),"\n",(0,i.jsxs)(n.p,{children:["Now we need an Lux wallet, where we would keep our funds, required for all\nthe transactions on the network. So, visit ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network",children:"here"}),"\nand create an account. Save the mnemonic in a secure place (we would need it\nlater). Instructions to add funds will be provided later in the tutorial."]}),"\n",(0,i.jsx)(n.h3,{id:"add-env-file",children:(0,i.jsx)(n.strong,{children:"Add .env File"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we need an ",(0,i.jsx)(n.strong,{children:"Lux"})," wallet, where we would keep our funds, required for\nall the transactions on the network. Visit the ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network/",children:"Lux\nWallet"})," and create an account. While creating your\naccount you will see your public address and mnemonic. This public address will\nbe required to transfer funds. Save the ",(0,i.jsx)(n.strong,{children:"mnemonic"})," in a secure place, we will\nneed it later. Instructions to add funds will be provided later in the tutorial."]}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".env"})," file in the project root folder. Please take a note that dot (.)\nis necessary for the ",(0,i.jsx)(n.code,{children:".env"})," file name. Now copy your Lux wallet's mnemonic\nin the .env file as shown below. In the .env file, ",(0,i.jsx)(n.strong,{children:"MNEMONIC"}),' should be\nenclosed within double-quotes (" ").']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'MNEMONIC="<wallet-mnemonic>"\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Never share or commit your ",(0,i.jsx)(n.code,{children:".env"})," file. It contains your credentials like\n",(0,i.jsx)(n.code,{children:"mnemonics"}),". Therefore, it is advised to add ",(0,i.jsx)(n.code,{children:".env"})," to your ",(0,i.jsx)(n.code,{children:".gitignore"})," file."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Now, the project setup is completed, and run the command given below in the\nproject root folder to check whether we are on the same page or not."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,i.jsx)(n.h2,{id:"create-auction-smart-contract",children:"Create Auction Smart Contract"}),"\n",(0,i.jsxs)(n.p,{children:["Create an ",(0,i.jsx)(n.code,{children:"Auction.sol"})," (sol stands for solidity) file inside the contracts\ndirectory and use the code given in this ",(0,i.jsx)(n.a,{target:"_blank",href:t(83960).Z+"",children:"file"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Auction"})," is a solidity contract which enables us to view Auction details and\ncorrespondingly its minimum price. We will be accessing the deployed Auction\ncontracts using their ",(0,i.jsx)(n.code,{children:"address"})," and ",(0,i.jsx)(n.code,{children:"ABI"}),". Each time when a new auction is\ncreated, the solidity code will be deployed to the blockchain."]}),"\n",(0,i.jsx)(n.h2,{id:"lets-understand-this-contract-in-detail",children:"Let's Understand this Contract in Detail"}),"\n",(0,i.jsx)(n.h3,{id:"users-bids-auctions-and-analytics",children:"Users, Bids, Auctions and Analytics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// List of all auctions\nAuction[] public auctions;\n\n// Mapping for storing user info, bids and auction analytics\nmapping (uint => User) public users;\nmapping (uint => Bid[]) public bids;\nmapping (uint => AuctionAnalytics) public auctionAnalytics;\n"})}),"\n",(0,i.jsx)(n.p,{children:"The above block of code will declare public variables for storing user\ninformation, bids, auctions, and auction analytics. Have a look at the\nstructures like User, Bid, etc of used in these variables."}),"\n",(0,i.jsx)(n.h3,{id:"function-to-check-registered-user",children:"Function to Check Registered User"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// Public function to check the registration of users (public address)\nfunction isRegistered(address _publicAddress) public view returns (uint256[2] memory) {\n    uint256[2] memory result = [uint256(0), uint256(0)];\n    for(uint i = 0; i < uId; i++) {\n      if(_publicAddress == users[i].publicAddress) {\n        result[0] = 1;\n        result[1] = i;\n        return result;\n      }\n    }\n    return result;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function takes the public address as its argument and returns an integer\narray with 2 elements - ",(0,i.jsx)(n.code,{children:"isRegistered"})," at index ",(0,i.jsx)(n.strong,{children:"0"})," and ",(0,i.jsx)(n.strong,{children:"userId"})," at index\n",(0,i.jsx)(n.strong,{children:"1"}),". If ",(0,i.jsx)(n.strong,{children:"0th"})," index is 1 then the user exists and vice-versa. And ** 1st\nindex** represents userId of the user. This function basically iterates over the\nmapping ",(0,i.jsx)(n.strong,{children:"users"})," to check if there is the required public address."]}),"\n",(0,i.jsx)(n.h3,{id:"auction-analytics",children:"Auction Analytics"}),"\n",(0,i.jsxs)(n.p,{children:["We have created a mapping for storing analytics like latest bid, highest bid,\nlowest bid, etc. for each auction. This mapping will map ",(0,i.jsx)(n.code,{children:"auctionId"})," to\n",(0,i.jsx)(n.strong,{children:"AuctionAnalytic"})," struct. Every time a new auction is created, we initialize\nits corresponding entry in the ",(0,i.jsx)(n.strong,{children:"AuctionAnalytics"})," map."]}),"\n",(0,i.jsx)(n.h3,{id:"updating-auction-analytics",children:"Updating Auction Analytics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// Private function to update auction analytics after the new bids\nfunction updateAucionAnalytics(uint _aId, uint _latestBid) private {\n    auctionAnalytics[_aId].latestBid = _latestBid;\n    auctionAnalytics[_aId].auctionBidId = auctions[_aId].auctionBidId;\n    if(_latestBid < auctionAnalytics[_aId].lowestBid) {\n      auctionAnalytics[_aId].lowestBid = _latestBid;\n    }\n    if(_latestBid > auctionAnalytics[_aId].highestBid) {\n      auctionAnalytics[_aId].highestBid = _latestBid;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Auction analytics needs to be updated every time there is a new bid. So, this\nfunction is called whenever a bid is created. It takes ",(0,i.jsx)(n.strong,{children:"auction id"})," and\n",(0,i.jsx)(n.strong,{children:"latest bid amount"})," as its two arguments, and updates the analytics\ncorresponding to the auction."]}),"\n",(0,i.jsx)(n.p,{children:"The rest of the functions are self-explanatory but are well commented for the readers to understand."}),"\n",(0,i.jsx)(n.h2,{id:"create-migration-smart-contracts",children:"Create Migration Smart Contracts"}),"\n",(0,i.jsxs)(n.p,{children:["Create the file ",(0,i.jsx)(n.code,{children:"Migration.sol"})," inside of the contracts directory and paste the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Migrations {\n  address public owner = msg.sender;\n  uint public last_completed_migration;\n\n  modifier restricted() {\n    require(\n      msg.sender == owner,\n      "This function is restricted to the contract\'s owner"\n    );\n    _;\n  }\n\n  function setCompleted(uint completed) public restricted {\n    last_completed_migration = completed;\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Migration.sol"})," smart contract manages the deployment of other contracts that we\nwant to migrate to the chain."]}),"\n",(0,i.jsx)(n.h2,{id:"create-a-file-for-migrating-smart-contracts",children:"Create a File for Migrating Smart Contracts"}),"\n",(0,i.jsxs)(n.p,{children:["Create a new file in the ",(0,i.jsx)(n.code,{children:"migrations"})," directory named ",(0,i.jsx)(n.code,{children:"2_deploy_contracts.js"}),",\nand add the following block of code. This handles deploying the ",(0,i.jsx)(n.code,{children:"Auction"})," smart\ncontract to the blockchain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const AuctionManager = artifacts.require("./AuctionManager.sol");\n\nmodule.exports = function(deployer) {\n  deployer.deploy(AuctionManager);\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"compile-contracts-with-truffle",children:"Compile Contracts with Truffle"}),"\n",(0,i.jsxs)(n.p,{children:["If we have altered the code within our Solidity source files or made new ones\n(like ",(0,i.jsx)(n.code,{children:"Auction.sol"}),"), we need to run ",(0,i.jsx)(n.code,{children:"truffle compile"})," in the terminal, from\ninside the project root directory."]}),"\n",(0,i.jsx)(n.p,{children:"The expected output would look similar:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Compiling your contracts...\n===========================\n> Compiling ./contracts/Auction.sol\n> Compiling ./contracts/Migrations.sol\n\n> Artifacts written to /home/guest/blockchain/client/build/contracts\n> Compiled successfully using:\n   - solc: 0.8.0+commit.c7dfd78e.Emscripten.clang\n"})}),"\n",(0,i.jsx)(n.p,{children:"The compiled smart contracts are written as JSON files in the\n/src/build/contracts directory. These are the stored ABI and other necessary\nmetadata - the artifacts."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ABI"})," refers to Application Binary Interface, which is a standard for\ninteracting with the smart contracts from outside the blockchain as well as\ncontract-to-contract interaction. Please refer to the Solidity's documentation\nabout ABIs\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.5.3/abi-spec.html#:~:text=The%20Contract%20Application%20Binary%20Interface,contract%2Dto%2Dcontract%20interaction.&text=This%20specification%20does%20not%20address,known%20only%20at%20run%2Dtime",children:"here"}),"\nto learn more."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fund-the-account-and-run-migrations-on-the-c-chain",children:(0,i.jsx)(n.strong,{children:"Fund the Account and Run Migrations on the C-Chain"})}),"\n",(0,i.jsxs)(n.p,{children:["During the deployment of the smart contract to the C-chain, deployment cost will\nbe required. Already we have seen this inside ",(0,i.jsx)(n.code,{children:"truffle-config.js"})," HDWallet\nProvider will help us in deploying on Testnet C-chain and deployment cost will be\nmanaged by the account whose mnemonic has been stored in the ",(0,i.jsx)(n.code,{children:".env"})," file.\nTherefore, we need to fund the account."]}),"\n",(0,i.jsx)(n.h3,{id:"fund-your-account",children:(0,i.jsx)(n.strong,{children:"Fund Your Account"})}),"\n",(0,i.jsxs)(n.p,{children:["We need funds in our C-Chain address, as smart contracts are deployed on C-Chain, the\nContract-Chain. This address can easily be found on the ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network",children:"Lux\nWallet"})," dashboard. Lux network has 3 chains:\nX-Chain, P-Chain, and C-Chain. The address of all these chains can be found by\nswitching tabs at the bottom of the division, where there is a QR code. So,\nswitch to C-Chain, and copy the address. Now fund your account using the faucet\nlink ",(0,i.jsx)(n.a,{href:"https://faucet.lux.network/",children:"here"})," and paste your C-Chain address in the\ninput field. Refer to the below image, to identify the address section."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"wallet c-chain address",src:t(21093).Z+"",width:"353",height:"290"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["You'll need to send at least ",(0,i.jsx)(n.code,{children:"135422040"})," nLUX to the account to cover the\ncost of contract deployments. Here ",(0,i.jsx)(n.code,{children:"nLUX"})," refers nano-LUX, that is a billionth of\nan ",(0,i.jsx)(n.code,{children:"LUX"}),", or simply 1 ",(0,i.jsx)(n.code,{children:"nLUX"})," = (1/1000,000,000) ",(0,i.jsx)(n.code,{children:"LUX"}),". Though funding\nthrough faucet would give you enough ",(0,i.jsx)(n.code,{children:"LUX"})," to run multiple deployments and\ntransactions on the network."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"run-migration",children:"Run Migration"}),"\n",(0,i.jsxs)(n.p,{children:["All the required thing has been placed to run and now deploy the ",(0,i.jsx)(n.code,{children:"Auction"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle migrate --network testnet\n"})}),"\n",(0,i.jsx)(n.p,{children:"The developer can deploy our contracts on a local network by executing Ganache\n(Truffle's local blockchain simulation) and using the command mentioned below"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle migrate --network development\n"})}),"\n",(0,i.jsx)(n.p,{children:"On successful execution of the above command, the developer may find the similar as mentioned below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Starting migrations...\n======================\n> Network name:    'testnet'\n> Network id:      1\n> Block gas limit: 8000000 (0x7a1200)\n\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   > transaction hash:    0x094a9c0f12ff3158bcb40e266859cb4f34a274ea492707f673b93790af40e9e9\n   > Blocks: 0            Seconds: 0\n   > contract address:    0x0b1f00d0Af6d5c864f86E6b96216e0a2Da111055\n   > block number:        40\n   > block timestamp:     1620393171\n   > account:             0x80599dd7F8c5426096FD189dcC6C40f47e8e3714\n   > balance:             39.71499696\n   > gas used:            173118 (0x2a43e)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.00346236 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.00346236 ETH\n\n\n2_deploy_contracts.js\n=====================\n\n   Deploying 'AuctionManager'\n   ------------------------\n   > transaction hash:    0xbeb13fc6bbee250eea9151faf02bfe247ec497294acc84c9b8319ed609ced086\n   > Blocks: 0            Seconds: 0\n   > contract address:    0xf30D372A6911CCF6BBa1e84c3CEd51cC0F3D7769\n   > block number:        42\n   > block timestamp:     1620393172\n   > account:             0x80599dd7F8c5426096FD189dcC6C40f47e8e3714\n   > balance:             39.69235442\n   > gas used:            1090212 (0x10a2a4)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.02180424 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.02180424 ETH\n\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.0252666 ETH\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you didn't create an account on the C-Chain you'll see this error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Error: Expected parameter 'from' not passed to function.\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you didn't fund the account, you'll see this error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Error:  *** Deployment Unsuccessful***\n\n\"Migrations\" could not deploy due to insufficient funds\n   * Account:  0x090172CD36e9f4906Af17B2C36D662E69f162282\n   * Balance:  0 wei\n   * Message:  sender doesn't have enough funds to send tx. The upfront cost is: 1410000000000000000 and the sender's account only has: 0\n   * Try:\n      + Using an adequately funded account\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The information and ABI of the deployed contract are present in the\n",(0,i.jsx)(n.code,{children:"src/build/contracts"})," directory as Auction.json."]}),"\n",(0,i.jsx)(n.h2,{id:"building-the-user-interface",children:"Building the User Interface"}),"\n",(0,i.jsxs)(n.p,{children:["Our blockchain code, which will act as a backend for this application, is\ndeployed on the chain and now we can code client-side for interacting with the\ncontracts. We will be using Truffle Suite's ",(0,i.jsx)(n.strong,{children:"Drizzle"})," library for connecting\nour web app with blockchain. Drizzle makes the integration process very easy and\nscalable. It also provides a mechanism to ",(0,i.jsx)(n.strong,{children:"cache"})," a particular contract-call,\nso that, we can get a real-time update of the changes of data on the blockchain."]}),"\n",(0,i.jsxs)(n.p,{children:["We will be using ",(0,i.jsx)(n.strong,{children:"React's context APIs"})," for facilitating our integration.\nContext APIs make the use of variables that are declared in the parent component\nvery easy to access in the child components."]}),"\n",(0,i.jsxs)(n.p,{children:["It is based upon the ",(0,i.jsx)(n.strong,{children:"Provider"})," and ",(0,i.jsx)(n.strong,{children:"Consumer"})," concepts. The ",(0,i.jsx)(n.strong,{children:"Provider"}),"\ncomponent contains the necessary logic and variables that need to be passed.\nThen this Provider component is wrapped around the components which want to\naccess its variables. Every child component can access these variables. But in\norder to access it, we use ",(0,i.jsx)(n.strong,{children:"Consumer"})," API. This API will return the variables\nthat are provided by the Provider component (only when called from its child).\nLook at the below codes for understanding it better."]}),"\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"drizzleContext.js"})," file, ",(0,i.jsx)(n.strong,{children:"DrizzleProvider"})," is the provider component\nand ",(0,i.jsx)(n.strong,{children:"useDrizzleContext"})," is the consumer function. Look at the return statement\nof these functions. One is returning the Context Provider (provider) and the\nother the returning the values of the Context itself (consumer)."]}),"\n",(0,i.jsx)(n.h2,{id:"drizzle-option-component",children:"Drizzle Option Component"}),"\n",(0,i.jsxs)(n.p,{children:["Create a file ",(0,i.jsx)(n.code,{children:"drizzleOptions.js"})," inside the ",(0,i.jsx)(n.code,{children:"drizzle-auction/client/src/"}),"\ndirectory and paste the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import AuctionManager from "./build/contracts/AuctionManager.json";\n\nconst drizzleOptions = {\n    contracts: [AuctionManager]\n}\n\nexport default drizzleOptions;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"drizzleOptions"})," constant contains the configuration like contracts we want\nto deploy, our custom web3 provider, smart contract events, etc. Here we just\ninstantiating only the ",(0,i.jsx)(n.code,{children:"AuctionManager"})," smart contract."]}),"\n",(0,i.jsx)(n.h2,{id:"index-component",children:"Index Component"}),"\n",(0,i.jsxs)(n.p,{children:["Inside the file ",(0,i.jsx)(n.code,{children:"index.js"})," of ",(0,i.jsx)(n.code,{children:"src"})," directory, paste the following code\nmentioned below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Drizzle } from \"@drizzle/store\";\nimport drizzleOptions from './drizzleOptions';\nimport { DrizzleProvider } from './drizzleContext';\n\nconst drizzle = new Drizzle(drizzleOptions);\n\nReactDOM.render(\n  <DrizzleProvider drizzle={drizzle}>\n    <App/>\n  </DrizzleProvider>\n  ,\n  document.getElementById('root')\n);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Importing ",(0,i.jsx)(n.code,{children:"Drizzle"})," from ",(0,i.jsx)(n.code,{children:"@drizzle/store"})," module will help in instantiating the\ndrizzle according to our ",(0,i.jsx)(n.code,{children:"drizzleOptions"}),". The following line is responsible for\nthis action."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const drizzle = new Drizzle(drizzleOptions);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then we wrap the ",(0,i.jsx)(n.code,{children:"App"})," component inside the ",(0,i.jsx)(n.code,{children:"DrizzleProvider"}),", so that, we can\nuse extracted variables (see drizzleContext.js) inside App. We pass the\n",(0,i.jsx)(n.code,{children:"drizzle"})," object to the provider component because it will be required to\nextract other information from it."]}),"\n",(0,i.jsx)(n.h2,{id:"drizzle-context",children:"Drizzle Context"}),"\n",(0,i.jsxs)(n.p,{children:["Create a file ",(0,i.jsx)(n.code,{children:"drizzleContext.js"})," inside the ",(0,i.jsx)(n.code,{children:"drizzle-auction/client/src/"}),"\ndirectory and paste the following code mentioned below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React, { createContext, useContext, useState } from "react";\n\nconst Context = createContext();\n\nexport function DrizzleProvider({ drizzle, children }) {\n    const [drizzleVariables, setDrizzleVariables] = useState({\n        initialized: false,\n        state: null,\n        web3: null,\n        accounts: null,\n        AuctionManager: null,\n        subscriber: null\n    })\n    const unsubscribe = drizzle.store.subscribe(() => {\n        const drizzleState = drizzle.store.getState();\n        if (drizzleState.drizzleStatus.initialized) {\n            const { web3, accounts } = drizzleState;\n            const AuctionManager =  drizzle.contracts.AuctionManager.methods;\n            const subscriber = drizzleState.contracts.AuctionManager;\n            setDrizzleVariables({\n                state: drizzleState,\n                web3,\n                accounts,\n                AuctionManager,\n                subscriber,\n                initialized: true\n            });\n        }\n    });\n    drizzleVariables.initialized && unsubscribe()\n    \n    return <Context.Provider value={{drizzle, drizzleVariables}}>{children}</Context.Provider>;\n}\n\nexport function useDrizzleContext() {\n  const context = useContext(Context);\n  return context;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DrizzleProvider"})," function takes ",(0,i.jsx)(n.strong,{children:"drizzle"})," as its argument and extracts\nother information like whether drizzle contracts are initialized or not, web3\ninfo, account info, deployed contract's instance, etc. We need to ",(0,i.jsx)(n.strong,{children:"subscribe"}),"\nto the drizzle's ",(0,i.jsx)(n.strong,{children:"store"})," for this information because these data are not\nfetched at once, and since we do not know when will we get these data, we\nsubscribe to the store (where all data resides). Once the drizzle is initialized\nwith contract data, we ",(0,i.jsx)(n.strong,{children:"unsubscribe"})," to store, so that, it will not re-render\ninfinitely many times."]}),"\n",(0,i.jsx)(n.h3,{id:"drizzle-state",children:"Drizzle State"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const drizzleState = drizzle.store.getState();\n"})}),"\n",(0,i.jsx)(n.p,{children:"This variable holds the state of the store which consists of data like web3\nprovider, account info, cached call information, etc. Cached calls are those\ncontract calls for which we want real-time data from the blockchain. Whenever\nthere is some change in our data on the blockchain, it gets notified in the\ndrizzle state variable of the store."}),"\n",(0,i.jsx)(n.h3,{id:"auctionmanager",children:"AuctionManager"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const AuctionManager =  drizzle.contracts.AuctionManager.methods;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"drizzle.contracts"})," is an object which contains instances of all the deployed\ncontracts which are added to drizzle (in ",(0,i.jsx)(n.code,{children:"drizzleOptions"})," or manually). We are\nsimply storing all the ",(0,i.jsx)(n.strong,{children:"methods"})," of this contract instance, so that, whenever\nwe want to call a function or public identifier from this contract, we can\nsimply use ",(0,i.jsx)(n.code,{children:"AuctionManager.method_name().call()"})]}),"\n",(0,i.jsx)(n.h2,{id:"app-component",children:"App Component"}),"\n",(0,i.jsxs)(n.p,{children:["Now open ",(0,i.jsx)(n.code,{children:"App.js"})," inside the ",(0,i.jsx)(n.code,{children:"drizzle-auction/client/src/"})," directory and paste\nthe following code as mentioned below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import Auction from "./Auction";\nimport { useDrizzleContext } from "./drizzleContext";\n\nfunction App() {\n  const {drizzleVariables} = useDrizzleContext();\n\n  if(!drizzleVariables.initialized) {\n    return "Loading..."\n  } else {\n    return <Auction/>\n  }\n}\n\nexport default App;\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"drizzleVariables.initialized"})," would ensure that, ",(0,i.jsx)(n.code,{children:"Loading..."})," state is visible\nuntil Drizzle is ready for interaction."]}),"\n",(0,i.jsx)(n.h2,{id:"auction-component",children:"Auction Component"}),"\n",(0,i.jsxs)(n.p,{children:["Create a file ",(0,i.jsx)(n.code,{children:"Auction.js"})," inside the ",(0,i.jsx)(n.code,{children:"drizzle-auction/client/src/"})," directory.\nand paste the code given in this ",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/Auction.js",children:"file"}),". This\ncomponent deals with the entry-point of our application, where all the data like\n",(0,i.jsx)(n.code,{children:"userInfo"}),", ",(0,i.jsx)(n.code,{children:"AuctionLists"}),", ",(0,i.jsx)(n.code,{children:"AuctionDetails"})," etc. get generated."]}),"\n",(0,i.jsx)(n.p,{children:"In order to keep data fresh from the blockchain, Drizzle uses the caching\nmechanism. On our behalf Drizzle keeps track of every change on the blockchain.\nIf there is any transaction involving our smart contracts, then it will notify\nour dapp."}),"\n",(0,i.jsx)(n.p,{children:"We need to specifically define the calls which we want to monitor. Caching a\nparticular method will provide cache keys (hash) to us. Each cached method is\nassociated with a particular unique hash. Using this key, we can get live data\nfrom the blockchain, and the component will re-render anytime there is some new\nvalue associated with this call."}),"\n",(0,i.jsx)(n.p,{children:"For example, in the above code, we used the following cache keys"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const [cacheKeys, setCacheKey] = useState({\n    uId: null,\n    aId: null,\n    showAuctions: null,\n    isRegistered: null,\n    auctionAnalytics: [null]\n});\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Suppose we want to cache ",(0,i.jsx)(n.code,{children:"isRegistered"})," method, then this can be done using"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const _isRegistered = AuctionManager?.isRegistered?.cacheCall(accounts[0]);\nsetCacheKey({\n    isRegistered: _isRegistered\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Once a method is cached, the Drizzle ",(0,i.jsx)(n.code,{children:"store"})," would create a ",(0,i.jsx)(n.code,{children:"key-value"})," pair\nrepresenting hash-key and real-time data associated with this call. In the above\nprogram, this is data is accessed using the ",(0,i.jsx)(n.code,{children:"subscriber"})," variable as follows"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const realTimeIsRegistered = subscriber?.isRegistered[cacheKeys?.isRegistered]?.value\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this component, we made a simple object of cached call variables named\n",(0,i.jsx)(n.code,{children:"cacheCall"}),", which implements the above code snippet. The cached version of\n",(0,i.jsx)(n.code,{children:"isRegistered"})," can be accessed as ",(0,i.jsx)(n.code,{children:"cacheCalls.isRegistered"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"auction-list",children:"Auction List"}),"\n",(0,i.jsxs)(n.p,{children:["Create a file ",(0,i.jsx)(n.code,{children:"Auctionlist.js"})," inside the ",(0,i.jsx)(n.code,{children:"drizzle-auction/client/src/"}),"\ndirectory and use the code as given in this\n",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/AuctionList.js",children:"file"}),". This component deals with the management\nof the auction like creating a new bid, displaying the real-time auction\nanalytics, etc. All these data are passed by its parent component i.e.\n",(0,i.jsx)(n.code,{children:"Auction.js"})," which manages the cache keys and calls."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-new-auctions",children:"Creating New Auctions"}),"\n",(0,i.jsxs)(n.p,{children:["Create a file ",(0,i.jsx)(n.code,{children:"CreateAuction.js"})," inside the ",(0,i.jsx)(n.code,{children:"drizzle-auction/client/src/"}),"\ndirectory and use the code as given in this\n",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/CreateAuction.js",children:"file"}),". This component deals with creation of\nnew Auctions, by submitting transactions on the network."]}),"\n",(0,i.jsx)(n.h2,{id:"starting-the-application",children:"Starting the Application"}),"\n",(0,i.jsxs)(n.p,{children:["Now go to the project root directory of the project, that is the ",(0,i.jsx)(n.code,{children:"drizzle-auction"}),"\ndirectory, and run the command ",(0,i.jsx)(n.code,{children:"npm start"}),". The ReactJS server would start\nautomatically. Visit ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," to interact\nwith the built dapp."]}),"\n",(0,i.jsx)(n.p,{children:"Don't forget to set up MetaMask with Lux Testnet and also fund the\naccount with Lux test tokens to upload files."}),"\n",(0,i.jsx)(n.p,{children:"In the MetaMask extension, add a custom RPC by clicking at the network dropdown\nin the center of the extension. Fill in the details as shown in the below image."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Info"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Network Name"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Lux Testnet"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"New RPC URL"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"https://api.lux-test.network/ext/bc/C/rpc",children:"https://api.lux-test.network/ext/bc/C/rpc"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Chain ID"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"43113"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Currency Symbol"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"LUX-C"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Block Explorer URL"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"https://testnet.snowtrace.io",children:"https://testnet.snowtrace.io"})})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"demo drizzle auction",src:t(82841).Z+"",width:"600",height:"337"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"We have successfully built a dapp through which we can organize auctions, bid in\nthem and declare results, with both frontend and smart contracts. We have used\nthe Drizzle library from Truffle Suite for integrating our frontend with the\nblockchain and to keep our data updated in real-time."}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Our dapp currently has very minimalistic designs. We can use Consensys' Rimble\nUI library for adding modals for each transaction, add links to drip Lux's\ntest tokens etc. which can help users to navigate through our dapp."}),"\n",(0,i.jsx)(n.h2,{id:"about-the-author",children:"About the Author"}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial was created by ",(0,i.jsx)(n.a,{href:"https://www.linkedin.com/in/iamrajranjan",children:"Raj Ranjan"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},83960:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/files/Auction-aa76d95a0f98c44eb133585344bb7ed6.sol"},21093:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/drizzle-auction-00-wallet-c-chain-address-9d61064592c1afbc3d45788091af9917.png"},82841:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/drizzle-auction-01-demo-drizzle-auction-130834e1f1bbadd9c2c693f032a600af.gif"},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>o});var i=t(67294);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);