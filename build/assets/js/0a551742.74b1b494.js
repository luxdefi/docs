"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2252],{31640:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=t(85893),s=t(11151);const a={},r="How to Create Your Own DAO with Lux",i={id:"deprecated/tutorials-contest/2021/DAO/README",title:"How to Create Your Own DAO with Lux",description:"These tutorials were published as a snapshot of when they were written,",source:"@site/docs/deprecated/tutorials-contest/2021/DAO/README.md",sourceDirName:"deprecated/tutorials-contest/2021/DAO",slug:"/deprecated/tutorials-contest/2021/DAO/",permalink:"/deprecated/tutorials-contest/2021/DAO/",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/tutorials-contest/2021/DAO/README.md",tags:[],version:"current",frontMatter:{}},c={},d=[{value:"What Is a DAO",id:"what-is-a-dao",level:2},{value:"How the DAO&#39;s Work?",id:"how-the-daos-work",level:2},{value:"Let&#39;s Start to Build Our DAO",id:"lets-start-to-build-our-dao",level:2},{value:"Step 1: Creating a New .sol File on REMIX",id:"step-1-creating-a-new-sol-file-on-remix",level:3},{value:"Step 2: Defining Our DAO Functions",id:"step-2-defining-our-dao-functions",level:3},{value:"Step 3: Defining the Proposal Variables",id:"step-3-defining-the-proposal-variables",level:3},{value:"Step 4: Deposit and Withdraw function for the DAO",id:"step-4-deposit-and-withdraw-function-for-the-dao",level:3},{value:"Step 5: Create a Proposal and Vote functions",id:"step-5-create-a-proposal-and-vote-functions",level:3},{value:"Step 6: Deploy Our DAO contract on Testnet",id:"step-6-deploy-our-dao-contract-on-testnet",level:3}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"how-to-create-your-own-dao-with-lux",children:"How to Create Your Own DAO with Lux"}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"These tutorials were published as a snapshot of when they were written,\nand may contain out-of-date-information.\nFor up-to-date information, please reach out to the owners of these\nprojects."})}),"\n",(0,o.jsx)(n.h2,{id:"what-is-a-dao",children:"What Is a DAO"}),"\n",(0,o.jsx)(n.p,{children:"The DAO's are systems that help us to work with people around the world in a safe and clear way."}),"\n",(0,o.jsx)(n.p,{children:"Think of them like an internet-native business that's collectively owned and\nmanaged by its members. They have built-in treasuries that no one has the\nauthority to access without the approval of the group. Decisions are governed by\nproposals and voting to ensure everyone in the organization has a voice."}),"\n",(0,o.jsx)(n.p,{children:"There's no CEO who can authorize spending based on their own whims and no chance\nof a dodgy CFO manipulating the books. Everything is out in the open and the\nrules around spending are baked into the DAO via its code."}),"\n",(0,o.jsx)(n.h2,{id:"how-the-daos-work",children:"How the DAO's Work?"}),"\n",(0,o.jsx)(n.p,{children:"The backbone of a DAO is in smart contracts. The smart contracts defines the\nrules of the organization."}),"\n",(0,o.jsx)(n.p,{children:"Generally the DAO consists of two main smart contracts: the ERC20 token that is\na governance token, and the smart contract that have the rules for the DAO. So\nlike a DAO's members you need to have some governance tokens and then deposit to\nthe DAO contract, and then we can create a proposal if the proposal is accepted\nthe other members in the DAO can start to vote."}),"\n",(0,o.jsx)(n.p,{children:"The vote is based in how many governance tokens have been deposited on the DAO."}),"\n",(0,o.jsx)(n.p,{children:"For example if you have a 100 of the governance tokens but you deposited only 20\ntokens on the DAO contract only 20 tokens will be taken into account for you\nvote."}),"\n",(0,o.jsx)(n.h2,{id:"lets-start-to-build-our-dao",children:"Let's Start to Build Our DAO"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Tools We will use"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://remix.ethereum.org/",children:"REMIX IDE"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://metamask.io/",children:"MetaMask Wallet"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["We need to setup the Testnet on our MetaMask. ",(0,o.jsx)(n.a,{href:"https://docs.lux.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-using-remix-and-metamask",children:(0,o.jsx)(n.code,{children:"find here the rpc values"})})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"step-1-creating-a-new-sol-file-on-remix",children:"Step 1: Creating a New .sol File on REMIX"}),"\n",(0,o.jsxs)(n.p,{children:["On REMIX we click the new file icon and put some name, in my case my file name is ",(0,o.jsx)(n.code,{children:"MyDAO.sol"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"MyDAO.sol",src:t(12579).Z+"",width:"1518",height:"992"})}),"\n",(0,o.jsx)(n.p,{children:"and we add the basic lines of code:"}),"\n",(0,o.jsx)(n.p,{children:"The first line tells you that the source code is licensed under the GPL version\n3.0. Machine-readable license specifiers are important in a setting where\npublishing the source code is the default."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"pragma"})," Specifies that the source code is written for Solidity version 0.7.0 or\na newer version of the language up to, but not including version 0.9.0."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"contract MyDAO {...}"})," specifies the name and a new block of code for our contract."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"first lines of code",src:t(51084).Z+"",width:"1988",height:"898"})}),"\n",(0,o.jsx)(n.h3,{id:"step-2-defining-our-dao-functions",children:"Step 2: Defining Our DAO Functions"}),"\n",(0,o.jsx)(n.p,{children:"Commonly the DAO's contract has four main functions:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Deposit governance tokens."}),"\n",(0,o.jsx)(n.li,{children:"Withdraw the tokens."}),"\n",(0,o.jsx)(n.li,{children:"Create a proposal."}),"\n",(0,o.jsx)(n.li,{children:"Vote."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["We use LUX our governance token.\nTestnet contract address: 0xA048B6a5c1be4b81d99C3Fd993c98783adC2eF70\nand we need import\n",(0,o.jsx)(n.a,{href:"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol",children:"IERC20"}),"\ntemplate from ",(0,o.jsx)(n.a,{href:"https://openzeppelin.com/",children:"OpenZeppelin"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"step-3-defining-the-proposal-variables",children:"Step 3: Defining the Proposal Variables"}),"\n",(0,o.jsx)(n.p,{children:"For the proposal format we defined a group with custom properties, the properties for our proposal are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Author which is an address from the account that create a proposal."}),"\n",(0,o.jsx)(n.li,{children:"Id that will help us to identify a proposal."}),"\n",(0,o.jsx)(n.li,{children:"Name of the proposal."}),"\n",(0,o.jsx)(n.li,{children:"Creation date, that allow us to set a period of time for allow the voting."}),"\n",(0,o.jsx)(n.li,{children:"Voting options, in this case we will keep it simple(Yes / NO)."}),"\n",(0,o.jsx)(n.li,{children:"Number of Votes for Yes and Votes for No this will allow us set an status for\nthe proposal when number of votes for any option be greater than fifty\npercent."}),"\n",(0,o.jsx)(n.li,{children:"Status for the Proposal this options will be Accepted, Rejected, Pending."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For the voting options and the proposal status we will use an ",(0,o.jsx)(n.code,{children:"enums"})," types."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Enums"})," can be used to create custom types with a finite set of 'constant\nvalues'. ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.7/types.html#enums",children:"see more about\nEnums"})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"enum VotingOptions { Yes, No }\nenum Status { Accepted, Rejected, Pending }\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For the other proposal properties we can use an ",(0,o.jsx)(n.code,{children:"struct"})," type.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.code,{children:"Structs"})," alow us to define a custom group of properties. ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.7/types.html#structs",children:"see more about\nstructs"})})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"    struct Proposal {\n        uint256 id;\n        address author;\n        string name;\n        uint256 createdAt;\n        uint256 votesForYes;\n        uint256 votesForNo;\n        Status status;\n    }\n"})}),"\n",(0,o.jsx)(n.p,{children:"Until this step our DAO contract looks like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol';\n\ncontract MyDAO {\n\n    enum VotingOptions { Yes, No }\n    enum Status { Accepted, Rejected, Pending }\n    struct Proposal {\n        uint256 id;\n        address author;\n        string name;\n        uint256 createdAt;\n        uint256 votesForYes;\n        uint256 votesForNo;\n        Status status;\n    }\n\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now we need to store all the proposals created for our DAO, we need to be sure\nthat someone does not vote more than once, also set a period of vote for the\nproposals and set a minimum number of governance tokens to create a new\nproposal, we can take the number of governance tokens are deposited like a\nshares for an shareholder and give a proportional weight to their vote."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"// store all proposals\nmapping(uint => Proposal) public proposals;\n// who already votes for who and to avoid vote twice\nmapping(address => mapping(uint => bool)) public votes;\n// one share for governance tokens\nmapping(address => uint256) public shares;\nuint public totalShares;\n// the IERC20 allow us to use Lux like our governance token.\nIERC20 public token;\n// the user need minimum 25 LUX to create a proposal.\nuint constant CREATE_PROPOSAL_MIN_SHARE = 25 * 10 ** 18;\nuint constant VOTING_PERIOD = 7 days;\nuint public nextProposalId;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-deposit-and-withdraw-function-for-the-dao",children:"Step 4: Deposit and Withdraw function for the DAO"}),"\n",(0,o.jsxs)(n.p,{children:["We already have our necessary variables to create, save and vote a proposal in\nour DAO, now we need our user deposit his ",(0,o.jsx)(n.code,{children:"LUX"})," tokens to avoid that the same\nuser can use the same amount of tokens for vote other option in the same\nproposal. To interact with LUX as our token the governance we need to\ninitialize the token address in the constructor."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"constructor() {\n    token = IERC20(0xA048B6a5c1be4b81d99C3Fd993c98783adC2eF70); // LUX address\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"For the deposit function."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function deposit(uint _amount) external {\n    shares[msg.sender] += _amount;\n    totalShares += _amount;\n    token.transferFrom(msg.sender, address(this), _amount);\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"And we need to allow our users to withdraw their tokens when the voting period is over."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function withdraw(uint _amount) external {\n    require(shares[msg.sender] >= _amount, 'Not enough shares');\n    shares[msg.sender] -= _amount;\n    totalShares -= _amount;\n    token.transfer(msg.sender, _amount);\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"until this point our smart contract look like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\nimport 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol';\n\ncontract MyDAO {\n\n    enum VotingOptions { Yes, No }\n    enum Status { Accepted, Rejected, Pending }\n    struct Proposal {\n        uint256 id;\n        address author;\n        string name;\n        uint256 createdAt;\n        uint256 votesForYes;\n        uint256 votesForNo;\n        Status status;\n    }\n\n    // store all proposals\n    mapping(uint => Proposal) public proposals;\n    // who already votes for who and to avoid vote twice\n    mapping(address => mapping(uint => bool)) public votes;\n    // one share for governance tokens\n    mapping(address => uint256) public shares;\n    uint public totalShares;\n    // the IERC20 allow us to use Lux like our governance token.\n    IERC20 public token;\n    // the user need minimum 25 LUX to create a proposal.\n    uint constant CREATE_PROPOSAL_MIN_SHARE = 25 * 10 ** 18;\n    uint constant VOTING_PERIOD = 7 days;\n    uint public nextProposalId;\n\n    constructor() {\n        token = IERC20(0xA048B6a5c1be4b81d99C3Fd993c98783adC2eF70); // LUX address\n    }\n\n    function deposit(uint _amount) external {\n        shares[msg.sender] += _amount;\n        totalShares += _amount;\n        token.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function withdraw(uint _amount) external {\n        require(shares[msg.sender] >= _amount, 'Not enough shares');\n        shares[msg.sender] -= _amount;\n        totalShares -= _amount;\n        token.transfer(msg.sender, _amount);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-5-create-a-proposal-and-vote-functions",children:"Step 5: Create a Proposal and Vote functions"}),"\n",(0,o.jsxs)(n.p,{children:["For our ",(0,o.jsx)(n.code,{children:"createProposal"})," function we will add the condition that if the user\ndoes not have minimum 25 LUX tokens He cannot create a new proposal."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function createProposal(string memory name) external {\n    // validate the user has enough shares to create a proposal\n    require(shares[msg.sender] >= CREATE_PROPOSAL_MIN_SHARE, 'Not enough shares to create a proposal');\n\n    proposals[nextProposalId] = Proposal(\n        nextProposalId,\n        msg.sender,\n        name,\n        block.timestamp,\n        0,\n        0,\n        Status.Pending\n    );\n    nextProposalId++;\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For the ",(0,o.jsx)(n.code,{children:"Vote"})," function we need to receive the id for the proposal and the vote\nchoice, we will validate that the user has not voted already and the vote period\nis currently open.",(0,o.jsx)(n.br,{}),"\n","Also we validate if the proposal has more than fifty percent of votes in one\noption we need to change the proposal status to Accepted or Rejected."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"function vote(uint _proposalId, VotingOptions _vote) external {\n    Proposal storage proposal = proposals[_proposalId];\n    require(votes[msg.sender][_proposalId] == false, 'already voted');\n    require(block.timestamp <= proposal.createdAt + VOTING_PERIOD, 'Voting period is over');\n    votes[msg.sender][_proposalId] = true;\n    if(_vote == VotingOptions.Yes) {\n        proposal.votesForYes += shares[msg.sender];\n        if(proposal.votesForYes * 100 / totalShares > 50) {\n            proposal.status = Status.Accepted;\n        }\n    } else {\n        proposal.votesForNo += shares[msg.sender];\n        if(proposal.votesForNo * 100 / totalShares > 50) {\n            proposal.status = Status.Rejected;\n        }\n    }\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Finally our DAO contract looks like this."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"contract",src:t(64526).Z+"",width:"1176",height:"3724"})}),"\n",(0,o.jsx)(n.h3,{id:"step-6-deploy-our-dao-contract-on-testnet",children:"Step 6: Deploy Our DAO contract on Testnet"}),"\n",(0,o.jsxs)(n.p,{children:["Now we need compile our contract, I'm using the 0.8.0 version compiler, and click on the ",(0,o.jsx)(n.code,{children:"Compile"})," button."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"compiler settings",src:t(9242).Z+"",width:"782",height:"1184"})}),"\n",(0,o.jsxs)(n.p,{children:["In the environment section we choose the ",(0,o.jsx)(n.code,{children:"Injected Web3"})," option, in account we\nchose an account from our MetaMask plugin in the Testnet network, make sure that\nyour account have the necessary LUX for the deploy and the minimum for create a\nproposal.\n",(0,o.jsx)(n.a,{href:"https://faucet.lux.network/",children:"Here you can find the Faucet"}),".",(0,o.jsx)(n.br,{}),"\n","Click on the ",(0,o.jsx)(n.code,{children:"Deploy"})," button and confirm the transaction in REMIX and MetaMask and await for a few seconds."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"deploy",src:t(13192).Z+"",width:"778",height:"1208"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"confirm",src:t(87030).Z+"",width:"1920",height:"1448"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"MetaMask",src:t(35960).Z+"",width:"826",height:"1720"})}),"\n",(0,o.jsx)(n.p,{children:"If the contract is deployed successfully on Testnet we can see the success transaction on the REMIX inspector."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"remix",src:t(99247).Z+"",width:"2386",height:"314"})}),"\n",(0,o.jsx)(n.p,{children:"Now we can test the different functions for our DAO."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},64526:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-SC-741e77a90c762da0cfb9a7036995cf37.png"},87030:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-confirm-deploy-5333178e36ef182210f05344a43ce538.png"},13192:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-deploy-smartContract-93f1d65f9cd19c53d2433d0f10f0287f.png"},51084:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-firstLines-bb4321689e9061401a043dd005f0d003.png"},35960:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-metamask-5a2d23b55ca457ef884689f654f269bc.png"},12579:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-newFile-remix-0cb5e1064af14610e73514e0564da97d.png"},99247:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-remix-Tx-6d6d5bafbe063433f6ae291a4e394b61.png"},9242:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/dao-remix-compiler-be4369349b925270d630f42e73fe0582.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>r});var o=t(67294);const s={},a=o.createContext(s);function r(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);