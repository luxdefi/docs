"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[1498],{3905:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return g}});var t=a(7294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=t.createContext({}),p=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},m=function(e){var n=p(e.components);return t.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(a),g=l,c=u["".concat(o,".").concat(g)]||u[g]||d[g]||i;return a?t.createElement(c,r(r({ref:n},m),{},{components:a})):t.createElement(c,r({ref:n},m))}));function g(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:l,r[1]=s;for(var p=2;p<i;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},83:function(e,n,a){a.r(n),a.d(n,{assets:function(){return m},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var t=a(7462),l=a(3366),i=(a(7294),a(3905)),r=["components"],s={sidebar_position:7},o="Admin API",p={unversionedId:"apis/luxd/apis/admin",id:"apis/luxd/apis/admin",title:"Admin API",description:"This API can be used for measuring node health and debugging.",source:"@site/docs/apis/luxd/apis/admin.md",sourceDirName:"apis/luxd/apis",slug:"/apis/luxd/apis/admin",permalink:"/apis/luxd/apis/admin",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/apis/luxd/apis/admin.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"apis",previous:{title:"Exchange Chain (X-Chain) API",permalink:"/apis/luxd/apis/x-chain"},next:{title:"Auth API",permalink:"/apis/luxd/apis/auth"}},m={},d=[{value:"Format",id:"format",level:2},{value:"Endpoint",id:"endpoint",level:2},{value:"API Methods",id:"api-methods",level:2},{value:"admin.alias",id:"adminalias",level:3},{value:"<strong>Signature</strong>",id:"signature",level:4},{value:"<strong>Example Call</strong>",id:"example-call",level:4},{value:"<strong>Example Response</strong>",id:"example-response",level:4},{value:"admin.aliasChain",id:"adminaliaschain",level:3},{value:"<strong>Signature</strong>",id:"signature-1",level:4},{value:"<strong>Example Call</strong>",id:"example-call-1",level:4},{value:"<strong>Example Response</strong>",id:"example-response-1",level:4},{value:"admin.getChainAliases",id:"admingetchainaliases",level:3},{value:"<strong>Signature</strong>",id:"signature-2",level:4},{value:"<strong>Example Call</strong>",id:"example-call-2",level:4},{value:"<strong>Example Response</strong>",id:"example-response-2",level:4},{value:"admin.getLoggerLevel",id:"admingetloggerlevel",level:3},{value:"<strong>Signature</strong>",id:"signature-3",level:4},{value:"<strong>Example Call</strong>",id:"example-call-3",level:4},{value:"<strong>Example Response</strong>",id:"example-response-3",level:4},{value:"admin.loadVMs",id:"adminloadvms",level:3},{value:"Signature",id:"signature-4",level:4},{value:"<strong>Example Call</strong>",id:"example-call-4",level:4},{value:"<strong>Example Response</strong>",id:"example-response-4",level:4},{value:"admin.lockProfile",id:"adminlockprofile",level:3},{value:"<strong>Signature</strong>",id:"signature-5",level:4},{value:"<strong>Example Call</strong>",id:"example-call-5",level:4},{value:"<strong>Example Response</strong>",id:"example-response-5",level:4},{value:"admin.memoryProfile",id:"adminmemoryprofile",level:3},{value:"<strong>Signature</strong>",id:"signature-6",level:4},{value:"<strong>Example Call</strong>",id:"example-call-6",level:4},{value:"<strong>Example Response</strong>",id:"example-response-6",level:4},{value:"admin.setLoggerLevel",id:"adminsetloggerlevel",level:3},{value:"<strong>Signature</strong>",id:"signature-7",level:4},{value:"<strong>Example Call</strong>",id:"example-call-7",level:4},{value:"<strong>Example Response</strong>",id:"example-response-7",level:4},{value:"admin.startCPUProfiler",id:"adminstartcpuprofiler",level:3},{value:"<strong>Signature</strong>",id:"signature-8",level:4},{value:"<strong>Example Call</strong>",id:"example-call-8",level:4},{value:"<strong>Example Response</strong>",id:"example-response-8",level:4},{value:"admin.stopCPUProfiler",id:"adminstopcpuprofiler",level:3},{value:"<strong>Signature</strong>",id:"signature-9",level:4},{value:"<strong>Example Call</strong>",id:"example-call-9",level:4},{value:"<strong>Example Response</strong>",id:"example-response-9",level:4}],u={toc:d};function g(e){var n=e.components,a=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"admin-api"},"Admin API"),(0,i.kt)("p",null,"This API can be used for measuring node health and debugging."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The Admin API is disabled by default for security reasons. To run a node with the Admin API enabled, use ",(0,i.kt)("a",{parentName:"p",href:"/nodes/maintain/luxd-config-flags#--api-admin-enabled-boolean"},"config flag ",(0,i.kt)("inlineCode",{parentName:"a"},"--api-admin-enabled=true")),"."),(0,i.kt)("p",{parentName:"admonition"},"This API set is for a specific node, it is unavailable on the ",(0,i.kt)("a",{parentName:"p",href:"/apis/luxd/public-api-server"},"public server"),".")),(0,i.kt)("h2",{id:"format"},"Format"),(0,i.kt)("p",null,"This API uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"json 2.0")," RPC format. For details, see ",(0,i.kt)("a",{parentName:"p",href:"/apis/luxd/apis/issuing-api-calls"},"here"),"."),(0,i.kt)("h2",{id:"endpoint"},"Endpoint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"/ext/admin\n")),(0,i.kt)("h2",{id:"api-methods"},"API Methods"),(0,i.kt)("h3",{id:"adminalias"},"admin.alias"),(0,i.kt)("p",null,"Assign an API endpoint an alias, a different endpoint for the API. The original endpoint will still work. This change only affects this node; other nodes will not know about this alias."),(0,i.kt)("h4",{id:"signature"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.alias({endpoint:string, alias:string}) -> {}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"endpoint")," is the original endpoint of the API. ",(0,i.kt)("inlineCode",{parentName:"li"},"endpoint")," should only include the part of the endpoint after ",(0,i.kt)("inlineCode",{parentName:"li"},"/ext/"),"."),(0,i.kt)("li",{parentName:"ul"},"The API being aliased can now be called at ",(0,i.kt)("inlineCode",{parentName:"li"},"ext/alias"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alias")," can be at most 512 characters.")),(0,i.kt)("h4",{id:"example-call"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.alias",\n    "params": {\n        "alias":"myAlias",\n        "endpoint":"bc/X"\n    }\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {}\n}\n')),(0,i.kt)("p",null,"Now, calls to the X-Chain can be made to either ",(0,i.kt)("inlineCode",{parentName:"p"},"/ext/bc/X")," or, equivalently, to ",(0,i.kt)("inlineCode",{parentName:"p"},"/ext/myAlias"),"."),(0,i.kt)("h3",{id:"adminaliaschain"},"admin.aliasChain"),(0,i.kt)("p",null,"Give a blockchain an alias, a different name that can be used any place the blockchain\u2019s ID is used."),(0,i.kt)("h4",{id:"signature-1"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.aliasChain(\n    {\n        chain:string,\n        alias:string\n    }\n) -> {}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chain")," is the blockchain\u2019s ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alias")," can now be used in place of the blockchain\u2019s ID (in API endpoints, for example.)")),(0,i.kt)("h4",{id:"example-call-1"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.aliasChain",\n    "params": {\n        "chain":"sV6o671RtkGBcno1FiaDbVcFv2sG5aVXMZYzKdP4VQAWmJQnM",\n        "alias":"myBlockchainAlias"\n    }\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-1"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {}\n}\n')),(0,i.kt)("p",null,"Now, instead of interacting with the blockchain whose ID is ",(0,i.kt)("inlineCode",{parentName:"p"},"sV6o671RtkGBcno1FiaDbVcFv2sG5aVXMZYzKdP4VQAWmJQnM")," by making API calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"/ext/bc/sV6o671RtkGBcno1FiaDbVcFv2sG5aVXMZYzKdP4VQAWmJQnM"),", one can also make calls to ",(0,i.kt)("inlineCode",{parentName:"p"},"ext/bc/myBlockchainAlias"),"."),(0,i.kt)("h3",{id:"admingetchainaliases"},"admin.getChainAliases"),(0,i.kt)("p",null,"Returns the aliases of the chain"),(0,i.kt)("h4",{id:"signature-2"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.getChainAliases(\n    {\n        chain:string\n    }\n) -> {aliases:string[]}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"chain")," is the blockchain\u2019s ID.")),(0,i.kt)("h4",{id:"example-call-2"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.getChainAliases",\n    "params": {\n        "chain":"sV6o671RtkGBcno1FiaDbVcFv2sG5aVXMZYzKdP4VQAWmJQnM"\n    }\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-2"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "aliases": [\n      "X",\n      "avm",\n      "2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed"\n    ]\n  },\n  "id": 1\n}\n')),(0,i.kt)("h3",{id:"admingetloggerlevel"},"admin.getLoggerLevel"),(0,i.kt)("p",null,"Returns log and display levels of loggers."),(0,i.kt)("h4",{id:"signature-3"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.getLoggerLevel(\n    {\n        loggerName:string // optional\n    }\n) -> {\n        loggerLevels: {\n            loggerName: {\n                    logLevel: string,\n                    displayLevel: string\n            }\n        }\n    }\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loggerName")," is the name of the logger to be returned. This is an optional argument. If not specified, it returns all possible loggers.")),(0,i.kt)("h4",{id:"example-call-3"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.getLoggerLevel",\n    "params": {\n        "loggerName": "C"\n    }\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-3"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "loggerLevels": {\n      "C": {\n        "logLevel": "DEBUG",\n        "displayLevel": "INFO"\n      }\n    }\n  },\n  "id": 1\n}\n')),(0,i.kt)("h3",{id:"adminloadvms"},"admin.loadVMs"),(0,i.kt)("p",null,"Dynamically loads any virtual machines installed on the node as plugins. See ",(0,i.kt)("a",{parentName:"p",href:"/subnets/create-a-virtual-machine-vm/#installing-a-vm"},"here")," for more information on how to install a virtual machine on a node."),(0,i.kt)("h4",{id:"signature-4"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"admin.loadVMs() -> {\n    newVMs: map[string][]string\n    failedVMs: map[string]string,\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"failedVMs")," is only included in the response if at least one virtual machine fails to be loaded.")),(0,i.kt)("h4",{id:"example-call-4"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.loadVMs",\n    "params" :{}\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-4"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "newVMs": {\n      "tGas3T58KzdjLHhBDMnH2TvrddhqTji5iZAMZ3RXs2NLpSnhH": ["foovm"]\n    },\n    "failedVMs": {\n      "rXJsCSEYXg2TehWxCEEGj6JU2PWKTkd6cBdNLjoe2SpsKD9cy": "error message"\n    }\n  },\n  "id": 1\n}\n')),(0,i.kt)("h3",{id:"adminlockprofile"},"admin.lockProfile"),(0,i.kt)("p",null,"Writes a profile of mutex statistics to ",(0,i.kt)("inlineCode",{parentName:"p"},"lock.profile"),"."),(0,i.kt)("h4",{id:"signature-5"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.lockProfile() -> {}\n")),(0,i.kt)("h4",{id:"example-call-5"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.lockProfile",\n    "params" :{}\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-5"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {}\n}\n')),(0,i.kt)("h3",{id:"adminmemoryprofile"},"admin.memoryProfile"),(0,i.kt)("p",null,"Writes a memory profile of the to ",(0,i.kt)("inlineCode",{parentName:"p"},"mem.profile"),"."),(0,i.kt)("h4",{id:"signature-6"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.memoryProfile() -> {}\n")),(0,i.kt)("h4",{id:"example-call-6"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.memoryProfile",\n    "params" :{}\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-6"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {}\n}\n')),(0,i.kt)("h3",{id:"adminsetloggerlevel"},"admin.setLoggerLevel"),(0,i.kt)("p",null,"Sets log and display levels of loggers."),(0,i.kt)("h4",{id:"signature-7"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.setLoggerLevel(\n    {\n        loggerName: string, // optional\n        logLevel: string, // optional\n        displayLevel: string, // optional\n    }\n) -> {}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"loggerName")," is the logger's name to be changed. This is an optional parameter. If not specified, it changes all possible loggers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"logLevel")," is the log level of written logs, can be omitted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"displayLevel")," is the log level of displayed logs, can be omitted.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"logLevel")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"displayLevel")," cannot be omited at the same time."),(0,i.kt)("h4",{id:"example-call-7"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.setLoggerLevel",\n    "params": {\n        "loggerName": "C",\n        "logLevel": "DEBUG",\n        "displayLevel": "INFO"\n    }\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-7"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {}\n}\n')),(0,i.kt)("h3",{id:"adminstartcpuprofiler"},"admin.startCPUProfiler"),(0,i.kt)("p",null,"Start profiling the CPU utilization of the node. To stop, call ",(0,i.kt)("inlineCode",{parentName:"p"},"admin.stopCPUProfiler"),". On stop, writes the profile to ",(0,i.kt)("inlineCode",{parentName:"p"},"cpu.profile"),"."),(0,i.kt)("h4",{id:"signature-8"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.startCPUProfiler() -> {}\n")),(0,i.kt)("h4",{id:"example-call-8"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.startCPUProfiler",\n    "params" :{}\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-8"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {}\n}\n')),(0,i.kt)("h3",{id:"adminstopcpuprofiler"},"admin.stopCPUProfiler"),(0,i.kt)("p",null,"Stop the CPU profile that was previously started."),(0,i.kt)("h4",{id:"signature-9"},(0,i.kt)("strong",{parentName:"h4"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"admin.stopCPUProfiler() -> {}\n")),(0,i.kt)("h4",{id:"example-call-9"},(0,i.kt)("strong",{parentName:"h4"},"Example Call")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST --data \'{\n    "jsonrpc":"2.0",\n    "id"     :1,\n    "method" :"admin.stopCPUProfiler"\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/admin\n')),(0,i.kt)("h4",{id:"example-response-9"},(0,i.kt)("strong",{parentName:"h4"},"Example Response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "id": 1,\n  "result": {}\n}\n')))}g.isMDXComponent=!0}}]);