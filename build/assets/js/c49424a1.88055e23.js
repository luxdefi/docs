"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[9646],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?i.createElement(m,r(r({ref:t},c),{},{components:n})):i.createElement(m,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7850:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],s={sidebar_position:12,description:"The IPC API allows users to create UNIX domain sockets for blockchains to publish to. Find out more information here."},l="IPC API",p={unversionedId:"apis/luxd/apis/ipc",id:"apis/luxd/apis/ipc",title:"IPC API",description:"The IPC API allows users to create UNIX domain sockets for blockchains to publish to. Find out more information here.",source:"@site/docs/apis/luxd/apis/ipc.md",sourceDirName:"apis/luxd/apis",slug:"/apis/luxd/apis/ipc",permalink:"/apis/luxd/apis/ipc",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/apis/luxd/apis/ipc.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,description:"The IPC API allows users to create UNIX domain sockets for blockchains to publish to. Find out more information here."},sidebar:"apis",previous:{title:"Info API",permalink:"/apis/luxd/apis/info"},next:{title:"Keystore API",permalink:"/apis/luxd/apis/keystore"}},c={},u=[{value:"IPC Message Format",id:"ipc-message-format",level:2},{value:"IPC Socket URL Format",id:"ipc-socket-url-format",level:2},{value:"Format",id:"format",level:2},{value:"Endpoint",id:"endpoint",level:2},{value:"Methods",id:"methods",level:2},{value:"ipcs.publishBlockchain",id:"ipcspublishblockchain",level:3},{value:"<strong>Signature</strong>",id:"signature",level:4},{value:"<strong>Example Call</strong>",id:"example-call",level:4},{value:"<strong>Example Response</strong>",id:"example-response",level:4},{value:"ipcs.unpublishBlockchain",id:"ipcsunpublishblockchain",level:3},{value:"<strong>Signature</strong>",id:"signature-1",level:4},{value:"<strong>Example Call</strong>",id:"example-call-1",level:4},{value:"<strong>Example Response</strong>",id:"example-response-1",level:4}],d={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ipc-api"},"IPC API"),(0,o.kt)("p",null,"The IPC API allows users to create UNIX domain sockets for blockchains to publish to. When the blockchain accepts a vertex/block it will publish it to a socket and the decisions contained inside will be published to another."),(0,o.kt)("p",null,"A node will only expose this API if it is started with ",(0,o.kt)("a",{parentName:"p",href:"/nodes/maintain/luxd-config-flags"},"config flag")," ",(0,o.kt)("inlineCode",{parentName:"p"},"api-ipcs-enabled=true"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This API set is for a specific node, it is unavailable on the ",(0,o.kt)("a",{parentName:"p",href:"/apis/luxd/public-api-server"},"public server"),".")),(0,o.kt)("h2",{id:"ipc-message-format"},"IPC Message Format"),(0,o.kt)("p",null,"Socket messages consist of a 64bit integer in BigEndian format followed by that many bytes."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"Sending:\n    [0x41, 0x76, 0x61, 0x78]\nWrites to the socket:\n    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x41, 0x76, 0x61, 0x78]\n")),(0,o.kt)("h2",{id:"ipc-socket-url-format"},"IPC Socket URL Format"),(0,o.kt)("p",null,"The names of the sockets are of the form ",(0,o.kt)("inlineCode",{parentName:"p"},"<network_id>-<chain_id>-<event_type>")," where ",(0,o.kt)("inlineCode",{parentName:"p"},"<event_type>")," is either ",(0,o.kt)("inlineCode",{parentName:"p"},"consensus")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"decisions"),". The consensus socket receives verticies and blocks and while the decisions socket recives individual transactions."),(0,o.kt)("h2",{id:"format"},"Format"),(0,o.kt)("p",null,"This API uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"json 2.0")," RPC format."),(0,o.kt)("h2",{id:"endpoint"},"Endpoint"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"/ext/ipcs")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"ipcspublishblockchain"},"ipcs.publishBlockchain"),(0,o.kt)("p",null,"Register a blockchain so it publishes accepted vertices to a Unix domain socket."),(0,o.kt)("h4",{id:"signature"},(0,o.kt)("strong",{parentName:"h4"},"Signature")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"ipcs.publishBlockchain({blockchainID: string}) -> {consensusURL: string, decisionsURL: string}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"blockchainID")," is the blockchain that will publish accepted vertices."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"consensusURL")," is the path of the Unix domain socket the vertices are published to."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"decisionsURL")," is the path of the Unix domain socket the transactions are published to.")),(0,o.kt)("h4",{id:"example-call"},(0,o.kt)("strong",{parentName:"h4"},"Example Call")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X POST --data \'{\n    "jsonrpc": "2.0",\n    "method": "ipcs.publishBlockchain",\n    "params":{\n        "blockchainID":"11111111111111111111111111111111LpoYY"\n    },\n    "id": 1\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/ipcs\n')),(0,o.kt)("h4",{id:"example-response"},(0,o.kt)("strong",{parentName:"h4"},"Example Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {\n    "decisionsURL": "/tmp/1-11111111111111111111111111111111LpoYY-consensus",\n    "consensusURL": "/tmp/1-11111111111111111111111111111111LpoYY-decisions"\n  },\n  "id": 1\n}\n')),(0,o.kt)("h3",{id:"ipcsunpublishblockchain"},"ipcs.unpublishBlockchain"),(0,o.kt)("p",null,"Deregister a blockchain so that it no longer publishes to a Unix domain socket."),(0,o.kt)("h4",{id:"signature-1"},(0,o.kt)("strong",{parentName:"h4"},"Signature")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"ipcs.unpublishBlockchain({blockchainID: string}) -> {}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"blockchainID")," is the blockchain that will no longer publish to a Unix domain socket.")),(0,o.kt)("h4",{id:"example-call-1"},(0,o.kt)("strong",{parentName:"h4"},"Example Call")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'curl -X POST --data \'{\n    "jsonrpc": "2.0",\n    "method": "ipcs.unpublishBlockchain",\n    "params":{\n        "blockchainID":"11111111111111111111111111111111LpoYY"\n    },\n    "id": 1\n}\' -H \'content-type:application/json;\' 127.0.0.1:9650/ext/ipcs\n')),(0,o.kt)("h4",{id:"example-response-1"},(0,o.kt)("strong",{parentName:"h4"},"Example Response")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "jsonrpc": "2.0",\n  "result": {},\n  "id": 1\n}\n')))}h.isMDXComponent=!0}}]);