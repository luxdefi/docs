"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[2340],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8002:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={},l="Abigen",s={unversionedId:"specs/abigen",id:"specs/abigen",title:"Abigen",description:"Compile a solidity contract into golang to deploy and call contracts programmatically.",source:"@site/docs/specs/abigen.md",sourceDirName:"specs",slug:"/specs/abigen",permalink:"/specs/abigen",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/specs/abigen.md",tags:[],version:"current",frontMatter:{},sidebar:"specs",previous:{title:"Platform Transaction Format",permalink:"/specs/platform-transaction-serialization"}},p={},u=[{value:"How to Build",id:"how-to-build",level:2},{value:"Example Code",id:"example-code",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"abigen"},"Abigen"),(0,a.kt)("p",null,"Compile a solidity contract into golang to deploy and call contracts programmatically."),(0,a.kt)("h2",{id:"how-to-build"},"How to Build"),(0,a.kt)("p",null,"Download the solidity compiler from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ethereum/solc-bin"},"solc-bin"),"."),(0,a.kt)("p",null,"Copy the appropriate compiler into your current path. ~/bin/ is a common path in most linux distributions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# cp linux-amd64/solc-linux-amd64-v0.8.9+commit.e5eed63a ~/bin\n")),(0,a.kt)("p",null,"Ensure solc can run."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# solc --version\nsolc, the solidity compiler commandline interface\nVersion: 0.8.9+commit.e5eed63a.Linux.g++\n")),(0,a.kt)("p",null,"Build abigen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# cd ~/go/src/github.com/luxdefi/lux\n# go build -o abigen cmd/abigen/main.go\n# cp abigen ~/bin\n")),(0,a.kt)("p",null,"Compile a contract."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# abigen --sol counter.sol --pkg main --out counter.go\n")),(0,a.kt)("p",null,"This will produce ",(0,a.kt)("inlineCode",{parentName:"p"},"counter.go")," suitable to interact with contract."),(0,a.kt)("h2",{id:"example-code"},"Example Code"),(0,a.kt)("p",null,"Setup the connection to ",(0,a.kt)("inlineCode",{parentName:"p"},"luxd"),", then deploy, call, and fetch values from the contract."),(0,a.kt)("p",null,"Abigen offers more features for complicated contracts, the following is provided as an example to get started using the basic contract"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "log"\n    "math/big"\n    "strings"\n    "time"\n\n    "github.com/luxdefi/luxd/utils/constants"\n    "github.com/luxdefi/luxd/utils/formatting"\n    "github.com/luxdefi/coreth/accounts/abi/bind"\n    "github.com/luxdefi/coreth/core/types"\n    "github.com/luxdefi/coreth/ethclient"\n    "github.com/luxdefi/coreth/params"\n    "github.com/luxdefi/coreth/rpc"\n    "github.com/decred/dcrd/dcrec/secp256k1/v3"\n    "github.com/ethereum/go-ethereum/common"\n    "github.com/ethereum/go-ethereum/crypto"\n)\n\nfunc main() {\n    // setup client\n    rc, err := rpc.Dial("http://localhost:9650/ext/bc/C/rpc")\n    if err != nil {\n        log.Fatal(err)\n    }\n    ec := ethclient.NewClient(rc)\n\n    ctx := context.Background()\n\n    // fetch networkid\n    networkId, err := ec.ChainID(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // parse key\n    privateKeyString := "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN"\n    privateKeyBytes, err := formatting.Decode(formatting.CB58, strings.TrimPrefix(privateKeyString, constants.SecretKeyPrefix))\n    if err != nil {\n        log.Fatal(err)\n    }\n    privateKey := secp256k1.PrivKeyFromBytes(privateKeyBytes)\n    privateKeyECDSA := privateKey.ToECDSA()\n\n    // derive \'c\' address\n    cAddress := crypto.PubkeyToAddress(privateKeyECDSA.PublicKey)\n\n    // setup signer and transaction options.\n    signer := types.LatestSignerForChainID(networkId)\n    to := &bind.TransactOpts{\n        Signer: func(address common.Address, transaction *types.Transaction) (*types.Transaction, error) {\n            return types.SignTx(transaction, signer, privateKeyECDSA)\n        },\n        From:     cAddress,\n        Context:  ctx,\n        GasLimit: params.ApricotPhase1GasLimit,\n    }\n\n    // deploy the contract\n    storageAddress, storageTransaction, storageContract, err := DeployStorage(to, ec)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // wait for the transaction to be accepted\n    for {\n        r, err := ec.TransactionReceipt(ctx, storageTransaction.Hash())\n        if err != nil {\n            if err.Error() != "not found" {\n                log.Fatal(err)\n            }\n            time.Sleep(1 * time.Second)\n            continue\n        }\n        if r.Status != 0 {\n            break\n        }\n        time.Sleep(1 * time.Second)\n    }\n\n    log.Println("storageAddress", storageAddress)\n    log.Println("storageTransaction", storageTransaction)\n\n    // Call store on the contract\n    storeTransaction, err := storageContract.Store(to, big.NewInt(1), common.BytesToAddress([]byte("addr1")))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // wait for the transaction\n    for {\n        r, err := ec.TransactionReceipt(ctx, storeTransaction.Hash())\n        if err != nil {\n            if err.Error() != "not found" {\n                log.Fatal(err)\n            }\n            time.Sleep(1 * time.Second)\n            continue\n        }\n        if r.Status != 0 {\n            break\n        }\n        time.Sleep(1 * time.Second)\n    }\n\n    log.Println("storeTransaction", storeTransaction)\n\n    // setup call options for storage\n    co := &bind.CallOpts{\n        Accepted: true,\n        Context:  ctx,\n        From:     storageAddress,\n    }\n\n    // retrieve the value of the contract\n    storageValue, err := storageContract.Retrieve(co)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    log.Println("storageValue", storageValue)\n}\n')))}m.isMDXComponent=!0}}]);