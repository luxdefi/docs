"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1511],{46369:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(85893),s=t(11151);const i={},a="How to Use a ERC-20 C-chain Token as the Gas Fee Token",o={id:"deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/README",title:"How to Use a ERC-20 C-chain Token as the Gas Fee Token",description:"These tutorials were published as a snapshot of when they were written,",source:"@site/docs/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/README.md",sourceDirName:"deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token",slug:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/",permalink:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/README.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"General Concepts",id:"general-concepts",level:2},{value:"High Level Overview of Our Bridge Design",id:"high-level-overview-of-our-bridge-design",level:3},{value:"Trusted and Trustless Bridges",id:"trusted-and-trustless-bridges",level:3},{value:"Lock-Mint and Burn-Release Mechanisms",id:"lock-mint-and-burn-release-mechanisms",level:3},{value:"How Lock-Mint Works",id:"how-lock-mint-works",level:4},{value:"How Burn-Release Works",id:"how-burn-release-works",level:4},{value:"Building Blocks of Our Bridge",id:"building-blocks-of-our-bridge",level:3},{value:"Relayer",id:"relayer",level:4},{value:"Contracts",id:"contracts",level:4},{value:"Requirements",id:"requirements",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Initialize the Project",id:"initialize-the-project",level:2},{value:"Create Contracts",id:"create-contracts",level:2},{value:"Create Token Contracts",id:"create-token-contracts",level:3},{value:"LUX Token",id:"lux-token",level:4},{value:"Native Minter Interface",id:"native-minter-interface",level:4},{value:"Create Bridge Contracts",id:"create-bridge-contracts",level:3},{value:"LUX Bridge",id:"lux-bridge",level:4},{value:"Subnet Bridge",id:"subnet-bridge",level:4},{value:"Compile Contracts",id:"compile-contracts",level:3},{value:"Interact with Contracts",id:"interact-with-contracts",level:2},{value:"Constants",id:"constants",level:3},{value:"Variables",id:"variables",level:3},{value:"Utils",id:"utils",level:3},{value:"Scripts",id:"scripts",level:3},{value:"Deploy Script",id:"deploy-script",level:4},{value:"Write Deploy Script",id:"write-deploy-script",level:5},{value:"Update hardhat.config.js File",id:"update-hardhatconfigjs-file",level:5},{value:"Run Deploy Script",id:"run-deploy-script",level:5},{value:"Balance Script",id:"balance-script",level:4},{value:"Write Balance Script",id:"write-balance-script",level:5},{value:"Update hardhat.config.js File",id:"update-hardhatconfigjs-file-1",level:5},{value:"Run Balance Script",id:"run-balance-script",level:5},{value:"BurnOrLock Script",id:"burnorlock-script",level:4},{value:"Write BurnOrLock Script",id:"write-burnorlock-script",level:5},{value:"Update hardhat.config.js File",id:"update-hardhatconfigjs-file-2",level:5},{value:"Run BurnOrRelease Script",id:"run-burnorrelease-script",level:5},{value:"Create the Relayer Application",id:"create-the-relayer-application",level:2},{value:"Running the Relayer",id:"running-the-relayer",level:3},{value:"Testing the Relayer",id:"testing-the-relayer",level:3},{value:"Test Relayer",id:"test-relayer",level:4},{value:"What Happens on the Video?",id:"what-happens-on-the-video",level:5},{value:"Test Relayer for Old Events",id:"test-relayer-for-old-events",level:4},{value:"What Happens on the Video?",id:"what-happens-on-the-video-1",level:5},{value:"Troubleshoot Common Issues",id:"troubleshoot-common-issues",level:2},{value:"Security and Maintenance",id:"security-and-maintenance",level:2},{value:"Overview",id:"overview",level:3},{value:"Problems",id:"problems",level:3},{value:"Suggestions",id:"suggestions",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"how-to-use-a-erc-20-c-chain-token-as-the-gas-fee-token",children:"How to Use a ERC-20 C-chain Token as the Gas Fee Token"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"These tutorials were published as a snapshot of when they were written,\nand may contain out-of-date-information.\nFor up-to-date information, please reach out to the owners of these\nprojects."})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["Purpose of this tutorial is to use a ERC-20 C-chain token as the gas fee token\non a Subnet by deploying a bridge. We will not be using a bridge provider,\ninstead we will be implementing our own bridge to truly understand how bridges\nwork and how to modify them to our needs. Bridge we will be implementing is a\n",(0,r.jsx)(n.a,{href:"#trusted-and-trustless-bridges",children:"trusted"})," bridge and it uses\n",(0,r.jsx)(n.a,{href:"#lock-mint-and-burn-release-mechanisms",children:"lock-mint"})," mechanism to transfer assets\nfrom C-chain to Subnet and\n",(0,r.jsx)(n.a,{href:"#lock-mint-and-burn-release-mechanisms",children:"burn-release"})," mechanism from Subnet to\nC-chain."]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"DISCLAIMER: The bridge implementation in this tutorial is a proof of concept and is not production ready."})}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Basic knowledge of\n",(0,r.jsx)(n.a,{href:"/build/subnet/upgrade/customize-a-subnet#precompiles",children:"Precompiles"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We will be using\n",(0,r.jsx)(n.a,{href:"/build/subnet/upgrade/customize-a-subnet#minting-native-coins",children:"NativeMinter"}),"\nprecompile on our Subnet. Familiarity with precompiles and knowledge of\nNativeMinter precompile will be assumed."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Having an up and running Subnet which uses NativeMinter precompile.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In this tutorial we will be using a local Subnet. Refer to\n",(0,r.jsx)(n.a,{href:"/build/subnet/deploy/local-subnet",children:"this"}),", to deploy\nyour local Subnet."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Basic knowledge of ",(0,r.jsx)(n.a,{href:"https://hardhat.org/",children:"Hardhat"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We will be writing our code in a Hardhat development environment. We will\nwrite custom scripts to automate our job and add those scripts as tasks to\nhardhat."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["General knowledge of ",(0,r.jsx)(n.a,{href:"https://docs.ethers.io/v5/",children:"EthersJS"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We will be interacting with both the Lux Testnet chain and our Subnet\nusing EthersJS. We will be initializing providers, signers, contracts and\ninteracting with contracts using EthersJS."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["General knowledge of ",(0,r.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.7/",children:"Solidity"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"We will be writing our own Bridge and Token contracts using Solidity."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"general-concepts",children:"General Concepts"}),"\n",(0,r.jsxs)(n.p,{children:["Before writing any code, we should understand how bridges work and what type of\nbridges exist to better understand what we are actually doing. Reading\nEthereum's official documentation about\n",(0,r.jsx)(n.a,{href:"https://ethereum.org/en/bridges/",children:"bridges"})," is highly recommended."]}),"\n",(0,r.jsx)(n.h3,{id:"high-level-overview-of-our-bridge-design",children:"High Level Overview of Our Bridge Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A ERC-20 token on the C-chain and a native gas token on our Subnet that is\nmintable, using NativeMinter precompile."}),"\n",(0,r.jsx)(n.li,{children:"Bridge contracts on both chains with custom behaviors for ERC-20 and\nNativeMinter precompile."}),"\n",(0,r.jsxs)(n.li,{children:["An off-chain relayer which is an application that listens to events on both\nchains. On these events, it sends transactions to other chain's bridge\ncontract. For more detail refer to ",(0,r.jsx)(n.a,{href:"#relayer",children:"Relayer"})," part."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"trusted-and-trustless-bridges",children:"Trusted and Trustless Bridges"}),"\n",(0,r.jsxs)(n.p,{children:["In short, bridges allow cross-chain transfers and there are 2 main types of\nbridges; Trusted and Trustless. Trusted bridges depend on an entity and have\ntrust assumptions. Trustless bridges do not require trust assumptions to\nexternal entities but only to blockchain itself. To get more details refer to\nEthereum's official documentation about\n",(0,r.jsx)(n.a,{href:"https://ethereum.org/en/bridges/",children:"bridges"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"lock-mint-and-burn-release-mechanisms",children:"Lock-Mint and Burn-Release Mechanisms"}),"\n",(0,r.jsx)(n.p,{children:"Reason we have chosen these mechanisms is because our ERC-20 token might not be\nmintable and we are sure that our Subnet's gas token is mintable."}),"\n",(0,r.jsx)(n.h4,{id:"how-lock-mint-works",children:"How Lock-Mint Works"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User deposits tokens to the bridge contract, effectively locking it."}),"\n",(0,r.jsx)(n.li,{children:"Relayer detects the transfer event and sends a transaction to the bridge\ncontract that is on the other chain."}),"\n",(0,r.jsx)(n.li,{children:"Bridge contract on the other chain mints the token and sends it to the given address."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We are using the Lock-Mint mechanism when we bridge our token from C-chain to Subnet."}),"\n",(0,r.jsx)(n.h4,{id:"how-burn-release-works",children:"How Burn-Release Works"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User deposits tokens to the bridge contract, and the bridge contract sends\nthem to the 0 address, effectively burning it."}),"\n",(0,r.jsx)(n.li,{children:"Relayer detects the transfer event and sends a transaction to the bridge\ncontract that is on the other chain."}),"\n",(0,r.jsx)(n.li,{children:"Bridge contract on the other chain sends the token to the given address, effectively releasing it."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We are using the Burn-Release mechanism when we bridge our token from Subnet to C-chain."}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"If bridge contract does not have enough tokens, it can not release them.\nTherefore, make sure that bridge is sufficiently funded to release intended\namount. This was not a concern for lock-mint mechanism because bridge could\nalways mint."})}),"\n",(0,r.jsx)(n.h3,{id:"building-blocks-of-our-bridge",children:"Building Blocks of Our Bridge"}),"\n",(0,r.jsx)(n.h4,{id:"relayer",children:"Relayer"}),"\n",(0,r.jsx)(n.p,{children:"Relayer is an off-chain application that listens for events on both chains. Upon\nevents it sends transactions to other chain's bridge contracts. It has the\nprivate key of the bridge contracts' admin account allowing it to mint or\nrelease tokens."}),"\n",(0,r.jsx)(n.h4,{id:"contracts",children:"Contracts"}),"\n",(0,r.jsx)(n.p,{children:"We will have bridge contracts on both chains. Users will send transactions to\nthese contracts when they want to burn or lock their token on the respective\nchain. When a burn or lock happens these contracts emit an event for the relayer\nto observe. When the relayer observes the event on one chain, it will call\nbridge contract on the other chain with either mint or release function."}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://nodejs.org/en/",children:"NodeJS"})," >= 16.0.0 must be installed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"})," >= 8.15.0 must be installed."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://hardhat.org/",children:"Hardhat"})," >= 2.10.1 must be installed."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(n.h2,{id:"initialize-the-project",children:"Initialize the Project"}),"\n",(0,r.jsxs)(n.p,{children:["Let's start by initializing our workspace with ",(0,r.jsx)(n.a,{href:"https://hardhat.org/",children:"Hardhat"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"To initialize project, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat init\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Select ",(0,r.jsx)(n.code,{children:"Create a JavaScript project"})," and walk through creating the project."]}),"\n",(0,r.jsx)(n.h2,{id:"create-contracts",children:"Create Contracts"}),"\n",(0,r.jsxs)(n.p,{children:["Delete ",(0,r.jsx)(n.code,{children:"Lock.sol"})," file"]}),"\n",(0,r.jsx)(n.p,{children:"To use OpenZeppelin contracts in our contracts, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i @openzeppelin/contracts\n"})}),"\n",(0,r.jsx)(n.h3,{id:"create-token-contracts",children:"Create Token Contracts"}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:"Token"})," folder inside ",(0,r.jsx)(n.code,{children:"contracts"})," folder"]}),"\n",(0,r.jsx)(n.h4,{id:"lux-token",children:"LUX Token"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"LuxToken.sol"})," file inside ",(0,r.jsx)(n.code,{children:"Token"})," folder"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/contracts/Token/LuxToken.sol",children:"LuxToken.sol"})}),"\n",(0,r.jsx)(n.h4,{id:"native-minter-interface",children:"Native Minter Interface"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"INativeMinter.sol"})," file inside ",(0,r.jsx)(n.code,{children:"Token"})," folder"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/contracts/Token/INativeMinter.sol",children:"INativeMinter.sol"})}),"\n",(0,r.jsx)(n.h3,{id:"create-bridge-contracts",children:"Create Bridge Contracts"}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:"Bridge"})," folder inside ",(0,r.jsx)(n.code,{children:"contracts"})," folder"]}),"\n",(0,r.jsx)(n.h4,{id:"lux-bridge",children:"LUX Bridge"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"LuxBridge.sol"})," file inside ",(0,r.jsx)(n.code,{children:"Bridge"})," folder"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/contracts/Bridge/LuxBridge.sol",children:"LuxBridge.sol"})}),"\n",(0,r.jsx)(n.h4,{id:"subnet-bridge",children:"Subnet Bridge"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"SubnetBridge.sol"})," file inside ",(0,r.jsx)(n.code,{children:"Bridge"})," folder"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/contracts/Bridge/SubnetBridge.sol",children:"SubnetBridge.sol"})}),"\n",(0,r.jsx)(n.h3,{id:"compile-contracts",children:"Compile Contracts"}),"\n",(0,r.jsx)(n.p,{children:"To make sure there are no problems with contracts, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat compile\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interact-with-contracts",children:"Interact with Contracts"}),"\n",(0,r.jsx)(n.h3,{id:"constants",children:"Constants"}),"\n",(0,r.jsxs)(n.p,{children:["First we will create a ",(0,r.jsx)(n.code,{children:"constants"})," folder at the root of the project to store some general values."]}),"\n",(0,r.jsxs)(n.p,{children:["Inside ",(0,r.jsx)(n.code,{children:"constants"})," folder create; ",(0,r.jsx)(n.code,{children:"chains.js"})," and ",(0,r.jsx)(n.code,{children:"nativeMinterAddress.js"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/constants/chains.js",children:"chains.js"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/constants/nativeMinterAddress.js",children:"nativeMinterAddress.js"})}),"\n",(0,r.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,r.jsxs)(n.p,{children:["Secondly we will create a ",(0,r.jsx)(n.code,{children:"variables"})," folder at the root of the project to store\nsome updated values such as contract addresses."]}),"\n",(0,r.jsxs)(n.p,{children:["Inside the ",(0,r.jsx)(n.code,{children:"variables"})," folder create ",(0,r.jsx)(n.code,{children:"contractAddresses.js"})," but do not put\nanything in it. This file will be auto generated whenever we deploy some\ncontracts."]}),"\n",(0,r.jsx)(n.h3,{id:"utils",children:"Utils"}),"\n",(0,r.jsxs)(n.p,{children:["Then we will create a ",(0,r.jsx)(n.code,{children:"utils"})," folder at the root of the project to define some general use functions."]}),"\n",(0,r.jsxs)(n.p,{children:["Inside ",(0,r.jsx)(n.code,{children:"utils"})," folder create; ",(0,r.jsx)(n.code,{children:"initProviders.js"}),", ",(0,r.jsx)(n.code,{children:"initSigners.js"})," and ",(0,r.jsx)(n.code,{children:"initContracts.js"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/utils/initProviders.js",children:"initProviders.js"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/utils/initSigners.js",children:"initSigners.js"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/utils/initContracts.js",children:"initContracts.js"})}),"\n",(0,r.jsx)(n.h3,{id:"scripts",children:"Scripts"}),"\n",(0,r.jsx)(n.p,{children:"We could directly create the off-chain relayer but it would be too hard to test\nit. Therefore, we are creating these helper scripts to quickly interact with\ncontracts and test if relayer works as expected."}),"\n",(0,r.jsxs)(n.p,{children:["We are using ",(0,r.jsx)(n.a,{href:"https://hardhat.org/guides/create-task",children:"Hardhat Tasks"})," to run our\nscripts in this tutorial. We will be writing the script, updating the\n",(0,r.jsx)(n.code,{children:"hardhat.config.js"})," to add our new script as a hardhat task."]}),"\n",(0,r.jsx)(n.h4,{id:"deploy-script",children:"Deploy Script"}),"\n",(0,r.jsx)(n.h5,{id:"write-deploy-script",children:"Write Deploy Script"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"deploy.js"})," file inside ",(0,r.jsx)(n.code,{children:"scripts"})," folder"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/scripts/deploy.js",children:"deploy.js"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"Make sure that BRIDGE_ADMIN has an admin role for NativeMinter. So that it can\nallow SubnetBridge contract to mint native token."})}),"\n",(0,r.jsx)(n.h5,{id:"update-hardhatconfigjs-file",children:"Update hardhat.config.js File"}),"\n",(0,r.jsxs)(n.p,{children:["To add ",(0,r.jsx)(n.code,{children:"deploy"})," script as a hardhat task add following code inside ",(0,r.jsx)(n.code,{children:"hardhat.config.js"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'/* Import task from hardhat config */\nconst { task } = require("hardhat/config");\n...\n/* Import deploy function */\nrequire("./scripts/deploy");\n...\n/* Create deploy task */\ntask(\n\t"deploy",\n\t"Deploy bridges on both networks and deploy LuxToken, also update the admins"\n).setAction(async (taskArgs, hre) => {\n\tawait deploy().catch((error) => {\n\t\tconsole.error(error);\n\t\tprocess.exitCode = 1;\n\t});\n});\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Example ",(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/hardhatConfigAfterDeploy.js",children:"hardhat.config.js"})," file after adding the deploy task."]}),"\n",(0,r.jsx)(n.h5,{id:"run-deploy-script",children:"Run Deploy Script"}),"\n",(0,r.jsx)(n.p,{children:"To run our deploy script, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat deploy\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After running the script you should see deployed contract addresses on the\ncommand line and see that ",(0,r.jsx)(n.code,{children:"variables/contractAddresses.js"})," file is updated."]}),"\n",(0,r.jsx)(n.h4,{id:"balance-script",children:"Balance Script"}),"\n",(0,r.jsx)(n.h5,{id:"write-balance-script",children:"Write Balance Script"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"balance.js"})," file inside ",(0,r.jsx)(n.code,{children:"scripts"})," folder"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/scripts/balance.js",children:"balance.js"})}),"\n",(0,r.jsx)(n.h5,{id:"update-hardhatconfigjs-file-1",children:"Update hardhat.config.js File"}),"\n",(0,r.jsxs)(n.p,{children:["To add ",(0,r.jsx)(n.code,{children:"balance"})," script as a hardhat task add the following code inside ",(0,r.jsx)(n.code,{children:"hardhat.config.js"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'/* Import task from hardhat config if you did not already */\nconst { task } = require("hardhat/config");\n...\n/* Import balance function */\nrequire("./scripts/balance");\n...\n/* Create balance task  */\ntask("balance", "Get token balance from a network")\n\t/* Add `from` parameter indication the used network which is either lux or subnet */\n\t.addParam("from", "Network to get balance from")\n\t.setAction(async (taskArgs, hre) => {\n\t\tawait balance(taskArgs.from).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t\tprocess.exitCode = 1;\n\t\t});\n\t});\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Example ",(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/hardhatConfigAfterBalance.js",children:"hardhat.config.js"})," file after adding the balance task."]}),"\n",(0,r.jsx)(n.h5,{id:"run-balance-script",children:"Run Balance Script"}),"\n",(0,r.jsx)(n.p,{children:"To run our balance script, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat balance --from lux\n"})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat balance --from subnet\n"})}),"\n",(0,r.jsxs)(n.p,{children:["After running the script you should see balances printed out in the command line.\nIf you have used ",(0,r.jsx)(n.code,{children:"--from subnet"})," you will only see the native token balance of\nthe user. If you have used ",(0,r.jsx)(n.code,{children:"--from lux"})," you will see the ERC20 balances of both\nuser and the bridge contract."]}),"\n",(0,r.jsx)(n.p,{children:"Balance value seen on the Subnet depends on how you have funded your address.\nBut balance values on LUX should look like the following:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"MERC20 balance of the user:  1000000.0\nMERC20 balance of the bridge:  0.0\n"})}),"\n",(0,r.jsx)(n.h4,{id:"burnorlock-script",children:"BurnOrLock Script"}),"\n",(0,r.jsx)(n.h5,{id:"write-burnorlock-script",children:"Write BurnOrLock Script"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"burnOrLock.js"})," file inside ",(0,r.jsx)(n.code,{children:"scripts"})," folder"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/scripts/burnOrLock.js",children:"burnOrLock.js"})}),"\n",(0,r.jsx)(n.h5,{id:"update-hardhatconfigjs-file-2",children:"Update hardhat.config.js File"}),"\n",(0,r.jsxs)(n.p,{children:["To add ",(0,r.jsx)(n.code,{children:"burnOrLock"})," script as a hardhat task add the following code inside ",(0,r.jsx)(n.code,{children:"hardhat.config.js"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'/* Import task from hardhat config */\nconst { task } = require("hardhat/config");\n...\n/* Import burnOrLock function */\nrequire("./scripts/burnOrLock");\n...\n/* Create burnOrRelease task  */\ntask("burnOrLock", "Burn or lock token from a network")\n\t/* Add `from` parameter indication the used network which is either lux or subnet */\n\t.addParam("from", "Network to burn or lock from")\n\t/* Add `amount` parameter indication the amount to burn or lock */\n\t.addParam("amount", "Amount to burn or lock")\n\t.setAction(async (taskArgs, hre) => {\n\t\tawait burnOrLock(taskArgs.from, taskArgs.amount).catch((error) => {\n\t\t\tconsole.error(error);\n\t\t\tprocess.exitCode = 1;\n\t\t});\n\t});\n...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Example ",(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/hardhatConfigAfterBurnOrLock.js",children:"hardhat.config.js"})," file after adding all tasks."]}),"\n",(0,r.jsx)(n.h5,{id:"run-burnorrelease-script",children:"Run BurnOrRelease Script"}),"\n",(0,r.jsx)(n.p,{children:"To run burnOrRelease script, run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat burnOrLock --from lux --amount <amount-of-token-to-burn-or-lock-in-ether>\n"})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat burnOrLock --from subnet --amount <Example value: 4>\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["When you try to run the first script ",(0,r.jsx)(n.code,{children:"... --from lux --amount 10"})," if the user\nhas 10 ERC20 tokens it will work fine and you will see the updated balances as\nexpected on LUX network. User\u2019s decremented by 10, bridge\u2019s incremented by 10.\nBut you would not see that the user's native token balance on the Subnet is\nincreased. Although there are bridge contracts, there is no relayer application\nto establish the communication in between them. Therefore, the user locked its\ntokens but its balance on the Subnet did not change. It is the same for the\nsecond script where the user burns tokens on Subnet but does not get any new\ntokens on LUX C-Chain. Be aware, if the user account does not have native token\nbalance on the Subnet, the second script would throw an error."]})}),"\n",(0,r.jsx)(n.h2,{id:"create-the-relayer-application",children:"Create the Relayer Application"}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:"relayer.js"})," file at root folder of the project."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"/deprecated/tutorials-contest/2022/erc20-as-subnet-gas-token/codes/relayer.js",children:"relayer.js"})}),"\n",(0,r.jsx)(n.h3,{id:"running-the-relayer",children:"Running the Relayer"}),"\n",(0,r.jsx)(n.p,{children:"As you can also see from the comments of the relayer file. There are different\nways to start the relayer application"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node ./relayer.js\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When run with ",(0,r.jsx)(n.code,{children:"node ./relayer.js"}),". Relayer will subscribe to events from\nrecent blocks on Lux and Subnet. Therefore, it might not process an event\nthat is emitted 1000 blocks ago. If you want to start the relayer and make a\ntransaction, current way of running is what you are looking for."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node ./relayer.js <luxBlockNumber> <subnetBlockNumber>\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When run with ",(0,r.jsx)(n.code,{children:"node ./relayer.js <luxBlockNumber> <subnetBlockNumber>"}),".\nRelayer will look for events on Lux and Subnet from the block number you\nprovided and will iterate through the next 10 blocks for the event. Therefore,\nif you have a burn or lock event emitted 1000 blocks ago, you can process it\nby giving the right blockNumber. If you want to start the relayer to process\nan old burn or lock event, current way of running is what you are looking for."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node ./relayer.js <luxBlockNumber>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node ./relayer.js -1 <subnetBlockNumber>\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["When run with ",(0,r.jsx)(n.code,{children:"node ./relayer.js <luxBlockNumber>"}),"\nor ",(0,r.jsx)(n.code,{children:"node ./relayer.js -1 <subnetBlockNumber>"}),'\nRelayer will look for events on either Lux or Subnet\nfrom the block number you provided and will iterate through the next 10 blocks\nfor the event. "-1" as block number means do not process any old blocks for\nthat chain. Therefore, ',(0,r.jsx)(n.code,{children:"node ./relayer.js -1 <subnetBlockNumber>"})," will only\nprocess events for the Subnet. If you want to start the relayer to process an\nold burn or lock event just on one chain, current way of running is what you\nare looking for"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"testing-the-relayer",children:"Testing the Relayer"}),"\n",(0,r.jsx)(n.h4,{id:"test-relayer",children:"Test Relayer"}),"\n",(0,r.jsx)(n.p,{children:"In this video on the left terminal I am using our custom scripts to interact\nwith chains and on the right terminal I am using our relay to create the cross\nchain communication."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Test relayer with scripts",src:t(3630).Z+"",width:"1920",height:"1080"})}),"\n",(0,r.jsx)(n.h5,{id:"what-happens-on-the-video",children:"What Happens on the Video?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check balances on both chains"}),"\n",(0,r.jsx)(n.li,{children:"Start the relayer"}),"\n",(0,r.jsx)(n.li,{children:"An already processed event appears on the console of the relayer therefore it does not get processed"}),"\n",(0,r.jsx)(n.li,{children:"Check the balances to make sure already processed event is not processed"}),"\n",(0,r.jsx)(n.li,{children:"Lock 20 ERC20 token from LUX and see the updated balances of user and the bridge on LUX"}),"\n",(0,r.jsx)(n.li,{children:"Relayer observes the transaction and sends a transaction to mint native tokens on Subnet"}),"\n",(0,r.jsx)(n.li,{children:"Check the balances on both Subnet and LUX. As expected our Subnet native\ntoken balance increases by 20"}),"\n",(0,r.jsx)(n.li,{children:"Burn 5 native tokens from Subnet and see the updated balance of the user"}),"\n",(0,r.jsx)(n.li,{children:"Relayer observers the transaction and sends a transaction to release 5 ERC20\ntokens on LUX"}),"\n",(0,r.jsx)(n.li,{children:"Check balance on both Subnet and LUX. As expected our ERC20 balance increases\nby 5 and bridge's decreases by 5"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"test-relayer-for-old-events",children:"Test Relayer for Old Events"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Test relayer for old events",src:t(39946).Z+"",width:"1920",height:"1080"})}),"\n",(0,r.jsx)(n.h5,{id:"what-happens-on-the-video-1",children:"What Happens on the Video?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Start by a lock transaction from LUX with amount 40. As stated in the video\nthis transaction was sent when the relayer was not working. Therefore, it is\nnot processed and it will not be processed when we start the relayer with\n",(0,r.jsx)(n.code,{children:"node relayer.js"})," because there has been many blocks after it"]}),"\n",(0,r.jsx)(n.li,{children:"Check balances on both chains"}),"\n",(0,r.jsxs)(n.li,{children:["Start the relayer with ",(0,r.jsx)(n.code,{children:"node relayer.js"})," to show that the event is not getting\nprocessed. Printed events are events that happened on the Subnet. Since there\nare no blocks building on my local Subnet other than my own, my old burns are\nconsidered new and therefore shown"]}),"\n",(0,r.jsxs)(n.li,{children:["Start the relayer with ",(0,r.jsx)(n.code,{children:"node relayer.js <blockNumber>"}),' to show that event will\nbe processed and will be printed as "OLD: "']}),"\n",(0,r.jsx)(n.li,{children:"Check balances on both chains to confirm that old lock event on LUX has been\nprocessed by relayer and tokens have been minted on LUX"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshoot-common-issues",children:"Troubleshoot Common Issues"}),"\n",(0,r.jsx)(n.p,{children:"Things to check out;"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Error while compiling contracts","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You have run ",(0,r.jsx)(n.code,{children:"npm i @openzeppelin/contracts"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Error while running scripts","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Both accounts on both chains have some native token so that they can send\ntransactions."}),"\n",(0,r.jsx)(n.li,{children:"Folder structures and file names are as suggested. In our scripts we access\nthe contract ABIs and bytecodes directly from the files that are created by\nhardhat. Those files are created according to your file structure and if you\nchanged the structure, imports might fail."}),"\n",(0,r.jsxs)(n.li,{children:["You have your private keys inside the .env file and you have downloaded\ndotenv package by running ",(0,r.jsx)(n.code,{children:"npm i dotenv"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Your Subnet has NativeMinter precompile with ",(0,r.jsx)(n.code,{children:"bridgeAdmin"})," account as the\nadmin."]}),"\n",(0,r.jsx)(n.li,{children:"You have created a contractAddresses.js file inside the variables folder. If\nyou did not create this file, deploy.js would fail."}),"\n",(0,r.jsx)(n.li,{children:"If you are trying to bridge from Subnet to LUX, in other words trying to\nburn from Subnet and release from LUX, make sure that LuxBridge has enough\nERC20 tokens to release."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-and-maintenance",children:"Security and Maintenance"}),"\n",(0,r.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Our bridge implementation is a naive one. It should give the reader a deep\nunderstanding of how bridges work rather than be used in production. There are\nmany potential risks when running a bridge."}),"\n",(0,r.jsx)(n.h3,{id:"problems",children:"Problems"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Bridge Operator Has so Much Power","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Our bridge uses only one admin account to handle bridge funds. If that one\nprivate key gets hacked, hacker could easily steal all the funds."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Smart Contracts","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Contracts used in this tutorial are not audited."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Relayer Application","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"There might be some bugs inside our relayer application."}),"\n",(0,r.jsx)(n.li,{children:"We only have one relayer application running. Computer that runs the relayer\napplication might encounter an error, maybe an electricity outage or we\nmight need to update and restart the relayer application itself. In that\ncase, our bridge would stop working for that time frame and users would not\nbe able to bridge their tokens."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"suggestions",children:"Suggestions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["More Bridge Operators","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rather than trusting on a single account, we might use a multi-sig wallet.\nFor example, it could be a 4 of 5 multi-sig wallet. Allowing us to confirm\ntransactions with 5 accounts and on 4 confirmation it would allow for\nexecution. In that case, we would have a multi-sig smart contract and that\ncontract would be the admin of the bridges. There will be 5 different\nrelayer applications running with 5 different accounts' private keys. Each\nof them would send transactions to the multi-sig smart contract. When 4 of\nthem sends the transaction, smart contract would execute the mint or release\nfunction on the bridge contract. This approach would increases both the\nsecurity and ease of maintenance of our bridge. Because of this approach,\nwhen one computer that runs the relayer application has to have a\nmaintenance or have an electricity outage bridge would function normally.\nBut, just because we have more bridge operators our bridge is not fully\nsecure."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Auditing Smart Contracts","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Smart Contracts should be audited. But, do not forget audited does not mean\nit is bug free."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Testing Relayer Application","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Relayer application should be audited and tested as well."}),"\n",(0,r.jsx)(n.li,{children:"If we decide to use a multi-sig wallet we have to update our relayer\napplication to call relevant functions on the multi-sig contract rather than\ndirectly calling bridge contracts."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Congratulations! You have created a bridge between LUX C-Chain and your Subnet\nto use an ERC-20 token as a gas token."}),"\n",(0,r.jsx)(n.p,{children:"Things achieved:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Understood general design of bridges."}),"\n",(0,r.jsx)(n.li,{children:"Implemented bridge contracts."}),"\n",(0,r.jsx)(n.li,{children:"Used NativeMinter precompile."}),"\n",(0,r.jsx)(n.li,{children:"Created a relayer application to communicate with both chains."}),"\n",(0,r.jsx)(n.li,{children:"Tested relayer to make sure communication between chains are established."}),"\n",(0,r.jsx)(n.li,{children:"Used ERC-20 token as the gas token on the Subnet."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/securing/SCSVS/blob/prerelease/SCSVSv2/2.0/0x200-Components/0x206-C6-Bridge.md",children:"Further Readings"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},39946:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/1-069fc2f0f124374b6925500b503d94ea.gif"},3630:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/2-4a1aec2e6fae360d2d07dfb23a2d446c.gif"},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var r=t(67294);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);