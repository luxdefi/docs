"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[7956],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),c=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),h=a,k=p["".concat(o,".").concat(h)]||p[h]||d[h]||i;return t?r.createElement(k,s(s({ref:n},u),{},{components:t})):r.createElement(k,s({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=p;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9898:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return o},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),s=["components"],l={},o="Manage X-Chain Keys",c={unversionedId:"apis/luxjs/manage-x-chain-keys",id:"apis/luxjs/manage-x-chain-keys",title:"Manage X-Chain Keys",description:"LuxJS comes with its own AVM Keychain. This KeyChain is used in the functions of the API, enabling them to sign using keys it's registered. The first step in this process is to create an instance of LuxJS connected to our Lux platform endpoint of choice.",source:"@site/docs/apis/luxjs/manage-x-chain-keys.md",sourceDirName:"apis/luxjs",slug:"/apis/luxjs/manage-x-chain-keys",permalink:"/apis/luxjs/manage-x-chain-keys",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/apis/luxjs/manage-x-chain-keys.md",tags:[],version:"current",frontMatter:{},sidebar:"apis",previous:{title:"Create an Asset on the X-Chain",permalink:"/apis/luxjs/create-an-asset-on-the-x-chain"},next:{title:"Send an Asset on the X-Chain",permalink:"/apis/luxjs/send-an-asset-on-the-x-chain"}},u={},d=[{value:"Accessing the Keychain",id:"accessing-the-keychain",level:2},{value:"Creating X-Chain Key Pairs",id:"creating-x-chain-key-pairs",level:2},{value:"Working with Keychains",id:"working-with-keychains",level:2},{value:"Working with Keypairs",id:"working-with-keypairs",level:2},{value:"Encode Bech32 Addresses",id:"encode-bech32-addresses",level:2}],p={toc:d};function h(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"manage-x-chain-keys"},"Manage X-Chain Keys"),(0,i.kt)("p",null,"LuxJS comes with its own AVM Keychain. This KeyChain is used in the functions of the API, enabling them to sign using keys it's registered. The first step in this process is to create an instance of LuxJS connected to our Lux platform endpoint of choice."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Lux, BinTools, Buffer, BN } from "lux"\n\nlet bintools = BinTools.getInstance()\n\nlet myNetworkID = 12345 //default is 1, we want to override that for our local network\nlet myBlockchainID = "GJABrZ9A6UQFpwjPU8MDxDd8vuyRoDVeDAXc694wJ5t3zEkhU" // The X-Chain blockchainID on this network\nlet ava = new lux.Lux(\n  "localhost",\n  9650,\n  "http",\n  myNetworkID,\n  myBlockchainID\n)\nlet xchain = ava.XChain() //returns a reference to the X-Chain used by LuxJS\n')),(0,i.kt)("h2",{id:"accessing-the-keychain"},"Accessing the Keychain"),(0,i.kt)("p",null,"The KeyChain is accessed through the X-Chain and can be referenced directly or through a reference variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let myKeychain = xchain.keyChain()\n")),(0,i.kt)("p",null,"This exposes the instance of the class AVMKeyChain which is created when the X-Chain API is created. At present, this supports secp256k1 curve for ECDSA key pairs."),(0,i.kt)("h2",{id:"creating-x-chain-key-pairs"},"Creating X-Chain Key Pairs"),(0,i.kt)("p",null,"The KeyChain has the ability to create new KeyPairs for you and return the address associated with the key pair."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"let newAddress1 = myKeychain.makeKey() //returns a Buffer for the address\n")),(0,i.kt)("p",null,"You may also import your existing private key into the KeyChain using either a Buffer\u2026"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'let mypk = bintools.avaDeserialize(\n  "24jUJ9vZexUM6expyMcT48LBx27k1m7xpraoV62oSQAHdziao5"\n) //returns a Buffer\nlet newAddress2 = myKeychain.importKey(mypk) //returns a Buffer for the address\n')),(0,i.kt)("p",null,"\u2026 or an Lux serialized string works, too:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'let mypk = "24jUJ9vZexUM6expyMcT48LBx27k1m7xpraoV62oSQAHdziao5"\nlet newAddress2 = myKeychain.importKey(mypk) //returns a Buffer for the address\n')),(0,i.kt)("h2",{id:"working-with-keychains"},"Working with Keychains"),(0,i.kt)("p",null,"The X-Chain's KeyChain has standardized key management capabilities. The following functions are available on any KeyChain that implements this interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"let addresses = myKeychain.getAddresses(); //returns an array of Buffers for the addresses\nlet addressStrings = myKeychain.getAddressStrings(); //returns an array of strings for the addresses\nlet exists = myKeychain.hasKey(newAddress1); //returns true if the address is managed\nlet keypair = myKeychain.getKey(newAddress1); //returns the KeyPair class\n")),(0,i.kt)("h2",{id:"working-with-keypairs"},"Working with Keypairs"),(0,i.kt)("p",null,"The X-Chain's KeyPair has standardized KeyPair functionality. The following operations are available on any KeyPair that implements this interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'let address = keypair.getAddress() //returns Buffer\nlet addressString = keypair.getAddressString() //returns string\n\nlet pubk = keypair.getPublicKey() //returns Buffer\nlet pubkstr = keypair.getPublicKeyString() //returns a CB58 encoded string\n\nlet privk = keypair.getPrivateKey() //returns Buffer\nlet privkstr = keypair.getPrivateKeyString() //returns a CB58 encoded string\n\nkeypair.generateKey() //creates a new random KeyPair\n\nlet mypk = "24jUJ9vZexUM6expyMcT48LBx27k1m7xpraoV62oSQAHdziao5"\nlet successul = keypair.importKey(mypk) //returns boolean if private key imported successfully\n\nlet message = Buffer.from("Wubalubadubdub")\nlet signature = keypair.sign(message) //returns a Buffer with the signature\n\nlet signerPubk = keypair.recover(message, signature)\nlet isValid = keypair.verify(message, signature) //returns a boolean\n')),(0,i.kt)("h2",{id:"encode-bech32-addresses"},"Encode Bech32 Addresses"),(0,i.kt)("p",null,"The X-Chain and the P-Chain use Bech32 to encode addresses. Note, the C-Chain also uses Bech32 to encode addresses for importing and exporting assets however the EVM, in general, uses hex encoding for addresses. Ex: ",(0,i.kt)("inlineCode",{parentName:"p"},"0x46f3e64E4e3f5a46Eaf5c292301c6174B9B646Bf"),"."),(0,i.kt)("p",null,"Each Bech32 address is composed of the following components"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"A Human-Readable Part (HRP)."),(0,i.kt)("li",{parentName:"ol"},"The number ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," is a separator (the last digit ",(0,i.kt)("inlineCode",{parentName:"li"},"1")," seen is considered the separator)."),(0,i.kt)("li",{parentName:"ol"},"Base-32 encoded string for the data part of the address (the 20-byte address itself)."),(0,i.kt)("li",{parentName:"ol"},"A 6-character base-32 encoded error correction code using the BCH algorithm.")),(0,i.kt)("p",null,"For example the following Bech32 address, ",(0,i.kt)("inlineCode",{parentName:"p"},"X-lux19rknw8l0grnfunjrzwxlxync6zrlu33y2jxhrg"),", is composed like so:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"HRP: ",(0,i.kt)("inlineCode",{parentName:"li"},"lux")),(0,i.kt)("li",{parentName:"ol"},"Separator: ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ol"},"Address: ",(0,i.kt)("inlineCode",{parentName:"li"},"9rknw8l0grnfunjrzwxlxync6zrlu33y")),(0,i.kt)("li",{parentName:"ol"},"Checksum: ",(0,i.kt)("inlineCode",{parentName:"li"},"2jxhrg"))),(0,i.kt)("p",null,"Depending on the ",(0,i.kt)("inlineCode",{parentName:"p"},"networkID")," which is passed in when instantiating ",(0,i.kt)("inlineCode",{parentName:"p"},"Lux")," the encoded addresses will have a distinctive HRP per each network. LuxJS also has address encoding for past networks ",(0,i.kt)("inlineCode",{parentName:"p"},"cascade"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"denali"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"everest"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"0 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"custom"),"19rknw8l0grnfunjrzwxlxync6zrlu33yeg5dya"),(0,i.kt)("li",{parentName:"ul"},"1 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"lux"),"19rknw8l0grnfunjrzwxlxync6zrlu33y2jxhrg"),(0,i.kt)("li",{parentName:"ul"},"2 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"cascade"),"19rknw8l0grnfunjrzwxlxync6zrlu33ypmtvnh"),(0,i.kt)("li",{parentName:"ul"},"3 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"denali"),"19rknw8l0grnfunjrzwxlxync6zrlu33yhc357h"),(0,i.kt)("li",{parentName:"ul"},"4 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"everest"),"19rknw8l0grnfunjrzwxlxync6zrlu33yn44wty"),(0,i.kt)("li",{parentName:"ul"},"5 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"fuji"),"19rknw8l0grnfunjrzwxlxync6zrlu33yxqzg0h"),(0,i.kt)("li",{parentName:"ul"},"1337 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"custom"),"19rknw8l0grnfunjrzwxlxync6zrlu33yeg5dya"),(0,i.kt)("li",{parentName:"ul"},"12345 - X-",(0,i.kt)("inlineCode",{parentName:"li"},"local"),"19rknw8l0grnfunjrzwxlxync6zrlu33ynpm3qq")),(0,i.kt)("p",null,"Here's the mapping of ",(0,i.kt)("inlineCode",{parentName:"p"},"networkID")," to bech32 HRP."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'export const NetworkIDToHRP = {\n  0: "custom",\n  1: "lux",\n  2: "cascade",\n  3: "denali",\n  4: "everest",\n  5: "fuji",\n  1337: "custom",\n  12345: "local",\n}\n')),(0,i.kt)("p",null,"Change the HRP of the bech32 address by passing in a different networkID when instantiating ",(0,i.kt)("inlineCode",{parentName:"p"},"Lux"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// mainnet\nconst networkID = 1\nconst lux = new Lux(undefined, undefined, undefined, networkID)\n\n// [ 'X-lux1j2j0vzttatv73gr7j4tnd7rp4el3ngcyjy0pre' ]\n// [ 'X-lux19rknw8l0grnfunjrzwxlxync6zrlu33y2jxhrg' ]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// fuji\nconst networkID = 5\nconst lux = new Lux(undefined, undefined, undefined, networkID)\n\n// [ 'X-fuji1j2j0vzttatv73gr7j4tnd7rp4el3ngcy7kt70x' ]\n// [ 'X-fuji19rknw8l0grnfunjrzwxlxync6zrlu33yxqzg0h' ]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// custom\nconst networkID = 1337 // also networkID = 0\nconst lux = new Lux(undefined, undefined, undefined, networkID)\n\n// [ 'X-custom1j2j0vzttatv73gr7j4tnd7rp4el3ngcyp7amyv' ]\n// [ 'X-custom19rknw8l0grnfunjrzwxlxync6zrlu33yeg5dya' ]\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// mainnet\nconst networkID = 12345\nconst lux = new Lux(undefined, undefined, undefined, networkID)\n\n// [ 'X-local1j2j0vzttatv73gr7j4tnd7rp4el3ngcythj8q3' ]\n// [ 'X-local19rknw8l0grnfunjrzwxlxync6zrlu33ynpm3qq' ]\n")))}h.isMDXComponent=!0}}]);