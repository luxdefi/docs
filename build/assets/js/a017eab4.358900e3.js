"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6440],{22632:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var t=r(85893),i=r(11151);const s={tags:["Build","Dapps"],description:"This tutorial walks through verifying a smart contract on a block explorer using Truffle after deploying it to Lux C-Chain.",sidebar_label:"Using Truffle",pagination_label:"Verifying Smart Contracts with Truffle Verify"},o="Verifying Smart Contracts with Truffle Verify",l={id:"deprecated/verify-truffle",title:"Verifying Smart Contracts with Truffle Verify",description:"This tutorial walks through verifying a smart contract on a block explorer using Truffle after deploying it to Lux C-Chain.",source:"@site/docs/deprecated/verify-truffle.md",sourceDirName:"deprecated",slug:"/deprecated/verify-truffle",permalink:"/deprecated/verify-truffle",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/verify-truffle.md",tags:[{label:"Build",permalink:"/tags/build"},{label:"Dapps",permalink:"/tags/dapps"}],version:"current",frontMatter:{tags:["Build","Dapps"],description:"This tutorial walks through verifying a smart contract on a block explorer using Truffle after deploying it to Lux C-Chain.",sidebar_label:"Using Truffle",pagination_label:"Verifying Smart Contracts with Truffle Verify"}},a={},c=[{value:"Create a Project",id:"create-a-project",level:2},{value:"Compiling",id:"compiling",level:2},{value:"Migrate",id:"migrate",level:2},{value:"Truffle Verify",id:"truffle-verify",level:2},{value:"Testnet",id:"testnet",level:3},{value:"Mainnet",id:"mainnet",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"verifying-smart-contracts-with-truffle-verify",children:"Verifying Smart Contracts with Truffle Verify"}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"This document has been deprecated and is no longer maintained. It may contain incorrect/obsolete information."})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["This tutorial includes items from the truffle ",(0,t.jsx)(n.a,{href:"https://www.trufflesuite.com/docs/truffle/quickstart",children:"quickstart docs"})]})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Inspired by ",(0,t.jsx)(n.a,{href:"https://www.npmjs.com/package/truffle-plugin-verify",children:"truffle verify docs"})]})}),"\n",(0,t.jsx)(n.h2,{id:"create-a-project",children:"Create a Project"}),"\n",(0,t.jsx)(n.p,{children:"Make sure you have truffle installed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"npm install -g truffle\n"})}),"\n",(0,t.jsx)(n.p,{children:"Create a new directory for your Truffle project:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"mkdir MetaCoin\ncd MetaCoin\n"})}),"\n",(0,t.jsx)(n.p,{children:'Download ("unbox") the MetaCoin box:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"truffle unbox metacoin\n"})}),"\n",(0,t.jsx)(n.p,{children:"Once this operation is completed, you'll now have a project structure with the following items:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"contracts/"}),": Directory for Solidity contracts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"migrations/"}),": Directory for scriptable deployment files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"test/"}),": Directory for test files for testing your application and contracts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"truffle.js"}),": Truffle configuration file"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"compiling",children:"Compiling"}),"\n",(0,t.jsx)(n.p,{children:"Before we compile our smart contract, we must set up our environment"}),"\n",(0,t.jsx)(n.p,{children:"Run the following commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"npm init -y\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"yarn add @truffle/hdwallet-provider yarn add -D truffle-plugin-verify\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Create a ",(0,t.jsx)(n.code,{children:".env.json"})," file in your project's root directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "mnemonic": "your-wallet-seed-phrase",\n  "snowtraceApiKey": "your-snowtrace-api-key"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Get your Snowtrace API key ",(0,t.jsx)(n.a,{href:"https://snowtrace.io/myapikey",children:"here"})]})}),"\n",(0,t.jsxs)(n.p,{children:["Configure your ",(0,t.jsx)(n.code,{children:"truffle-config.js"})," file to the appropriate settings:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * Use this file to configure your truffle project. It's seeded with some\n * common settings for different networks and features like migrations,\n * compilation and testing. Uncomment the ones you need or modify\n * them to suit your project as necessary.\n *\n * More information about configuration can be found at:\n *\n * trufflesuite.com/docs/advanced/configuration\n *\n * To deploy via Infura you'll need a wallet provider (like @truffle/hdwallet-provider)\n * to sign your transactions before they're sent to a remote public node. Infura accounts\n * are available for free at: infura.io/register.\n *\n * You'll also need a mnemonic - the twelve word phrase the wallet uses to generate\n * public/private key pairs. If you're publishing your code to GitHub make sure you load this\n * phrase from a file you've .gitignored so it doesn't accidentally become public.\n *\n */\n\nconst HDWalletProvider = require(\"@truffle/hdwallet-provider\")\n\n//\nconst { snowtraceApiKey, mnemonic } = require(\"./.env.json\")\n\nmodule.exports = {\n  /**\n   * Networks define how you connect to your ethereum client and let you set the\n   * defaults web3 uses to send transactions. If you don't specify one truffle\n   * will spin up a development blockchain for you on port 9545 when you\n   * run `develop` or `test`. You can ask a truffle command to use a specific\n   * network from the command line, e.g\n   *\n   * $ truffle test --network <network-name>\n   */\n\n  plugins: [\"truffle-plugin-verify\"],\n  api_keys: {\n    snowtrace: snowtraceApiKey,\n  },\n  networks: {\n    testnet: {\n      provider: () =>\n        new HDWalletProvider(\n          mnemonic,\n          `https://api.lux-test.network/ext/bc/C/rpc`\n        ),\n      network_id: 1,\n      timeoutBlocks: 200,\n      confirmations: 5,\n    },\n  },\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Network can be configured for Mainnet deployment(see Alternatives)"})}),"\n",(0,t.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"truffle compile\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once this operation is completed, your ",(0,t.jsx)(n.code,{children:"./build/contracts"})," folder should contain the following items:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ConvertLib.json"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"MetaCoin.json"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"Migrations.json"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"migrate",children:"Migrate"}),"\n",(0,t.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"npx truffle migrate --network testnet\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You should see the TX activity in your terminal\n",(0,t.jsx)(n.img,{alt:"truffle-verify-txn1",src:r(7405).Z+"",width:"1586",height:"928"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"truffle-verify-txn2",src:r(36467).Z+"",width:"1798",height:"888"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"truffle-verify-txn3",src:r(81218).Z+"",width:"1588",height:"1070"})}),"\n",(0,t.jsx)(n.h2,{id:"truffle-verify",children:"Truffle Verify"}),"\n",(0,t.jsx)(n.p,{children:"Truffle verify allows users to verify contracts from the CLI"}),"\n",(0,t.jsx)(n.h3,{id:"testnet",children:"Testnet"}),"\n",(0,t.jsxs)(n.p,{children:["Take a look at the Testnet Explorer ",(0,t.jsx)(n.a,{href:"https://testnet.snowtrace.io/",children:"here"}),"\nand read more about truffle verify\n",(0,t.jsx)(n.a,{href:"https://github.com/rkalis/truffle-plugin-verify",children:"here"})]}),"\n",(0,t.jsxs)(n.p,{children:["If you have issues, contact us on ",(0,t.jsx)(n.a,{href:"https://chat.lux.network",children:"Discord"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"npx truffle run verify ConvertLib MetaCoin --network testnet\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Wait for the verification message from the CLI\n",(0,t.jsx)(n.img,{alt:"truffle-verify-message1",src:r(73679).Z+"",width:"1734",height:"234"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["View the verified contract\n",(0,t.jsx)(n.img,{alt:"truffle-verify-view-contract",src:r(1589).Z+"",width:"2768",height:"1000"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mainnet",children:"Mainnet"}),"\n",(0,t.jsxs)(n.p,{children:["Configure your ",(0,t.jsx)(n.code,{children:"truffle-config.js"})," file to the appropriate settings:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n...\n   plugins: [\n    'truffle-plugin-verify'\n  ],\n  api_keys: {\n    snowtrace: snowtraceApiKey\n  },\n  networks: {\n\n    mainnet: {\n        provider: () => new HDWalletProvider(mnemonic, `https://api.lux.network/ext/bc/C/rpc`),\n        network_id: 1,\n        timeoutBlocks: 200,\n        confirmations: 5\n    }\n  }\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Run the following commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"truffle migrate --network mainnet\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zsh",children:"truffle verify CovertLib MetaCoin --network mainnet\n"})}),"\n",(0,t.jsx)(n.p,{children:"Thanks for reading \u25bc"})]})}function f(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},73679:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/truffle-verify-message1-9784a1ee566edf291bdbb175436c02dc.png"},7405:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/truffle-verify-txn1-972224d8b8af61b4a997f57c1d3f8666.png"},36467:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/truffle-verify-txn2-dff791349635d8488568214daf9c8864.png"},81218:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/truffle-verify-txn3-617cdd696763446e2592438997848061.png"},1589:(e,n,r)=>{r.d(n,{Z:()=>t});const t=r.p+"assets/images/truffle-verify-view-contract-63bd76d40d3b2f3e059941f74861c046.png"},11151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>o});var t=r(67294);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);