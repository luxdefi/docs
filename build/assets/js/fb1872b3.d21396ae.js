"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7906],{3088:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>f});var t=i(85893),l=i(11151);const s={},o="IPFSViewer.js",r={id:"deprecated/tutorials-contest/2021/distributed-file-manager/frontend/IPFSViewer.js",title:"IPFSViewer.js",description:"",source:"@site/docs/deprecated/tutorials-contest/2021/distributed-file-manager/frontend/IPFSViewer.js.md",sourceDirName:"deprecated/tutorials-contest/2021/distributed-file-manager/frontend",slug:"/deprecated/tutorials-contest/2021/distributed-file-manager/frontend/IPFSViewer.js",permalink:"/deprecated/tutorials-contest/2021/distributed-file-manager/frontend/IPFSViewer.js",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/tutorials-contest/2021/distributed-file-manager/frontend/IPFSViewer.js.md",tags:[],version:"current",frontMatter:{}},a={},f=[];function p(e){const n={code:"code",h1:"h1",pre:"pre",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"ipfsviewerjs",children:"IPFSViewer.js"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'import React from "react";\nimport App from "./App";\nimport IPFSViewerCSS from "./IPFSViewerCSS.css";\n\nclass IPFSViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageFiles: [],\n      videoFiles: [],\n      applicationFiles: [],\n      audioFiles: [],\n      otherFiles: [],\n    };\n  }\n\n  app = null;\n\n  async componentDidMount() {\n    this.app = new App();\n    await this.app.init();\n    await this.loadFiles();\n  }\n\n  loadFiles = async () => {\n    const files = await this.app.contract.getFiles(this.app.account[0]);\n    let imageFiles = [], videoFiles = [], audioFiles = [], applicationFiles = [], otherFiles = [];\n\n    files.forEach((file) => {\n      let type = file[2].split("/");\n      if (type[0] === "image") {\n        imageFiles.push(file);\n      } else if (type[0] === "video") {\n        videoFiles.push(file);\n      } else if (type[0] === "audio") {\n        audioFiles.push(file);\n      } else if (type[0] === "application") {\n        applicationFiles.push(file);\n      } else {\n        otherFiles.push(file);\n      }\n    });\n\n    this.setState({\n      imageFiles,\n      videoFiles,\n      audioFiles,\n      applicationFiles,\n      otherFiles,\n    });\n  };\n\n  showImageFiles = () => {\n    let fileComponent = [];\n\n    this.state.imageFiles.forEach((file) => {\n      let fileName;\n      if (file[1].length < 12) {\n        fileName = file[1];\n      } else {\n        fileName = file[1].substring(0, 6) + "..." + file[1].substring(file[1].length - 8, file[1].length);\n      }\n\n      fileComponent.push(\n        <a href={`https://ipfs.infura.io/ipfs/${file[3]}`}>\n          <img\n            alt={fileName}\n            src={`https://ipfs.infura.io/ipfs/${file[3]}`}\n            style={{\n              margin: "5px",\n              width: "200px",\n              height: "150px",\n              border: "solid white 2px",\n              borderRadius: "5px",\n            }}\n          />\n          <center>{fileName}</center>\n        </a>\n      );\n    });\n    return fileComponent;\n  };\n\n  showVideoFiles = () => {\n    let fileComponent = [];\n    this.state.videoFiles.forEach((file) => {\n      let fileName;\n      if (file[1].length < 12) {\n        fileName = file[1];\n      } else {\n        fileName = file[1].substring(0, 6) + "..." + file[1].substring(file[1].length - 8, file[1].length);\n      }\n      fileComponent.push(\n        <div>\n          <video\n            src={`https://ipfs.infura.io/ipfs/${file[3]}#t=0.1`}\n            controls\n            style={{\n              margin: "5px",\n              width: "290px",\n              height: "200px",\n              border: "solid white 2px",\n              borderRadius: "5px",\n            }}\n          />\n          <center>{fileName}</center>\n        </div>\n      );\n    });\n    return fileComponent;\n  };\n\n  showAudioFiles = () => {\n    let fileComponent = [];\n    this.state.audioFiles.forEach((file) => {\n      let fileName;\n      if (file[1].length < 12) {\n        fileName = file[1];\n      } else {\n        fileName = file[1].substring(0, 6) + "..." + file[1].substring(file[1].length - 8, file[1].length);\n      }\n      fileComponent.push(\n        <div>\n          <audio\n            src={`https://ipfs.infura.io/ipfs/${file[3]}#t=0.1`}\n            controls\n            style={{ margin: "10px" }}\n          />\n          <center>{fileName}</center>\n        </div>\n      );\n    });\n    return fileComponent;\n  };\n\n  showApplicationFiles = () => {\n    let fileComponent = [];\n    this.state.applicationFiles.forEach((file) => {\n      let fileName;\n      if (file[1].length < 12) {\n        fileName = file[1];\n      } else {\n        fileName = file[1].substring(0, 6) + "..." + file[1].substring(file[1].length - 8, file[1].length);\n      }\n      fileComponent.push(\n        <div style={{ width: "120px" }}>\n          <center\n            style={{ cursor: "pointer" }}\n            onClick={() => {\n              window.location.href = `https://ipfs.infura.io/ipfs/${file[3]}`;\n            }}\n          >\n            <a href={`https://ipfs.infura.io/ipfs/${file[3]}`}>\n              <img\n                alt={fileName}\n                src={\n                  "https://img2.pngio.com/filetype-docs-icon-material-iconset-zhoolego-file-icon-png-256_256.png"\n                }\n                style={{ width: "50px", height: "50px" }}\n              />\n              <br />\n              {fileName}\n            </a>\n          </center>\n        </div>\n      );\n    });\n    return fileComponent;\n  };\n\n  showOtherFiles = () => {\n    let fileComponent = [];\n    this.state.otherFiles.forEach((file) => {\n      let fileName;\n      if (file[1].length < 12) {\n        fileName = file[1];\n      } else {\n        fileName =\n          file[1].substring(0, 6) +\n          "..." +\n          file[1].substring(file[1].length - 8, file[1].length);\n      }\n      fileComponent.push(\n        <div style={{ width: "120px" }}>\n          <center style={{ cursor: "pointer" }}>\n            <a href={`https://ipfs.infura.io/ipfs/${file[3]}`}>\n              <img\n                alt={fileName}\n                src={\n                  "https://images.vexels.com/media/users/3/152864/isolated/preview/2e095de08301a57890aad6898ad8ba4c-yellow-circle-question-mark-icon-by-vexels.png"\n                }\n                style={{ width: "50px", height: "50px" }}\n              />\n              <br />\n              {fileName}\n            </a>\n          </center>\n        </div>\n      );\n    });\n    return fileComponent;\n  };\n\n  render() {\n    let imageFiles = this.showImageFiles(), videoFiles = this.showVideoFiles(), audioFiles = this.showAudioFiles(), applicationFiles = this.showApplicationFiles(), otherFiles = this.showOtherFiles();\n\n    return (\n      <div style={{ margin: "20px" }}>\n        <b style={{ color: "white" }}>Images</b> <br /><br />\n\n        <div\n          className={"imageViewer"}\n          style={{\n            color: "white",\n            height: "200px",\n            display: "flex",\n            overflowX: "scroll",\n          }}\n        >\n          {imageFiles.length === 0 ? "No files to show" : imageFiles}\n        </div> <br /><br />\n\n        <b style={{ color: "white" }}>Videos</b> <br /><br />\n        <div\n          className={"imageViewer"}\n          style={{\n            color: "white",\n            height: "250px",\n            display: "flex",\n            overflowX: "scroll",\n          }}\n        >\n          {videoFiles.length === 0 ? "No files to show" : videoFiles}\n        </div> <br /><br />\n\n        <b style={{ color: "white" }}>Audio</b> <br /><br />\n\n        <div\n          className={"imageViewer"}\n          style={{\n            color: "white",\n            height: "250px",\n            display: "flex",\n            overflowX: "scroll",\n          }}\n        >\n          {audioFiles.length === 0 ? "No files to show" : audioFiles}\n        </div> <br /><br />\n\n        <b style={{ color: "white" }}>Applications</b> <br /><br />\n\n        <div\n          className={"imageViewer"}\n          style={{\n            color: "white",\n            height: "150px",\n            display: "flex",\n            overflowX: "scroll",\n          }}\n        >\n          {applicationFiles.length === 0 ? "No files to show" : applicationFiles}\n        </div> <br /><br />\n\n        <b style={{ color: "white" }}>Others</b> <br /><br />\n\n        <div\n          className={"imageViewer"}\n          style={{\n            color: "white",\n            height: "150px",\n            display: "flex",\n            overflowX: "scroll",\n          }}\n        >\n          {otherFiles.length === 0 ? "No files to show" : otherFiles}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default IPFSViewer;\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>o});var t=i(67294);const l={},s=t.createContext(l);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);