"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[3577],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=o,d=u["".concat(l,".").concat(h)]||u[h]||m[h]||r;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2993:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={description:"ERC-20 tokens are the most fundamental and essential concept in Ethereum. This same token standard is adopted in the Lux ecosystem."},l="Create an ERC-20 Token Using Solidity",c={unversionedId:"dapps/smart-contracts/create-erc-20-token-on-lux-c-chain",id:"dapps/smart-contracts/create-erc-20-token-on-lux-c-chain",title:"Create an ERC-20 Token Using Solidity",description:"ERC-20 tokens are the most fundamental and essential concept in Ethereum. This same token standard is adopted in the Lux ecosystem.",source:"@site/docs/dapps/smart-contracts/create-erc-20-token-on-lux-c-chain.md",sourceDirName:"dapps/smart-contracts",slug:"/dapps/smart-contracts/create-erc-20-token-on-lux-c-chain",permalink:"/dapps/smart-contracts/create-erc-20-token-on-lux-c-chain",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/dapps/smart-contracts/create-erc-20-token-on-lux-c-chain.md",tags:[],version:"current",frontMatter:{description:"ERC-20 tokens are the most fundamental and essential concept in Ethereum. This same token standard is adopted in the Lux ecosystem."},sidebar:"dapps",previous:{title:"Smart Contracts Overview",permalink:"/dapps/smart-contracts/"},next:{title:"Deploy a Smart Contract on Lux Using Remix and MetaMask",permalink:"/dapps/smart-contracts/deploy-a-smart-contract-on-lux-using-remix-and-metamask"}},p={},m=[{value:"Set up Metamask",id:"set-up-metamask",level:2},{value:"Fund Your C-Chain Address",id:"fund-your-c-chain-address",level:2},{value:"Create Mintable Token",id:"create-mintable-token",level:2},{value:"Deploy the Contract",id:"deploy-the-contract",level:2},{value:"Interact with Token",id:"interact-with-token",level:2},{value:"Add Token to Metamask",id:"add-token-to-metamask",level:2}],u={toc:m};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-an-erc-20-token-using-solidity"},"Create an ERC-20 Token Using Solidity"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/docs/standards/tokens/erc-20/"},"ERC-20 tokens")," are the most fundamental and essential concept in Ethereum. As the Lux community and the ecosystem are growing, new use cases and projects that are running on Ethereum or different chains would be implemented to Lux."),(0,r.kt)("p",null,"Therefore, we will be creating our own mintable ERC-20 token and will mint it to any address we want. The token will be generated on Lux C-Chain and will be accessible on that chain. We are using Fuji Testnet in this tutorial."),(0,r.kt)("p",null,"The article focuses on deploying a smart contract written with Solidity to Lux. This is the feature that Lux provides us - to be able to deploy any smart contract to the chain and no requirement for a new language specific contract concept to interact. Let\u2019s look at how to create an ERC-20 contract and deploy it to lux C-Chain."),(0,r.kt)("h2",{id:"set-up-metamask"},"Set up Metamask"),(0,r.kt)("p",null,"The first thing we should set is a metamask wallet."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/408/0*0HGM4O_J5iF3943S",alt:"Image for post"})),(0,r.kt)("p",null,'Click to metamask icon on the browser and select the network drop-down menu. Here we should connect to C-Chain. Click to "Custom RPC".'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/989/1*Y7O1bBeTWnuQBAqTnwmqUQ.png",alt:"Image for post"})),(0,r.kt)("p",null,"Now, we need to set these boxes with correct values."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Network Name"),": Lux C-Chain"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"New RPC URL"),": ",(0,r.kt)("a",{parentName:"li",href:"https://api.lux-test.network/ext/bc/C/rpc"},"https://api.lux-test.network/ext/bc/C/rpc")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ChainID"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"43113")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Symbol"),": LUX"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Explorer"),": ",(0,r.kt)("a",{parentName:"li",href:"https://testnet.snowtrace.io/"},"https://testnet.snowtrace.io"))),(0,r.kt)("p",null,"After setting up all the parameters correctly, we should see this page. For now, we have 0 LUX."),(0,r.kt)("h2",{id:"fund-your-c-chain-address"},"Fund Your C-Chain Address"),(0,r.kt)("p",null,"For funding on the Fuji Testnet, you can use the Test Network Faucet. Navigate to ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.lux.network/"},"https://faucet.lux.network/")," and paste your C-Chain address."),(0,r.kt)("h2",{id:"create-mintable-token"},"Create Mintable Token"),(0,r.kt)("p",null,"Now, we can create our mintable token on Remix. Open Remix on your browser or go to ",(0,r.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/#optimize=false&evmVersion=null&version=soljson-v0.6.6+commit.6c089d02.js"},"this link"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1910/1*FWHtbWNXr6FvjzPHH93wvw.png",alt:"Image for post"})),(0,r.kt)("p",null,'You should view this page. On this page, first, click "SOLIDITY" from "Featured Plugins" and then click the "New File" button. When you click the New File button, you will see a pop-up that requires a file name. You can choose a name or leave the default.'),(0,r.kt)("p",null,"Since we will use an ERC-20 contract from ",(0,r.kt)("a",{parentName:"p",href:"https://openzeppelin.com/contracts/"},"OpenZeppelin"),", just paste this line to the file and save."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol";\n')),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1408/1*y1wpcCeB8PypnPfs-zhyBg.png",alt:"Image for post"})),(0,r.kt)("p",null,"After saving the file, we will see a bunch of files that are imported to remix. This is a remix feature that allows us to import a GitHub contract repository to remix by just giving the URL-link with an import statement."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1364/1*6pmdpKWiKj4RW-OcvMSijA.png",alt:"Image for post"})),(0,r.kt)("p",null,"We have ERC20PresetMinterPauser.sol file in the presets. This file is written by OpenZeppelin according to ERC20 standards with minter functionality. After deploying this file, we will be the owner of the contract and thus have the authority and ability to mint the tokens."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1398/1*5UcrRfoSwjpD29NyuMrrbA.png",alt:"Image for post"})),(0,r.kt)("h2",{id:"deploy-the-contract"},"Deploy the Contract"),(0,r.kt)("p",null,"Open the tab with label ",(0,r.kt)("inlineCode",{parentName:"p"},"Solidity compiler"),' and select the solidity version that matches with the solidity version written in file as "pragma solidity \u2026..". The version should be equal to or higher than the file\u2019s version. For example, in my file, "pragma solidity ^0.6.0" is written so the required version is 0.6.0 or higher. As shown, in the compiler the solidity version is 0.6.6, which is ok. After checking the solidity version click the compile button. If you did not change anything in the file, or the solidity version is not wrong, the contract should compile without any errors.'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1388/1*2jkDckFUJ4z3gMoLYZ_-PQ.png",alt:"Image for post"})),(0,r.kt)("p",null,"Then, let\u2019s jump to the tab with label ",(0,r.kt)("inlineCode",{parentName:"p"},"Deploy & run transactions"),'. Here before deploying our contract, we should change the environment. Click to the environment and select "Injected Web3". If a pop-up shows up and asks you to connect the account, click to connect. After, you should see the account address in the "ACCOUNT" textbox.'),(0,r.kt)("p",null,'The last thing before the deployment process is to set the contract that will be deployed as a token. Above the Deploy Button, there is a drop-down menu to select a contract. Select the contract named "ERC20PresetMinterPauser.sol".'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/383/1*s9LtZu4hSuPcVwVZsweZJA.png",alt:"Image for post"})),(0,r.kt)("p",null,'Now, here enter the name and symbol of your token. I will name it "test" and the symbol will be "tst". You can give it a and click to transact button.'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/593/1*ZKDEv_h_Pqfd3b7PAosXQw.png",alt:"Image for post"})),(0,r.kt)("p",null,"After clicking the button, a pop-up will show up and just confirm it."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/353/1*yOOQYZvESjSKx2qec5pYgA.png",alt:"Image for post"})),(0,r.kt)("p",null,"And then another pop-up, a metamask confirmation, appears. Confirm it."),(0,r.kt)("p",null,"After confirming all these pop-ups we have deployed our token to lux C-Chain. So we can start to interact with it."),(0,r.kt)("h2",{id:"interact-with-token"},"Interact with Token"),(0,r.kt)("p",null,"We can see our transaction that deployed on lux C-Chain via this ",(0,r.kt)("a",{parentName:"p",href:"https://testnet.snowtrace.io/"},"c-chain explorer"),"."),(0,r.kt)("p",null,"But firstly, let\u2019s see our transaction hash from the remix console."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1469/1*WTHSIfrDe9R_hk-C5GNq0g.png",alt:"Image for post"})),(0,r.kt)("p",null,"After deploying the contract, we should see a log in remix console. When you click to arrow and expand it, a transaction hash will come up. Copy it."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1909/1*NBXgtkYv2VfBkZx1OsBm7A.png",alt:"Image for post"})),(0,r.kt)("p",null,"Just paste the transaction hash to the ",(0,r.kt)("a",{parentName:"p",href:"https://testnet.snowtrace.io/"},"explorer")," I shared above and press enter."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/1907/1*6GhQaa_UaDvtk3Kvimi3aA.png",alt:"Image for post"})),(0,r.kt)("p",null,"Here we can see all details about the transaction and token contract."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/764/1*tTFQUn3fStbv-TW9kExyUg.png",alt:"Image for post"})),(0,r.kt)("p",null,'The first one is my wallet address that creates token and the second address is my token contract address which is named "test". Now, let\u2019s mint some token to our own address.'),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/607/1*K9eBNTQFkvUYjjmvegDZtQ.png",alt:"Image for post"})),(0,r.kt)("p",null,'Come back to the remix and after deploying, you should be able to see the contract in "Deployed Contracts" section.'),(0,r.kt)("p",null,"Here, we have a bunch of functions that we can use to interact with our token contract. You can check all these methods from OpenZeppelin documentation to learn how to use them. But we will only use the mint method."),(0,r.kt)("p",null,"Click to arrow beside the mint method to read it."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/577/1*GrxG6rsklrYN4xN1eF_ckw.png",alt:"Image for post"})),(0,r.kt)("p",null,'Enter your address and an amount in WEI. For example, I will mint 1000 tst token so, I entered "1000000000000000000000"'),(0,r.kt)("h2",{id:"add-token-to-metamask"},"Add Token to Metamask"),(0,r.kt)("p",null,'Now we minted 1000 token to our contract, but you should not be able to see the tokens in your metamask wallet. In order to see our own token, we have to add it. On metamask, click to "Add Token" button and select "Custom Token" tab.'),(0,r.kt)("p",null,"Here enter the token address that you can see from explorer as I showed above. Copy and paste it here. Then click on the Next button, you should see 1000 token that you named in your metamask wallet. Also, you can send it to another account via either remix or metamask."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://miro.medium.com/max/354/1*FM-PMUY7au61ejHJzBIsfg.png",alt:"Image for post"})))}h.isMDXComponent=!0}}]);