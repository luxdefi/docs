"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4904],{87097:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=s(85893),t=s(11151);const a={},l="Indexing an Lux Local Subnet with The Graph",r={id:"deprecated/tutorials-contest/2022/theGraph-index/README",title:"Indexing an Lux Local Subnet with The Graph",description:"These tutorials were published as a snapshot of when they were written,",source:"@site/docs/deprecated/tutorials-contest/2022/theGraph-index/README.md",sourceDirName:"deprecated/tutorials-contest/2022/theGraph-index",slug:"/deprecated/tutorials-contest/2022/theGraph-index/",permalink:"/deprecated/tutorials-contest/2022/theGraph-index/",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/tutorials-contest/2022/theGraph-index/README.md",tags:[],version:"current",frontMatter:{}},o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Lux Features 3 Built-in Blockchains",id:"lux-features-3-built-in-blockchains",level:2},{value:"The Graph Protocol",id:"the-graph-protocol",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Running an EVM Subnet on the Local Network Using the Lux-CLI",id:"running-an-evm-subnet-on-the-local-network-using-the-lux-cli",level:2},{value:"Installation",id:"installation",level:3},{value:"Initialising a Default Subnet",id:"initialising-a-default-subnet",level:3},{value:"Deploying the Subnet Locally",id:"deploying-the-subnet-locally",level:3},{value:"Configuring MetaMask",id:"configuring-metamask",level:3},{value:"Deploying Smart Contracts with Remix",id:"deploying-smart-contracts-with-remix",level:2},{value:"Indexing Our Subnet Using the Graph",id:"indexing-our-subnet-using-the-graph",level:2},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"indexing-an-lux-local-subnet-with-the-graph",children:"Indexing an Lux Local Subnet with The Graph"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"These tutorials were published as a snapshot of when they were written,\nand may contain out-of-date-information.\nFor up-to-date information, please reach out to the owners of these\nprojects."})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://www.lux.network/",children:"Lux"})," is an open-source platform for launching\ndecentralized applications and enterprise blockchain deployments in one\ninteroperable, highly scalable ecosystem. Lux is the first decentralized\nsmart contracts platform built for the scale of global finance, with\nnear-instant transaction finality. Lux is a blockchain that promises to\ncombine scaling capabilities and quick confirmation times through its Lux\nConsensus Protocol."]}),"\n",(0,i.jsx)(n.p,{children:"Blockchains have traditionally been referred to as being slow and unscalable.\nLux embraces an innovative approach to consensus that solve these problems\nwithout compromising on security."}),"\n",(0,i.jsx)(n.p,{children:"Lux is a high-performance, scalable, customizable, and secure blockchain\nplatform. It targets three 15 broad use cases:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Building application-specific blockchains, spanning permissioned (private) and permissionless (public)\ndeployments."}),"\n",(0,i.jsx)(n.li,{children:"Building and launching highly scalable and decentralized applications (dapps)."}),"\n",(0,i.jsx)(n.li,{children:"Building arbitrarily complex digital assets with custom rules, covenants, and riders (smart assets)."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"lux-features-3-built-in-blockchains",children:"Lux Features 3 Built-in Blockchains"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Exchange Chain (X-Chain)"}),"\n",(0,i.jsx)(n.li,{children:"Platform Chain (P-Chain)"}),"\n",(0,i.jsx)(n.li,{children:"Contract Chain (C-Chain)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The P-chain is for platform management. It handles requests related to the\nvalidator, the Subnet, and the blockchain. The C-chain is for contract\nmanagement. It is based on EVM; hence its API is almost identical to other EVM\nprotocols. It has both RPC and WebSocket endpoints, and it handles requests for\nsmart contracts. The X-chain is for asset exchange. It is Lux\u2019s native\nplatform; it is used for creating and trading assets like LUX and NFTs."}),"\n",(0,i.jsx)(n.p,{children:"These 3 blockchains are secured by the Lux Primary Network with is a special kind of Subnet."}),"\n",(0,i.jsx)(n.p,{children:"The Lux Architecture is composed of:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Subnetworks"}),"\n",(0,i.jsx)(n.li,{children:"Virtual Machines"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-graph-protocol",children:"The Graph Protocol"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://thegraph.com/",children:"The Graph"})," is an open-sourced indexing protocol for\norganising blockchain data and making it easily accessible using\n",(0,i.jsx)(n.a,{href:"https://graphql.org/",children:"GraphQL"}),". This software collects, processes and stores\ndata from various blockchain applications to facilitate efficient information\nretrieval. The Graph stored data into various indices called Subgraphs, allowing\napplications to query it. These queries are initiated using GraphQL, a language\noriginally created by facebook. The Graph has the ability to query networks like\nEthereum and IPFS. Anyone can build and publish open subgraphs."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"graph",src:s(82029).Z+"",title:"graph",width:"1480",height:"1208"})}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"NodeJS and Yarn"}),"\n",(0,i.jsxs)(n.p,{children:["First, install the LTS (long-term support) version of\n",(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"}),". This is ",(0,i.jsx)(n.code,{children:"18.x"})," at the time of writing. NodeJS\nbundles ",(0,i.jsx)(n.code,{children:"npm"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Next, install the ",(0,i.jsx)(n.a,{href:"https://yarnpkg.com",children:"yarn"})," package manager:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"npm install -g yarn\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Git"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"To check the current Git version use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"git --version\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial is created to serve as a guide to help developers setup an\nLux Subnet and Index them using GraphQL. We are going to learn how to run\na local network using the\n",(0,i.jsx)(n.a,{href:"https://github.com/luxdefi/cli",children:"Lux-CLI"})," and deploy a basic\nsmart contract using ",(0,i.jsx)(n.a,{href:"https://remix.ethereum.org/",children:"Remix"}),". Then Lastly we will\nbe indexing our Subnet using ",(0,i.jsx)(n.a,{href:"https://thegraph.com/",children:"The Graph"}),". This guide is\nan extension of the ",(0,i.jsx)(n.a,{href:"/build/subnet/deploy/local-subnet",children:"Official Lux Documentation"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Please note that all command line inputs and sample codes are MacOS and Linux\nBased. Commands may vary for other operating systems."}),"\n",(0,i.jsx)(n.p,{children:"In summary, we will be discussing the following:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Running an EVM Subnet on the Local Network using the Lux-CLI"}),"\n",(0,i.jsx)(n.li,{children:"Deploying smart contracts with Remix"}),"\n",(0,i.jsx)(n.li,{children:"Indexing our Subnet using The Graph"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"running-an-evm-subnet-on-the-local-network-using-the-lux-cli",children:"Running an EVM Subnet on the Local Network Using the Lux-CLI"}),"\n",(0,i.jsxs)(n.p,{children:["We will be creating an EVM on our local machine to give us a basic feel on how a\nSubnet functions. The ",(0,i.jsx)(n.a,{href:"https://github.com/luxdefi/cli",children:"Lux-CLI"}),"\nis a novel tool that allow us to have a local network up in minutes."]}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"Open up you MacOS command line utility and run the following command"}),"\n",(0,i.jsxs)(n.p,{children:["On your home directory, create a new directory and ",(0,i.jsx)(n.code,{children:"cd <newdir>"})," into the\ndirectory. This is where we will be installing all our project dependencies."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"curl -sSfL https://raw.githubusercontent.com/luxdefi/cli/main/scripts/install.sh | sh -s\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This command download the latest binary of the\n",(0,i.jsx)(n.a,{href:"https://github.com/luxdefi/cli",children:"Lux-CLI"})," to the current\ndirectory where it was executed."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"cd"})," into the ",(0,i.jsx)(n.code,{children:"bin"})," folder and export the path variable"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"cd bin\nexport PATH=$PWD:PATH\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This makes the ",(0,i.jsx)(n.code,{children:"lux"})," command available globally. For more information\nabout\n",(0,i.jsx)(n.a,{href:"https://apple.stackexchange.com/questions/106778/how-do-i-set-environment-variables-on-os-x",children:"environment-variables"}),"\nand\n",(0,i.jsx)(n.a,{href:"/tooling/cli",children:"Lux-CLI commands"}),"\nvisit the respective links."]}),"\n",(0,i.jsx)(n.h3,{id:"initialising-a-default-subnet",children:"Initialising a Default Subnet"}),"\n",(0,i.jsxs)(n.p,{children:["We will be using the ",(0,i.jsx)(n.code,{children:"lux subnet create"})," command line wizard to get our network running. ASAP.\nIn the same directory where the binary was installed, run the following command"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"lux subnet create <SubnetName>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Substitute ",(0,i.jsx)(n.code,{children:"<SubnetName>"})," with any preferred name of your choice but without\nspaces. For this tutorial we are going to call our Subnet ",(0,i.jsx)(n.code,{children:"<fibrinNet>"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"lux subnet create fibrinNet\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Since this command does not provide any arguments, you would need to walk\nthrough the configuration wizard to generate a ",(0,i.jsx)(n.code,{children:"genesis file"})," for your network."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Choose a Virtual Machine (VM):\n",(0,i.jsx)(n.img,{alt:"choose a VM",src:s(45703).Z+"",title:"Choose VM",width:"1328",height:"302"}),"\nWe are going to be making use of the ",(0,i.jsx)(n.code,{children:"SubnetEVM"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Pick a chain ID ",(0,i.jsx)(n.img,{alt:"chain ID",src:s(36327).Z+"",title:"Chain ID",width:"1338",height:"344"})," Every EVM based\nblockchain has a special parameter called a ",(0,i.jsx)(n.code,{children:"chainID"}),". ChainIDs are expected\nto be unique values, you can check ",(0,i.jsx)(n.a,{href:"https://chainlist.org/",children:"chainlist.org"})," to\nsee if your proposed chain ID is already in use. We will be making use of the\nchain ID ",(0,i.jsx)(n.code,{children:"1970"})," (A pun on JavaScript dates...lol)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Select a symbol for the native Subnet token\n",(0,i.jsx)(n.img,{alt:"symbol",src:s(5369).Z+"",title:"token symbol",width:"1336",height:"312"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Set fees: Select the ",(0,i.jsx)(n.code,{children:"low disk use / low throughput"})," option\n",(0,i.jsx)(n.img,{alt:"fees",src:s(64447).Z+"",title:"fees",width:"1336",height:"504"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Airdrop: default to airdrop 1 million tokens to provided address\n",(0,i.jsx)(n.img,{alt:"airdrop",src:s(31787).Z+"",title:"airdrop",width:"1338",height:"476"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add a custom precompile to modify the EVM: For this section, we will not be using a pre-compile script\n",(0,i.jsx)(n.img,{alt:"precompile",src:s(68137).Z+"",title:"precompile",width:"1336",height:"492"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The wizard won't customize every aspect of the Subnet-EVM genesis for you, we\nwill be doing this in the subsequent sections."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"complete",src:s(43010).Z+"",title:"complete",width:"1332",height:"424"})}),"\n",(0,i.jsx)(n.p,{children:"To view the list of all created Subnets, just execute the following command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"lux subnet list\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"list",src:s(40388).Z+"",title:"list",width:"980",height:"272"})}),"\n",(0,i.jsx)(n.h3,{id:"deploying-the-subnet-locally",children:"Deploying the Subnet Locally"}),"\n",(0,i.jsx)(n.p,{children:"To deploy the newly created Subnet locally, run the following command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"lux subnet deploy <SubnetName>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"deploy 1",src:s(28045).Z+"",title:"deploy",width:"1314",height:"282"})}),"\n",(0,i.jsx)(n.p,{children:"When a Subnet is run locally, it starts a multi-node (5 node) Lux Network in the background."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"deploy 2",src:s(84712).Z+"",title:"deploy_f",width:"1336",height:"1026"})}),"\n",(0,i.jsx)(n.h3,{id:"configuring-metamask",children:"Configuring MetaMask"}),"\n",(0,i.jsxs)(n.p,{children:["To test the functionality of the just created Subnet, go ahead and add the\nconfiguration details to ",(0,i.jsx)(n.a,{href:"https://metamask.io/",children:"MetaMask"}),". You can create a new\nMetaMask account by importing the private key\n",(0,i.jsx)(n.code,{children:"0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027"})," and start\nexperiencing with this account."]}),"\n",(0,i.jsxs)(n.p,{children:["I have a ",(0,i.jsx)(n.a,{href:"https://github.com/FibrinLab/Lux-Local-Environment-Setup",children:"GitHub\nTutorial"})," that\nexplains how to setup your local development environmet including ",(0,i.jsx)(n.code,{children:"MetaMask"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Lastly don't forget to stop the running local network"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"lux network stop <snapshotName>\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"deploy 2",src:s(52441).Z+"",title:"deploy_f",width:"1200",height:"174"})}),"\n",(0,i.jsx)(n.h2,{id:"deploying-smart-contracts-with-remix",children:"Deploying Smart Contracts with Remix"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Setting up Remix"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["We are going to be making use of an online IDE in compiling and deploying our\nsmart contract code, a tool called ",(0,i.jsx)(n.a,{href:"https://remix.ethereum.org/",children:"Remix"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Navigate to the ",(0,i.jsx)(n.a,{href:"https://remix.ethereum.org/",children:"Remix"})," platform and import the\ntest contract we will be making use of."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"github",src:s(42156).Z+"",title:"github",width:"1374",height:"1006"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"https://github.com/FibrinLab/example-subgraph/blob/master/contracts/Gravity.sol\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This repo contains the official sample subgraph for the ",(0,i.jsx)(n.a,{href:"https://en.gravatar.com/",children:"gravatar"})," registry."]})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Deployment Steps"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Compile and deploy the ",(0,i.jsx)(n.code,{children:"Gravity"})," smart contract using the Local Subnet you just\ncreated. To do this select the ",(0,i.jsx)(n.code,{children:"deploy"})," tab and choose ",(0,i.jsx)(n.code,{children:"injected web3"})," from the\ndropdown. `Please note that Remix automatically detects the appropriate\ncompiler version and makes use of it to compile your contract."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"remix1",src:s(91675).Z+"",title:"remix1",width:"926",height:"930"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"remix2",src:s(86767).Z+"",title:"remix2",width:"758",height:"958"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Always make sure to confirm the Environmet Chain ID is the same as that of your selected MetaMask account"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["With this all set go ahead and deploy your smart contract on your local Subnet\nby clicking the ",(0,i.jsx)(n.code,{children:"deploy"})," button. Approve the MetaMask request and pay the\nnecessary gas fees."]}),"\n",(0,i.jsx)(n.p,{children:"If the deployment is successful, you should see something like this ===>"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"deploy",src:s(86767).Z+"",title:"deploy",width:"758",height:"958"})}),"\n",(0,i.jsx)(n.p,{children:"Please take note of the deployment address as we will be making use of it subsequently."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"deploy2",src:s(64089).Z+"",title:"deploy2",width:"704",height:"1168"})}),"\n",(0,i.jsx)(n.h2,{id:"indexing-our-subnet-using-the-graph",children:"Indexing Our Subnet Using the Graph"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Installing Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["The most efficient way to make use of The Graph in indexing our Subnet is to\nhost a local Graph Node. This is pretty straightforward to setup once you got\nrequirements up and running. This tutorial is an extension of the\n",(0,i.jsx)(n.a,{href:"https://github.com/graphprotocol/graph-node",children:"Graph-Node"})," GitHub repository."]}),"\n",(0,i.jsx)(n.p,{children:"The following components are needed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Interplanetary File System (IPFS) for hosting our files.\n",(0,i.jsx)(n.a,{href:"https://docs.ipfs.io/install/",children:"Installation"})," instructions."]}),"\n",(0,i.jsxs)(n.li,{children:["PostgreSQL, a database management tool for keeping out data.\n",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/download/",children:"Installation"})," instructions."]}),"\n",(0,i.jsxs)(n.li,{children:["Rust, we will be building and compiling The Graph Node using the cargo package\nmanager. ",(0,i.jsx)(n.a,{href:"https://www.rust-lang.org/en-US/install.html",children:"Installation"}),"\ninstructions."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"If the above installation instructions are followed correctly, you should\nhave these tools up and running."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ipfs",src:s(41141).Z+"",title:"ipfs",width:"2532",height:"1546"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ipfs2",src:s(26373).Z+"",title:"ipfs2",width:"2724",height:"1532"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Deploying Resources"}),"\n",(0,i.jsx)(n.p,{children:"After successfully installing IPFS, initialise the daemon by running"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"ipfs init\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"ipfs3",src:s(29728).Z+"",title:"ipfs3",width:"972",height:"122"})}),"\n",(0,i.jsx)(n.p,{children:"Next run,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"ipfs daemon\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"ipfs4",src:s(1663).Z+"",title:"ipfs4",width:"1050",height:"758"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Its now time to get our database all set-up."}),"\n",(0,i.jsx)(n.p,{children:"Run the following commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"initdb -D .postgres\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"pg_ctl -D .postgres -l logfile start\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"createdb graph-node\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Configuring up the Graph Node"}),"\n",(0,i.jsxs)(n.p,{children:["Clone and build ",(0,i.jsx)(n.code,{children:"The Graph"})," node folder"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"git clone https://github.com/graphprotocol/graph-node\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"The repository cloning method used is HTTPS, but SSH can be used too:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"git clone git@github.com:graphprotocol/graph-node.git"})}),(0,i.jsxs)(n.p,{children:["You can find more about SSH and how to use it\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh",children:"here"}),"."]})]}),"\n",(0,i.jsx)(n.p,{children:"Build the folder by running"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"cargo build\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you have successfully installed Rust but ",(0,i.jsx)(n.code,{children:"the command is not found"}),", you would\nneed to setup some environmental variables. Running this command might help."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"source $HOME/.cargo/env\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once all dependencies are up and running, run the following command to kick start the node."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"cargo run -p graph-node --release -- \\\n--postgres-url postgresql://postgres:*fill-in-posgresql-username: :*fill-in-posgresql-password @localhost:5432/graph-node \\\n--ethereum-rpc testnet:http://127.0.0.1:9650/ext/bc/*fill-in-your-blockchain-id/rpc \\\n--ipfs 127.0.0.1:5001\n"})}),"\n",(0,i.jsx)(n.p,{children:"Before running the above make sure you replace the following:\n*fill-in-posgresql-username ==> Your Database username. `Defaults to [Postgres]\n*fill-in-posgresql-password ==> Your Database password."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"node",src:s(43866).Z+"",title:"node",width:"1618",height:"126"})}),"\n",(0,i.jsx)(n.p,{children:"If everything goes smoothly. You should get this."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"success",src:s(5477).Z+"",title:"success",width:"1874",height:"546"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Deploying the subgraph"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This is where things get interesting. Change directory into the ",(0,i.jsx)(n.code,{children:"example-subgraph"})," folder"]}),"\n",(0,i.jsx)(n.p,{children:"Clone the official subgraph repository and install all the dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"git clone https://github.com/graphprotocol/example-subgraph\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"The repository cloning method used is HTTPS, but SSH can be used too:"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"git clone git@github.com:graphprotocol/example-subgraph.git"})}),(0,i.jsxs)(n.p,{children:["You can find more about SSH and how to use it\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh",children:"here"}),"."]})]}),"\n",(0,i.jsx)(n.p,{children:"Next, generate the ABI typings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"yarn\nyarn codegen\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Open you the ",(0,i.jsx)(n.code,{children:"subgraph.yaml"})," file and make 2 (two) modifications under ",(0,i.jsx)(n.code,{children:"datasources"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Switch the network to ",(0,i.jsx)(n.code,{children:"local"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"local",src:s(55354).Z+"",title:"local",width:"448",height:"144"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Input the address of the deployed ",(0,i.jsx)(n.code,{children:"Gravity"})," contract in the ",(0,i.jsx)(n.code,{children:"address"})," field"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"address",src:s(6041).Z+"",title:"address",width:"894",height:"104"})}),"\n",(0,i.jsx)(n.p,{children:"Finally, run the following"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"yarn create-local\nyarn deploy-local\n"})}),"\n",(0,i.jsx)(n.p,{children:"Congratulations, you have successfully deployed a Sub-Graph on a locally deployed Subnet."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"done",src:s(29592).Z+"",title:"done",width:"1304",height:"1416"})}),"\n",(0,i.jsx)(n.p,{children:"After successful deployment, you graph node would need a few minutes to scan all the nodes."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"done2",src:s(89990).Z+"",title:"done2",width:"1902",height:"946"})}),"\n",(0,i.jsx)(n.p,{children:"Once its done, open up the provided link in the browser."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"graph",src:s(96215).Z+"",title:"graph",width:"1096",height:"210"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Open up the link and try running a query by filling this into the query box."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zsh",children:"query MyQuery {\n  gravatars {\n    id\n    imageUrl\n    displayName\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Watch the magic happen."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"graph1",src:s(17096).Z+"",title:"graph1",width:"2600",height:"1090"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["In summary, we have deployed a Local Subnet using the Lux-cli. We further\nwent ahead to deploy smart contracts, run a Graph node and Index our nodes using\n",(0,i.jsx)(n.code,{children:"The Graph"}),". How cool is that? lol."]}),"\n",(0,i.jsx)(n.p,{children:"Feel free to fork this repository and build great stuff."}),"\n",(0,i.jsx)(n.p,{children:"Cheers and Happy Coding."}),"\n",(0,i.jsx)(n.p,{children:"Akanimoh Osutuk"})]})}function d(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28045:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/10-f3a7f5d2b59e0815d4bb141bb521f88e.png"},84712:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/11-b88e0e4d8ba90252687ab92d45d2a6ed.png"},52441:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/12-a9c731d50c30667e9f7e3909507d8a02.png"},45703:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/2-ec1aae61e38ed600c1c9214c8565ea81.png"},82029:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/21-8ac1a2e5c8c5956fbfc69fdaab50348a.png"},42156:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/22-ee32188515c5f21a6ba07798c2966ad0.png"},91675:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/23-7fe1779c4b4faa98f48909d878016fd3.png"},86767:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/24-d495f476f3888c084760043a8821c5be.png"},64089:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/25-d279b6408b5072d0ca3f2a3491c56e21.png"},41141:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/26-d51da2ffacf98e9fe3ab232d20ce2318.png"},26373:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/27-c719b90e4330df2e3e12b5c66ecd01c1.png"},29728:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/28-b5eb8e05c1c01eff842ecd318f3eb664.png"},1663:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/29-b44f3d4e82446350c8a5e9b8e7534b0d.png"},36327:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/3-5d41a48ce4195a73654ebc15da2c73bb.png"},43866:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/30-df679a21c909131084be028d9138cd04.png"},5477:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/31-c036b574a8a56ad13a214840a895a2dd.png"},55354:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/32-eaa9cc7549d38bbc2dcfacb7847be6be.png"},6041:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/33-159f860c2a280b2575c98b33159160d9.png"},29592:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/34-bd8b88cab01da5e9921c1c2f02f9a627.png"},89990:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/35-b75966c973e53396de191f9a982d32a3.png"},96215:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/36-6b20550e4afd06d4f5f3c26f70643137.png"},17096:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/37-23a9499ed4dce873a25d1a338e41011b.png"},5369:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/4-5834e2b9b83794e240429fe8494a62aa.png"},64447:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/5-3cc87ef7bee7c05c02a7c1589e52f439.png"},31787:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/6-2d9bccac3195703d21b2d2925cf037af.png"},68137:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/7-b10983a6d2f6417583009ff0d2a92e1a.png"},43010:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/8-a8b8ddb4b1b47f77d8ed38c7a408cbc4.png"},40388:(e,n,s)=>{s.d(n,{Z:()=>i});const i=s.p+"assets/images/9-27f62beba94ca679d87e69009a42d345.png"},11151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>l});var i=s(67294);const t={},a=i.createContext(t);function l(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);