"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[7505],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,i(i({ref:e},p),{},{components:n})):a.createElement(m,i({ref:e},p))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},188:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={},c="Verifying Smart Contracts Using Hardhat and Snowtrace",l={unversionedId:"dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace",id:"dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace",title:"Verifying Smart Contracts Using Hardhat and Snowtrace",description:"This tutorial assumes that the contract was deployed using Hardhat and that all Hardhat dependencies are properly installed.",source:"@site/docs/dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace.md",sourceDirName:"dapps/smart-contracts",slug:"/dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace",permalink:"/dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/dapps/smart-contracts/verify-smart-contract-using-hardhat-and-snowtrace.md",tags:[],version:"current",frontMatter:{},sidebar:"dapps",previous:{title:"Using Truffle with the Lux C-Chain",permalink:"/dapps/smart-contracts/using-truffle-with-the-lux-c-chain"},next:{title:"Verifying Smart Contracts with Truffle Verify",permalink:"/dapps/smart-contracts/verify-smart-contracts-with-truffle-verify"}},p={},u=[{value:"Flatten a Smart Contract using Hardhat",id:"flatten-a-smart-contract-using-hardhat",level:2},{value:"Clean up the flattened Smart Contract",id:"clean-up-the-flattened-smart-contract",level:2},{value:"Verify the Smart Contract using Snowtrace",id:"verify-the-smart-contract-using-snowtrace",level:2},{value:"Verifying with Hardhat-Verify",id:"verifying-with-hardhat-verify",level:2}],d={toc:u};function h(t){var e=t.components,s=(0,r.Z)(t,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,s,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"verifying-smart-contracts-using-hardhat-and-snowtrace"},"Verifying Smart Contracts Using Hardhat and Snowtrace"),(0,o.kt)("p",null,"This tutorial assumes that the contract was deployed using Hardhat and that all Hardhat dependencies are properly installed."),(0,o.kt)("p",null,"After deploying a smart contract one can verify the smart contract on Snowtrace in three steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Flatten the Smart Contract"),(0,o.kt)("li",{parentName:"ol"},"Clean up the flattened contract"),(0,o.kt)("li",{parentName:"ol"},"Verify using the Snowtrace GUI")),(0,o.kt)("h2",{id:"flatten-a-smart-contract-using-hardhat"},"Flatten a Smart Contract using Hardhat"),(0,o.kt)("p",null,"To flatten the contract run the command:\n",(0,o.kt)("inlineCode",{parentName:"p"},"npx hardhat flatten <path-to-contract> >> <flat-contract-name>.sol")),(0,o.kt)("h2",{id:"clean-up-the-flattened-smart-contract"},"Clean up the flattened Smart Contract"),(0,o.kt)("p",null,"Some clean-up may be necessary to get the code to compile properly in the Snowtrace Contract Verifier"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove all but the top SPDX license."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If the contract uses multiple SPDX licenses, use both licenses by adding AND:\n",(0,o.kt)("inlineCode",{parentName:"li"},"SPDX-License-Identifier: MIT AND BSD-3-Clause"))))),(0,o.kt)("h2",{id:"verify-the-smart-contract-using-snowtrace"},"Verify the Smart Contract using Snowtrace"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Search for the contract in Snowtrace")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click on the contract tab"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If the contract is unverified you will see something similar to the image below\n",(0,o.kt)("img",{alt:"snowtraceHH-1",src:n(7347).Z,width:"2772",height:"1594"}))),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click Verify and Publish")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"On the next screen in the dropdown menus select the following"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Solidity (Single file)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"The compiler version you used to compile the deployed contract")),(0,o.kt)("li",{parentName:"ol"},"The open-source license type (select none if applicable)\n",(0,o.kt)("img",{alt:"snowtraceHH-2",src:n(6241).Z,width:"2769",height:"1654"}))),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Copy and paste the code from the flattened contract into the appropriate box")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"If optimization was used when compiling the contract, make sure to select \u201cYes\u201d in the dropdown menu labeled \u201cOptimization\u201d")),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If optimization was used, expand the bottom box labeled \u201cMisc Settings\u201d and input the number of runs\n",(0,o.kt)("img",{alt:"snowtraceHH-3",src:n(5278).Z,width:"2769",height:"1976"}))),(0,o.kt)("br",null)),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select Verify and Publish"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"If successful, all Contracts with the same bytecode will be verified"),(0,o.kt)("li",{parentName:"ol"},"If unsuccessful, read the error messages provided and make the appropriate changes",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Ensure to check that the compiler version and optimizer runs are the same as when you compiled the contract prior to deployment")))))),(0,o.kt)("h2",{id:"verifying-with-hardhat-verify"},"Verifying with Hardhat-Verify"),(0,o.kt)("p",null,"This part of the tutorial assumes that the contract was deployed using Hardhat and that all Hardhat dependencies are properly installed to include ",(0,o.kt)("inlineCode",{parentName:"p"},"'@nomiclabs/hardhat-etherscan'"),"."),(0,o.kt)("p",null,"You will need to create a ",(0,o.kt)("inlineCode",{parentName:"p"},".env.json")," with your ",(0,o.kt)("em",{parentName:"p"},"Wallet Seed Phrase")," and ",(0,o.kt)("em",{parentName:"p"},"Snowtrace API key")),(0,o.kt)("p",null,"You will need to obtain an ",(0,o.kt)("em",{parentName:"p"},"API key")," ",(0,o.kt)("a",{parentName:"p",href:"https://snowtrace.io/myapikey"},"here")),(0,o.kt)("p",null,"Example ",(0,o.kt)("inlineCode",{parentName:"p"},".env.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "MNEMONIC": "your-wallet-seed-phrase",\n  "APIKEY": "your-snowtrace-api-key"\n}\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Below is a sample ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," used for deployment and verification (See LN 45: ",(0,o.kt)("inlineCode",{parentName:"p"},"etherscan"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { task } from "hardhat/config"\nimport { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers"\nimport { BigNumber } from "ethers"\nimport "@typechain/hardhat"\nimport "@nomiclabs/hardhat-ethers"\nimport "@nomiclabs/hardhat-waffle"\nimport "hardhat-gas-reporter"\nimport "@nomiclabs/hardhat-etherscan"\nimport { MNEMONIC, APIKEY } from "./.env.json"\n\n// When using the hardhat network, you may choose to fork Fuji or Lux Mainnet\n// This will allow you to debug contracts using the hardhat network while keeping the current network state\n// To enable forking, turn one of these booleans on, and then run your tasks/scripts using ``--network hardhat``\n// For more information go to the hardhat guide\n// https://hardhat.org/hardhat-network/\n// https://hardhat.org/guides/mainnet-forking.html\nconst FORK_FUJI = false\nconst FORK_MAINNET = false\nconst forkingData = FORK_FUJI\n  ? {\n      url: "https://api.lux-test.network/ext/bc/C/rpc",\n    }\n  : FORK_MAINNET\n  ? {\n      url: "https://api.lux.network/ext/bc/C/rpc",\n    }\n  : undefined\n\ntask(\n  "accounts",\n  "Prints the list of accounts",\n  async (args, hre): Promise<void> => {\n    const accounts: SignerWithAddress[] = await hre.ethers.getSigners()\n    accounts.forEach((account: SignerWithAddress): void => {\n      console.log(account.address)\n    })\n  }\n)\n\ntask(\n  "balances",\n  "Prints the list of LUX account balances",\n  async (args, hre): Promise<void> => {\n    const accounts: SignerWithAddress[] = await hre.ethers.getSigners()\n    for (const account of accounts) {\n      const balance: BigNumber = await hre.ethers.provider.getBalance(\n        account.address\n      )\n      console.log(`${account.address} has balance ${balance.toString()}`)\n    }\n  }\n)\nexport default {\n  etherscan: {\n    // Your API key for Snowtrace\n    // Obtain one at https://snowtrace.io/\n    apiKey: APIKEY,\n  },\n\n  solidity: {\n    compilers: [\n      {\n        version: "0.8.0",\n      },\n      {\n        version: "0.8.10",\n      },\n    ],\n  },\n  networks: {\n    hardhat: {\n      gasPrice: 225000000000,\n      chainId: 43114, //Only specify a chainId if we are not forking\n      // forking: {\n      //   url: \'https://api.lux.network/ext/bc/C/rpc\',\n      // },\n    },\n    fuji: {\n      url: "https://api.lux-test.network/ext/bc/C/rpc",\n      gasPrice: 225000000000,\n      chainId: 43113,\n      accounts: { mnemonic: MNEMONIC },\n    },\n    mainnet: {\n      url: "https://api.lux.network/ext/bc/C/rpc",\n      gasPrice: 225000000000,\n      chainId: 43114,\n      accounts: { mnemonic: MNEMONIC },\n    },\n  },\n}\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"Once the contract is deployed, verify with hardhat verify by running the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"npx hardhat verify <contract address> <arguments> --network <network>\n")),(0,o.kt)("br",null),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"npx hardhat verify 0x3972c87769886C4f1Ff3a8b52bc57738E82192D5 MockNFT Mock ipfs://QmQ2RFEmZaMds8bRjZCTJxo4DusvcBdLTS6XuDbhp5BZjY 100 --network fuji\n")),(0,o.kt)("br",null),(0,o.kt)("p",null,"You can also verify contracts programmatically via script"),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import console from "console"\nconst hre = require("hardhat")\n\n// Define the NFT\nconst name = "MockNFT"\nconst symbol = "Mock"\nconst _metadataUri = "ipfs://QmQ2RFEmZaMds8bRjZCTJxo4DusvcBdLTS6XuDbhp5BZjY"\nconst _maxTokens = "100"\n\nasync function main() {\n  await hre.run("verify:verify", {\n    address: "0x3972c87769886C4f1Ff3a8b52bc57738E82192D5",\n    constructorArguments: [name, symbol, _metadataUri, _maxTokens],\n  })\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n')),(0,o.kt)("br",null),(0,o.kt)("p",null,"First create your script, then execute it via hardhat by running the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"npx hardhat run scripts/<scriptname.ts> --network <network>\n")),(0,o.kt)("br",null),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"npx hardhat run scripts/5-verifyNFT.ts --network fuji\n")),(0,o.kt)("br",null),(0,o.kt)("p",null,"Verifying via terminal will not allow you to pass an array as an argument, however, you can do this when verifying via script by including the array in your ",(0,o.kt)("em",{parentName:"p"},"Constructor Arguments")),(0,o.kt)("p",null,"Example: (see LN13 ",(0,o.kt)("inlineCode",{parentName:"p"},"_custodians"),", LN 30 ",(0,o.kt)("inlineCode",{parentName:"p"},"_custodians"),")"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import console from "console"\nconst hre = require("hardhat")\n\n// Define the NFT\nconst name = "MockNFT"\nconst symbol = "Mock"\nconst _metadataUri =\n  "ipfs://QmQn2jepp3jZ3tVxoCisMMF8kSi8c5uPKYxd71xGWG38hV/Example"\nconst _royaltyRecipient = "0xcd3b766ccdd6ae721141f452c550ca635964ce71"\nconst _royaltyValue = "50000000000000000"\nconst _custodians = [\n  "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199",\n  "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",\n  "0xdd2fd4581271e230360230f9337d5c0430bf44c0",\n]\nconst _saleLength = "172800"\nconst _claimAddress = "0xcd3b766ccdd6ae721141f452c550ca635964ce71"\n\nasync function main() {\n  await hre.run("verify:verify", {\n    address: "0x08bf160B8e56899723f2E6F9780535241F145470",\n    constructorArguments: [\n      name,\n      symbol,\n      _metadataUri,\n      _royaltyRecipient,\n      _royaltyValue,\n      _custodians,\n      _saleLength,\n      _claimAddress,\n    ],\n  })\n}\n\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error)\n    process.exit(1)\n  })\n')))}h.isMDXComponent=!0},7347:function(t,e,n){e.Z=n.p+"assets/images/snowtraceHH-1-e4f04982257829a986af9872bc90bb90.png"},6241:function(t,e,n){e.Z=n.p+"assets/images/snowtraceHH-2-16991748dedf595398467d3b644d0f7f.png"},5278:function(t,e,n){e.Z=n.p+"assets/images/snowtraceHH-3-58d4b2f985f59b7b21bab3e067467677.png"}}]);