"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[1532],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return h}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},x={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),h=i,c=u["".concat(l,".").concat(h)]||u[h]||x[h]||s;return t?a.createElement(c,r(r({ref:n},p),{},{components:t})):a.createElement(c,r({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,r=new Array(s);r[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var d=2;d<s;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5718:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return x}});var a=t(7462),i=t(3366),s=(t(7294),t(3905)),r=["components"],o={},l="Network Protocol",d={unversionedId:"specs/network-protocol",id:"specs/network-protocol",title:"Network Protocol",description:"Lux network defines the core communication format between Lux nodes. It uses the primitive serialization format for payload packing.",source:"@site/docs/specs/network-protocol.md",sourceDirName:"specs",slug:"/specs/network-protocol",permalink:"/specs/network-protocol",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/specs/network-protocol.md",tags:[],version:"current",frontMatter:{},sidebar:"specs",previous:{title:"Cryptographic Primitives",permalink:"/specs/cryptographic-primitives"},next:{title:"Serialization Primitives",permalink:"/specs/serialization-primitives"}},p={},x=[{value:"GetVersion",id:"getversion",level:2},{value:"What GetVersion contains",id:"what-getversion-contains",level:3},{value:"How GetVersion is handled",id:"how-getversion-is-handled",level:3},{value:"When GetVersion is sent",id:"when-getversion-is-sent",level:3},{value:"Version",id:"version",level:2},{value:"What Version contains",id:"what-version-contains",level:3},{value:"How Version is handled",id:"how-version-is-handled",level:3},{value:"When Version is sent",id:"when-version-is-sent",level:3},{value:"Version Example",id:"version-example",level:3},{value:"GetPeers",id:"getpeers",level:2},{value:"Overview",id:"overview",level:3},{value:"What GetPeers contains",id:"what-getpeers-contains",level:3},{value:"How GetPeers is handled",id:"how-getpeers-is-handled",level:3},{value:"When GetPeers is sent",id:"when-getpeers-is-sent",level:3},{value:"Peers",id:"peers",level:2},{value:"Overview",id:"overview-1",level:3},{value:"What Peers contains",id:"what-peers-contains",level:3},{value:"How Peers is handled",id:"how-peers-is-handled",level:3},{value:"When Peers is sent",id:"when-peers-is-sent",level:3},{value:"Peers Example",id:"peers-example",level:3},{value:"Get",id:"get",level:2},{value:"Overview",id:"overview-2",level:3},{value:"What Get contains",id:"what-get-contains",level:3},{value:"How Get is handled",id:"how-get-is-handled",level:3},{value:"When Get is sent",id:"when-get-is-sent",level:3},{value:"Get Example",id:"get-example",level:3},{value:"Put",id:"put",level:2},{value:"Overview",id:"overview-3",level:3},{value:"What Put contains",id:"what-put-contains",level:3},{value:"How Put is handled",id:"how-put-is-handled",level:3},{value:"When Put is sent",id:"when-put-is-sent",level:3},{value:"Put Example",id:"put-example",level:3},{value:"PushQuery",id:"pushquery",level:2},{value:"Overview",id:"overview-4",level:3},{value:"What PushQuery contains",id:"what-pushquery-contains",level:3},{value:"How PushQuery is handled",id:"how-pushquery-is-handled",level:3},{value:"When PushQuery is sent",id:"when-pushquery-is-sent",level:3},{value:"PushQuery Example",id:"pushquery-example",level:3},{value:"PullQuery",id:"pullquery",level:2},{value:"Overview",id:"overview-5",level:3},{value:"What PullQuery contains",id:"what-pullquery-contains",level:3},{value:"How PullQuery is handled",id:"how-pullquery-is-handled",level:3},{value:"When PullQuery is sent",id:"when-pullquery-is-sent",level:3},{value:"PullQuery Example",id:"pullquery-example",level:3},{value:"Chits",id:"chits",level:2},{value:"Overview",id:"overview-6",level:3},{value:"What Chits contains",id:"what-chits-contains",level:3},{value:"How Chits is handled",id:"how-chits-is-handled",level:3},{value:"When Chits is sent",id:"when-chits-is-sent",level:3},{value:"Chits Example",id:"chits-example",level:3}],u={toc:x};function h(e){var n=e.components,t=(0,i.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"network-protocol"},"Network Protocol"),(0,s.kt)("p",null,"Lux network defines the core communication format between Lux nodes. It uses the ",(0,s.kt)("a",{parentName:"p",href:"/specs/serialization-primitives"},"primitive serialization")," format for payload packing."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},'"Containers"')," are mentioned extensively in the description. A Container is simply a generic term for blocks or vertices, without needing to specify whether the consensus algorithm is DAG or Chain."),(0,s.kt)("h2",{id:"getversion"},"GetVersion"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"GetVersion")," requests for a ",(0,s.kt)("inlineCode",{parentName:"p"},"Version")," message to be sent as a response."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"GetVersion")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x00"),"."),(0,s.kt)("h3",{id:"what-getversion-contains"},"What GetVersion contains"),(0,s.kt)("p",null,"The payload of a ",(0,s.kt)("inlineCode",{parentName:"p"},"GetVersion")," message is empty."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[]\n")),(0,s.kt)("h3",{id:"how-getversion-is-handled"},"How GetVersion is handled"),(0,s.kt)("p",null,"A node receiving a ",(0,s.kt)("inlineCode",{parentName:"p"},"GetVersion")," message must respond with a ",(0,s.kt)("inlineCode",{parentName:"p"},"Version")," message containing the current time and node version."),(0,s.kt)("h3",{id:"when-getversion-is-sent"},"When GetVersion is sent"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"GetVersion")," is sent when a node is connected to another node, but has not yet received a ",(0,s.kt)("inlineCode",{parentName:"p"},"Version")," message. It may, however, be re-sent at any time."),(0,s.kt)("h2",{id:"version"},"Version"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Version")," ensures that the nodes we are connected to are running compatible versions of Lux, and at least loosely agree on the current time."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"Version")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x01"),"."),(0,s.kt)("h3",{id:"what-version-contains"},"What Version contains"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Version")," contains the node\u2019s current time in Unix time format in number of milliseconds since the beginning of the epoch in 01/01/1970, as well as a version string describing the version of the code that the node is running."),(0,s.kt)("p",null,"Content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Long   <- Unix Timestamp (Seconds)\n    String <- Version String\n]\n")),(0,s.kt)("h3",{id:"how-version-is-handled"},"How Version is handled"),(0,s.kt)("p",null,"If the versions are incompatible or the current times differ too much, the connection will be terminated."),(0,s.kt)("h3",{id:"when-version-is-sent"},"When Version is sent"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Version")," is sent in response to a ",(0,s.kt)("inlineCode",{parentName:"p"},"GetVersion")," message."),(0,s.kt)("h3",{id:"version-example"},"Version Example"),(0,s.kt)("p",null,"Sending a ",(0,s.kt)("inlineCode",{parentName:"p"},"Version")," message with the time ",(0,s.kt)("inlineCode",{parentName:"p"},"November 16th, 2008 at 12:00am (UTC)")," and the version ",(0,s.kt)("inlineCode",{parentName:"p"},"lux/0.0.1")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'[\n    Long   <- 1226793600 = 0x00000000491f6280\n    String <- "lux/0.0.1"\n]\n=\n[\n    0x00, 0x00, 0x00, 0x00, 0x49, 0x1f, 0x62, 0x80,\n    0x00, 0x0f, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e,\n    0x63, 0x68, 0x65, 0x2f, 0x30, 0x2e, 0x30, 0x2e,\n    0x31,\n]\n')),(0,s.kt)("h2",{id:"getpeers"},"GetPeers"),(0,s.kt)("h3",{id:"overview"},"Overview"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"GetPeers")," requests that a ",(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," message be sent as a response."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"GetPeers")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x02"),"."),(0,s.kt)("h3",{id:"what-getpeers-contains"},"What GetPeers contains"),(0,s.kt)("p",null,"The payload of a ",(0,s.kt)("inlineCode",{parentName:"p"},"GetPeers")," message is empty."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[]\n")),(0,s.kt)("h3",{id:"how-getpeers-is-handled"},"How GetPeers is handled"),(0,s.kt)("p",null,"A node receiving ",(0,s.kt)("inlineCode",{parentName:"p"},"GetPeers")," request must respond with a ",(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," message containing the IP addresses of its connected, staking nodes."),(0,s.kt)("h3",{id:"when-getpeers-is-sent"},"When GetPeers is sent"),(0,s.kt)("p",null,"A node sends ",(0,s.kt)("inlineCode",{parentName:"p"},"GetPeers")," messages upon startup to discover the participants in the network. It may also periodically send ",(0,s.kt)("inlineCode",{parentName:"p"},"GetPeers")," messages in order to discover new nodes as they arrive in the network."),(0,s.kt)("h2",{id:"peers"},"Peers"),(0,s.kt)("h3",{id:"overview-1"},"Overview"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," message contains a list of peers, represented as IP Addresses. Note that an IP Address contains both the IP and the port number, and supports both IPv4 and IPv6 format."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x03"),"."),(0,s.kt)("h3",{id:"what-peers-contains"},"What Peers contains"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," contains the IP addresses of the staking nodes this node is currently connected to."),(0,s.kt)("p",null,"Content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Variable Length IP Address Array\n]\n")),(0,s.kt)("h3",{id:"how-peers-is-handled"},"How Peers is handled"),(0,s.kt)("p",null,"On receiving a ",(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," message, a node should compare the nodes appearing in the message to its own list of neighbors, and forge connections to any new nodes."),(0,s.kt)("h3",{id:"when-peers-is-sent"},"When Peers is sent"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," messages do not need to be sent in response to a ",(0,s.kt)("inlineCode",{parentName:"p"},"GetPeers")," message, and are sent periodically to announce newly arriving nodes. The default period for such push gossip is 60 seconds."),(0,s.kt)("h3",{id:"peers-example"},"Peers Example"),(0,s.kt)("p",null,"Sending a ",(0,s.kt)("inlineCode",{parentName:"p"},"Peers")," message with the IP addresses ",(0,s.kt)("inlineCode",{parentName:"p"},'"127.0.0.1:9650"')," and ",(0,s.kt)("inlineCode",{parentName:"p"},'"[2001:0db8:ac10:fe01::]:12345"')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},'[\n    Variable Length IP Address Array <- ["127.0.0.1:9650", "[2001:0db8:ac10:fe01::]:12345"]\n]\n=\n[\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,\n    0x7f, 0x00, 0x00, 0x01, 0x25, 0xb2, 0x20, 0x01,\n    0x0d, 0xb8, 0xac, 0x10, 0xfe, 0x01, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n]\n')),(0,s.kt)("h2",{id:"get"},"Get"),(0,s.kt)("h3",{id:"overview-2"},"Overview"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"Get")," message requests a container, that is, block or vertex, from a node."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"Get")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x04"),"."),(0,s.kt)("h3",{id:"what-get-contains"},"What Get contains"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"Get")," message contains a ",(0,s.kt)("inlineCode",{parentName:"p"},"SubnetID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestID"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"SubnetID"))," defines which Subnets this message is destined for."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"RequestID"))," is a counter that helps keep track of the messages sent by a node. Each time a node sends an un-prompted message, the node will create a new unique ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestID")," for the message."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"ContainerID"))," is the identifier of the requested container."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Length 32 Byte Array <- SubnetID\n    UInt                 <- RequestID\n    Length 32 Byte Array <- ContainerID\n]\n")),(0,s.kt)("h3",{id:"how-get-is-handled"},"How Get is handled"),(0,s.kt)("p",null,"The node should reply with a ",(0,s.kt)("inlineCode",{parentName:"p"},"Put")," message with the same ",(0,s.kt)("inlineCode",{parentName:"p"},"SubnetID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestID"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID")," along with the ",(0,s.kt)("inlineCode",{parentName:"p"},"Container")," with the specified identifier. Under correct situations, a node should only be asked for a container that it has. Therefore, if the node does not have the specified container, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Get")," message can safely be dropped."),(0,s.kt)("h3",{id:"when-get-is-sent"},"When Get is sent"),(0,s.kt)("p",null,"A node will send a ",(0,s.kt)("inlineCode",{parentName:"p"},"Get")," message to a node that tells us about the existence of a container. For example, suppose we have two nodes: Rick and Morty. If Rick sends a ",(0,s.kt)("inlineCode",{parentName:"p"},"PullQuery")," message that contains a ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),", that Morty doesn\u2019t have the container for, then Morty will send a Get message containing the missing ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),"."),(0,s.kt)("h3",{id:"get-example"},"Get Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    SubnetID    <- 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\n    RequestID   <- 43110 = 0x0000A866\n    ContainerID <- 0x2122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40\n]\n=\n[\n    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,\n    0x00, 0x00, 0xa8, 0x66, 0x21, 0x22, 0x23, 0x24,\n    0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c,\n    0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34,\n    0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,\n    0x3d, 0x3e, 0x3f, 0x40,\n]\n")),(0,s.kt)("h2",{id:"put"},"Put"),(0,s.kt)("h3",{id:"overview-3"},"Overview"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"Put")," message provides a requested container to a node."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"Put")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x05"),"."),(0,s.kt)("h3",{id:"what-put-contains"},"What Put contains"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"Put")," message contains a ",(0,s.kt)("inlineCode",{parentName:"p"},"SubnetID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"Container"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"SubnetID"))," defines which Subnets this message is destined for."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"RequestID"))," is a counter that helps keep track of the messages sent by a node."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"ContainerID"))," is the identifier of the container this message is sending."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Container"))," is the bytes of the container this message is sending."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Length 32 Byte Array       <- SubnetID\n    UInt                       <- RequestID\n    Length 32 Byte Array       <- ContainerID\n    Variable Length Byte Array <- Container\n]\n")),(0,s.kt)("h3",{id:"how-put-is-handled"},"How Put is handled"),(0,s.kt)("p",null,"The node should attempt to add the container to consensus."),(0,s.kt)("h3",{id:"when-put-is-sent"},"When Put is sent"),(0,s.kt)("p",null,"A node will send a ",(0,s.kt)("inlineCode",{parentName:"p"},"Put")," message in response to receiving a Get message for a container the node has access to."),(0,s.kt)("h3",{id:"put-example"},"Put Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    SubnetID    <- 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\n    RequestID   <- 43110 = 0x0000A866\n    ContainerID <- 0x5ba080dcf6861c94c24ec62bc09a3c8b0fdd4691ebf02491e0e921dd0c77206f\n    Container   <- 0x2122232425\n]\n=\n[\n    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,\n    0x00, 0x00, 0xa8, 0x66, 0x5b, 0xa0, 0x80, 0xdc,\n    0xf6, 0x86, 0x1c, 0x94, 0xc2, 0x4e, 0xc6, 0x2b,\n    0xc0, 0x9a, 0x3c, 0x8b, 0x0f, 0xdd, 0x46, 0x91,\n    0xeb, 0xf0, 0x24, 0x91, 0xe0, 0xe9, 0x21, 0xdd,\n    0x0c, 0x77, 0x20, 0x6f, 0x00, 0x00, 0x00, 0x05,\n    0x21, 0x22, 0x23, 0x24, 0x25,\n]\n")),(0,s.kt)("h2",{id:"pushquery"},"PushQuery"),(0,s.kt)("h3",{id:"overview-4"},"Overview"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"PushQuery")," message requests the preferred containerIDs from the node after the specified ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID")," has been added to consensus. If the ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID")," is not known, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Container")," is optimistically provided."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"PushQuery")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x06"),"."),(0,s.kt)("h3",{id:"what-pushquery-contains"},"What PushQuery contains"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"PushQuery")," message contains a ",(0,s.kt)("inlineCode",{parentName:"p"},"SubnetID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"Container"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"SubnetID"))," defines which Subnets this message is destined for."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"RequestID"))," is a counter that helps keep track of the messages sent by a node."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"ContainerID"))," is the identifier of the container this message expects to have been added to consensus before the response is sent."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Container"))," is the bytes of the container with identifier ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Length 32 Byte Array       <- SubnetID\n    UInt                       <- RequestID\n    Length 32 Byte Array       <- ContainerID\n    Variable Length Byte Array <- Container\n]\n")),(0,s.kt)("h3",{id:"how-pushquery-is-handled"},"How PushQuery is handled"),(0,s.kt)("p",null,"The node should attempt to add the container to consensus. After the container is added to consensus, a ",(0,s.kt)("inlineCode",{parentName:"p"},"Chits")," message should be sent with the current preference(s) of the node."),(0,s.kt)("h3",{id:"when-pushquery-is-sent"},"When PushQuery is sent"),(0,s.kt)("p",null,"A node should send a ",(0,s.kt)("inlineCode",{parentName:"p"},"PushQuery")," message if it wants to learn of this node\u2019s current preferences and it feels that it is possible the node hasn\u2019t learned of ",(0,s.kt)("inlineCode",{parentName:"p"},"Container"),' yet. The node will want to learn of nodes preferences when it learns of a new container or it has had pending containers for "awhile".'),(0,s.kt)("h3",{id:"pushquery-example"},"PushQuery Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    SubnetID    <- 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\n    RequestID   <- 43110 = 0x0000A866\n    ContainerID <- 0x5ba080dcf6861c94c24ec62bc09a3c8b0fdd4691ebf02491e0e921dd0c77206f\n    Container   <- 0x2122232425\n]\n=\n[\n    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,\n    0x00, 0x00, 0xa8, 0x66, 0x5b, 0xa0, 0x80, 0xdc,\n    0xf6, 0x86, 0x1c, 0x94, 0xc2, 0x4e, 0xc6, 0x2b,\n    0xc0, 0x9a, 0x3c, 0x8b, 0x0f, 0xdd, 0x46, 0x91,\n    0xeb, 0xf0, 0x24, 0x91, 0xe0, 0xe9, 0x21, 0xdd,\n    0x0c, 0x77, 0x20, 0x6f, 0x00, 0x00, 0x00, 0x05,\n    0x21, 0x22, 0x23, 0x24, 0x25,\n]\n")),(0,s.kt)("h2",{id:"pullquery"},"PullQuery"),(0,s.kt)("h3",{id:"overview-5"},"Overview"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"PullQuery")," message requests the preferred containerIDs from the node after the specified ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID")," has been added to consensus."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"PullQuery")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x07"),"."),(0,s.kt)("h3",{id:"what-pullquery-contains"},"What PullQuery contains"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"PullQuery")," message contains a ",(0,s.kt)("inlineCode",{parentName:"p"},"SubnetID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestID"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"SubnetID"))," defines which Subnets this message is destined for."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"RequestID"))," is a counter that helps keep track of the messages sent by a node."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"ContainerID"))," is the identifier of the container this message expects to have been added to consensus before the response is sent."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Length 32 Byte Array <- SubnetID\n    UInt                 <- RequestID\n    Length 32 Byte Array <- ContainerID\n]\n")),(0,s.kt)("h3",{id:"how-pullquery-is-handled"},"How PullQuery is handled"),(0,s.kt)("p",null,"If the node hasn\u2019t added ",(0,s.kt)("inlineCode",{parentName:"p"},"ContainerID"),", it should attempt to add the container to consensus. After the container is added to consensus, a ",(0,s.kt)("inlineCode",{parentName:"p"},"Chits")," message should be sent with the current preference(s) of the node."),(0,s.kt)("h3",{id:"when-pullquery-is-sent"},"When PullQuery is sent"),(0,s.kt)("p",null,"A node should send a ",(0,s.kt)("inlineCode",{parentName:"p"},"PullQuery")," message if it wants to learn of this node\u2019s current preferences and it feels that it quite likely the node has already learned of ",(0,s.kt)("inlineCode",{parentName:"p"},"Container"),'. The node will want to learn of nodes preferences when it learns of a new container or it has had pending containers for "awhile".'),(0,s.kt)("h3",{id:"pullquery-example"},"PullQuery Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    SubnetID    <- 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\n    RequestID   <- 43110 = 0x0000A866\n    ContainerID <- 0x5ba080dcf6861c94c24ec62bc09a3c8b0fdd4691ebf02491e0e921dd0c77206f\n]\n=\n[\n    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n    0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n    0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,\n    0x00, 0x00, 0xa8, 0x66, 0x5b, 0xa0, 0x80, 0xdc,\n    0xf6, 0x86, 0x1c, 0x94, 0xc2, 0x4e, 0xc6, 0x2b,\n    0xc0, 0x9a, 0x3c, 0x8b, 0x0f, 0xdd, 0x46, 0x91,\n    0xeb, 0xf0, 0x24, 0x91, 0xe0, 0xe9, 0x21, 0xdd,\n    0x0c, 0x77, 0x20, 0x6f,\n]\n")),(0,s.kt)("h2",{id:"chits"},"Chits"),(0,s.kt)("h3",{id:"overview-6"},"Overview"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"Chits")," message provides a requested set of preferred container(s) to a node."),(0,s.kt)("p",null,"The OpCode used by ",(0,s.kt)("inlineCode",{parentName:"p"},"Chits")," messages is: ",(0,s.kt)("inlineCode",{parentName:"p"},"0x08"),"."),(0,s.kt)("h3",{id:"what-chits-contains"},"What Chits contains"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"Chits")," message contains a ",(0,s.kt)("inlineCode",{parentName:"p"},"SubnetID"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"RequestID"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"Preferences"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"SubnetID"))," defines which Subnets this message is destined for."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"RequestID"))," is a counter that helps keep track of the messages sent by a node."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"Preferences"))," is the list of containerIDs that fully describe the node\u2019s preferences."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Length 32 Byte Array                         <- SubnetID\n    UInt                                         <- RequestID\n    Variable Length (Length 32 Byte Array) Array <- Preferences\n]\n")),(0,s.kt)("h3",{id:"how-chits-is-handled"},"How Chits is handled"),(0,s.kt)("p",null,"The node should attempt to add any referenced containers to consensus. If the referenced containers can\u2019t be added, the node can ignore the missing containers and apply the remaining chits to the poll. Once a poll is completed, container confidences should be updated appropriately."),(0,s.kt)("h3",{id:"when-chits-is-sent"},"When Chits is sent"),(0,s.kt)("p",null,"A node will send a ",(0,s.kt)("inlineCode",{parentName:"p"},"Chits")," message in response to receiving a ",(0,s.kt)("inlineCode",{parentName:"p"},"PullQuery")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"PushQuery")," message for a container the node has added to consensus."),(0,s.kt)("h3",{id:"chits-example"},"Chits Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"[\n    SubnetID    <- 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\n    RequestID   <- 43110 = 0x0000A866\n    Preferences <- [\n        0x2122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40,\n        0x4142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f60,\n    ]\n]\n=\n[\n        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n        0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,\n        0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,\n        0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,\n        0x00, 0x00, 0xa8, 0x66, 0x00, 0x00, 0x00, 0x02,\n        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,\n        0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,\n        0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,\n        0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40,\n        0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,\n        0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,\n        0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,\n        0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60,\n]\n")))}h.isMDXComponent=!0}}]);