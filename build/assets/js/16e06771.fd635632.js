"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5674],{9879:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=e(85893),i=e(11151);const a={},c="ActiveElections.js",s={id:"deprecated/tutorials-contest/2021/evoting-dapp/frontend/ActiveElections.js",title:"ActiveElections.js",description:"",source:"@site/docs/deprecated/tutorials-contest/2021/evoting-dapp/frontend/ActiveElections.js.md",sourceDirName:"deprecated/tutorials-contest/2021/evoting-dapp/frontend",slug:"/deprecated/tutorials-contest/2021/evoting-dapp/frontend/ActiveElections.js",permalink:"/deprecated/tutorials-contest/2021/evoting-dapp/frontend/ActiveElections.js",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/main/docs/deprecated/tutorials-contest/2021/evoting-dapp/frontend/ActiveElections.js.md",tags:[],version:"current",frontMatter:{}},l={},d=[];function r(n){const t={code:"code",h1:"h1",pre:"pre",...(0,i.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"activeelectionsjs",children:"ActiveElections.js"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import React, { Component } from "react";\nimport { Loader } from "rimble-ui";\nimport { Link } from "react-router-dom";\n\nimport App from "./App";\nimport ElectionJSON from "./build/contracts/Election.json";\nimport VoteModal from "./VoteModal";\n\n// Election component for organising election details\nlet Election = (props) => (\n  <tr>\n    <td>{props.election.electionId}</td>\n\n    <td>\n      {props.election.electionName} <br />\n      <font className="text-muted" size="2">\n        <b>{props.election.electionDescription}</b>\n      </font>\n      <br />\n      <font className="text-muted" size="2">\n        {props.election.electionAddress}\n      </font>\n    </td>\n\n    <td style={{ textAlign: "center" }}>{props.candidateComponent}</td>\n\n    <td style={{ textAlign: "center" }}>\n      {!props.election.hasVoted ? (\n        // Vote Modal would be mounted if the user has not voted\n        <VoteModal election={props.election} candidates={props.candidates} />\n      ) : (\n        <font size="2" color="green">\n          You have voted!\n        </font>\n      )}\n    </td>\n  </tr>\n);\n\n// Candidate component for organising candidate details of each candidate\nlet Candidates = (props) => (\n  <font size="2">\n    <b>{props.name}</b> ({props.voteCount}) <br />\n  </font>\n);\n\n// ActiveElections component would fetch and display all the the elections deployed by the MainContract.sol\nclass ActiveElections extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      loading: false,\n    };\n  }\n\n  // To store App.js instance\n  app = null;\n\n  // Connect application with Metamask and create smart-contract\'s instance\n  async init() {\n    this.app = new App();\n    await this.app.init();\n    await this.loadData();\n  }\n\n  loader = false;\n\n  componentDidMount() {\n    this.init();\n  }\n\n  loadData = async () => {\n    this.setState({ loading: true });\n\n    // electionId maps to total elections created\n    let eCount = await this.app.mainInstance.electionId();\n    let elections = [], electionDetails = [], electionComponents = [];\n\n    // Election details of every election created by MainContract\n    for (let i = 0; i < eCount; i++) {\n      elections[i] = await this.app.mainInstance.Elections(i);\n      let election = await new this.app.web3.eth.Contract(ElectionJSON.abi, elections[i]);\n\n      electionDetails[i] = [];\n\n      // Account address of the voter\n      electionDetails[i].account = this.app.account[0];\n\n      // Each contract\'s instance\n      electionDetails[i].contractInstance = election;\n\n      // Address of each election contract\n      electionDetails[i].electionAddress = elections[i];\n\n      // Boolean indicating whether the contract address has voted or not\n      electionDetails[i].hasVoted = await election.methods.voters(this.app.account[0]).call();\n\n      // Name of the election\n      electionDetails[i].electionName = await election.methods.name().call();\n\n      // Description of the election\n      electionDetails[i].electionDescription = await election.methods.description().call();\n\n      // Election id\n      electionDetails[i].electionId = i;\n\n      // Organising candidates into components\n      let candidatesCount = await election.methods.candidatesCount().call();\n      let candidates = [], candidateComponents = [];\n      candidates[i] = [];\n      candidateComponents[i] = [];\n\n      for (let j = 0; j < candidatesCount; j++) {\n        candidates[i].push(await election.methods.candidates(j).call());\n        candidateComponents[i].push(\n          <Candidates\n            name={candidates[i][j][1]}\n            voteCount={candidates[i][j][2]}\n          />\n        );\n      }\n\n      // Saving the electionDetails in the form of a component\n      electionComponents[i] = (\n        <Election\n          election={electionDetails[i]}\n          candidates={candidates[i]}\n          candidateComponent={candidateComponents[i]}\n        />\n      );\n    }\n\n    this.setState({\n      data: electionComponents,\n      loading: false,\n    });\n  };\n\n  render() {\n    return (\n      // Simple container to store table with election data\n      <div className="container">\n        <div style={{ float: "right", marginBottom: "10px" }}>\n          <img\n            style={{ width: "25px", marginRight: "20px", cursor: "pointer" }}\n            onClick={this.loadData}\n            src="https://img.icons8.com/color/50/000000/synchronize.png"\n          />\n          <Link to="/createElection">\n            <img\n              style={{ width: "25px", cursor: "pointer" }}\n              src="https://img.icons8.com/color/48/000000/plus-math.png"\n            />\n          </Link>\n        </div>\n\n        <table className="table table-hover table-bordered">\n          <thead>\n            <tr>\n              <th style={{ width: "120px" }}>Election ID</th>\n              <th>Election Name</th>\n              <th style={{ textAlign: "center" }}>Candiates</th>\n              <th style={{ textAlign: "center" }}>Vote</th>\n            </tr>\n          </thead>\n\n          <tbody>{this.state.data}</tbody>\n        </table>\n\n        <center>{this.state.loading ? <Loader size="40px" /> : <></>}</center>\n      </div>\n    );\n  }\n}\n\nexport default ActiveElections;\n'})})]})}function p(n={}){const{wrapper:t}={...(0,i.a)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(r,{...n})}):r(n)}},11151:(n,t,e)=>{e.d(t,{Z:()=>s,a:()=>c});var o=e(67294);const i={},a=o.createContext(i);function c(n){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function s(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),o.createElement(a.Provider,{value:t},n.children)}}}]);