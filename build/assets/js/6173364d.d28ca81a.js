"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[4730],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,f=m["".concat(l,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7094:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:7,decription:"In this doc, learn how to run offline pruning on your node to reduce its disk usage."},l="Subnet Configs",p={unversionedId:"nodes/maintain/subnet-configs",id:"nodes/maintain/subnet-configs",title:"Subnet Configs",description:"It is possible to provide parameters for a Subnet. Parameters here apply to all chains in the specified Subnet.",source:"@site/docs/nodes/maintain/subnet-configs.md",sourceDirName:"nodes/maintain",slug:"/nodes/maintain/subnet-configs",permalink:"/nodes/maintain/subnet-configs",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/nodes/maintain/subnet-configs.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,decription:"In this doc, learn how to run offline pruning on your node to reduce its disk usage."},sidebar:"nodes",previous:{title:"Chain Configs",permalink:"/nodes/maintain/chain-config-flags"},next:{title:"Run C-Chain Offline Pruning",permalink:"/nodes/maintain/run-offline-pruning"}},d={},u=[{value:"Parameters",id:"parameters",level:2},{value:"Private Subnet",id:"private-subnet",level:3},{value:"<code>validatorOnly</code> (bool):",id:"validatoronly-bool",level:4},{value:"Consensus Parameters",id:"consensus-parameters",level:3},{value:"Gossip Configs",id:"gossip-configs",level:3}],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"subnet-configs"},"Subnet Configs"),(0,o.kt)("p",null,"It is possible to provide parameters for a Subnet. Parameters here apply to all chains in the specified Subnet."),(0,o.kt)("p",null,"Luxd looks for files specified with ",(0,o.kt)("inlineCode",{parentName:"p"},"{subnetID}.json")," under ",(0,o.kt)("inlineCode",{parentName:"p"},"--subnet-config-dir")," as documented ",(0,o.kt)("a",{parentName:"p",href:"/nodes/maintain/luxd-config-flags#subnet-configs"},"here"),"."),(0,o.kt)("p",null,"Here is an example of Subnet config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "validatorOnly": false,\n  "consensusParameters": {\n    "k": 25,\n    "alpha": 18\n  },\n  "appGossipNonValidatorSize": 10\n}\n')),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("h3",{id:"private-subnet"},"Private Subnet"),(0,o.kt)("h4",{id:"validatoronly-bool"},(0,o.kt)("inlineCode",{parentName:"h4"},"validatorOnly")," (bool):"),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," this node does not expose Subnet blockchain contents to non-validators via P2P messages. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("p",null,"Lux Subnets are public by default. It means that every node can sync and listen ongoing transactions/blocks in Subnets, even they're not validating the listened Subnet."),(0,o.kt)("p",null,"Subnet validators can choose not to publish contents of blockchains via this configuration. If a node sets ",(0,o.kt)("inlineCode",{parentName:"p"},"validatorOnly")," to true, the node exchanges messages only with this Subnet's validators. Other peers will not be able to learn contents of this Subnet from this node."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"This is a node-specific configuration. Every validator of this Subnet has to use this configuration in order to create a full private Subnet.")),(0,o.kt)("h3",{id:"consensus-parameters"},"Consensus Parameters"),(0,o.kt)("p",null,"Subnet configs supports loading new consensus parameters. JSON keys are different from their matching ",(0,o.kt)("inlineCode",{parentName:"p"},"CLI")," keys. These parameters must be grouped under ",(0,o.kt)("inlineCode",{parentName:"p"},"consensusParameters")," key. The consensus parameters of a Subnet default to the same values used for the Primary Network, which are given ",(0,o.kt)("a",{parentName:"p",href:"/nodes/maintain/luxd-config-flags#snow-parameters"},"CLI Snow Parameters"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"CLI Key"),(0,o.kt)("th",{parentName:"tr",align:"left"},"JSON Key"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-sample-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"k")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-quorum-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"alpha")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-virtuous-commit-threshold"),(0,o.kt)("td",{parentName:"tr",align:"left"},"betaVirtuous")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-rogue-commit-threshold"),(0,o.kt)("td",{parentName:"tr",align:"left"},"betaRogue")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-concurrent-repolls"),(0,o.kt)("td",{parentName:"tr",align:"left"},"concurrentRepolls")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-optimal-processing"),(0,o.kt)("td",{parentName:"tr",align:"left"},"optimalProcessing")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-max-processing"),(0,o.kt)("td",{parentName:"tr",align:"left"},"maxOutstandingItems")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-max-time-processing"),(0,o.kt)("td",{parentName:"tr",align:"left"},"maxItemProcessingTime")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-mixed-query-num-push-vdr"),(0,o.kt)("td",{parentName:"tr",align:"left"},"mixedQueryNumPushVdr")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-mixed-query-num-push-non-vdr"),(0,o.kt)("td",{parentName:"tr",align:"left"},"mixedQueryNumPushNondVdr")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-lux-batch-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"batchSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--snow-lux-num-parents"),(0,o.kt)("td",{parentName:"tr",align:"left"},"parentSize")))),(0,o.kt)("h3",{id:"gossip-configs"},"Gossip Configs"),(0,o.kt)("p",null,"It's possible to define different Gossip configurations for each Subnet without changing values for Primary Network. For example in Primary Network transaction mempools are not gossipped to non-validators (",(0,o.kt)("inlineCode",{parentName:"p"},"--consensus-app-gossip-non-validator-size")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"). You can change this for your Subnet and share mempool with non-validators as well. JSON keys of these parameters are different from their matching ",(0,o.kt)("inlineCode",{parentName:"p"},"CLI")," keys. These parameters default to the same values used for the Primary Network. For more information see ",(0,o.kt)("a",{parentName:"p",href:"/nodes/maintain/luxd-config-flags#gossiping"},"CLI Gossip Configs"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"CLI Key"),(0,o.kt)("th",{parentName:"tr",align:"left"},"JSON Key"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-accepted-frontier-gossip-validator-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"gossipAcceptedFrontierValidatorSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-accepted-frontier-gossip-non-validator-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"gossipAcceptedFrontierNonValidatorSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-accepted-frontier-gossip-peer-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"gossipAcceptedFrontierPeerSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-on-accept-gossip-validator-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"gossipOnAcceptValidatorSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-on-accept-gossip-non-validator-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"gossipOnAcceptNonValidatorSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-on-accept-gossip-peer-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"gossipOnAcceptPeerSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-app-gossip-validator-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"appGossipValidatorSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-app-gossip-non-validator-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"appGossipNonValidatorSize")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},"--consensus-app-gossip-peer-size"),(0,o.kt)("td",{parentName:"tr",align:"left"},"appGossipPeerSize")))))}c.isMDXComponent=!0}}]);