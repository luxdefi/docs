"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1285],{71608:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=t(85893),i=t(11151);const o={},s="CreateElection.js",r={id:"deprecated/tutorials-contest/2021/evoting-dapp/frontend/CreateElection.js",title:"CreateElection.js",description:"",source:"@site/docs/deprecated/tutorials-contest/2021/evoting-dapp/frontend/CreateElection.js.md",sourceDirName:"deprecated/tutorials-contest/2021/evoting-dapp/frontend",slug:"/deprecated/tutorials-contest/2021/evoting-dapp/frontend/CreateElection.js",permalink:"/deprecated/tutorials-contest/2021/evoting-dapp/frontend/CreateElection.js",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/master/docs/deprecated/tutorials-contest/2021/evoting-dapp/frontend/CreateElection.js.md",tags:[],version:"current",frontMatter:{}},c={},l=[];function d(n){const e={code:"code",h1:"h1",pre:"pre",...(0,i.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:"createelectionjs",children:"CreateElection.js"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-jsx",children:'import React, { Component } from "react";\nimport App from "./App";\n\nclass CreateElection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeElectionName = this.onChangeElectionName.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    // These state variables would maintain inputs of the form\n    this.state = {\n      electionname: "",\n      description: "",\n      candidates: [],\n    };\n  }\n\n  // To store App.js instance\n  app = null;\n\n  // Connect application with Metamask and create smart-contract\'s instance\n  async init() {\n    this.app = new App();\n    await this.app.init();\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  onChangeElectionName(e) {\n    this.setState({\n      electionname: e.target.value,\n    });\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value,\n    });\n  }\n\n  // Function to be called when the form is submitted\n  async onSubmit(e) {\n    e.preventDefault();\n\n    // Structuring Election details from the form before submitting transaction to the smart-contract\n    const electionDetails = {\n      electionname: this.state.electionname,\n      description: this.state.description,\n      candidateObjects: document.getElementsByName("candidate").values(),\n      candidates: [],\n    };\n\n    let i = 0;\n\n    for (let value of electionDetails.candidateObjects) {\n      electionDetails.candidates[i] = value.value;\n      i++;\n    }\n\n    // Making transaction to the MainContract instance, for creating a new election\n    await this.app.mainInstance.createElection(\n      [electionDetails.electionname, electionDetails.description],\n      electionDetails.candidates,\n      { from: this.app.account[0] }\n    );\n\n    window.location = "/active";\n  }\n\n  render() {\n    return (\n      <div className="container card">\n        <h3>Create New Election</h3>\n\n        {/* New Election Form */}\n        <form onSubmit={this.onSubmit}>\n          <div className="form-group">\n            <label>Name</label>\n            <input\n              type="text"\n              required\n              className="form-control"\n              placeholder="Enter election name"\n              onChange={this.onChangeElectionName}\n            />\n          </div>\n\n          <div className="form-group">\n            <label>Description</label>\n            <textarea\n              type="text"\n              required\n              className="form-control"\n              placeholder="Describe your Election here"\n              onChange={this.onChangeDescription}\n            ></textarea>\n          </div>\n\n          <table>\n            <tr>\n              <td id="1" className="form-group">\n                <label>Candidate 1</label>\n                <td>\n                  <input\n                    type="text"\n                    required\n                    className="form-control"\n                    placeholder="Candidate Name"\n                    name="candidate"\n                  />\n                </td>\n\n                <br />\n                <label>Candidate 2</label>\n                <td>\n                  <input\n                    type="text"\n                    required\n                    className="form-control"\n                    placeholder="Candidate Name"\n                    name="candidate"\n                  />\n                </td>\n              </td>\n            </tr>\n          </table>\n\n          <br />\n\n          <div>\n            <button\n              className="btn btn-success grid-item"\n              style={{ width: 100 }}\n              type="submit"\n            >\n              Submit\n            </button>\n          </div>\n\n          <br />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default CreateElection;\n'})})]})}function p(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>s});var a=t(67294);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);