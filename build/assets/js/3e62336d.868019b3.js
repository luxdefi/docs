"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2626],{3156:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var s=t(85893),a=t(11151);const r={},i="Create a Chat Dapp Using Solidity and ReactJS",d={id:"deprecated/tutorials-contest/2021/lux-chat-dapp/README",title:"Create a Chat Dapp Using Solidity and ReactJS",description:"These tutorials were published as a snapshot of when they were written,",source:"@site/docs/deprecated/tutorials-contest/2021/lux-chat-dapp/README.md",sourceDirName:"deprecated/tutorials-contest/2021/lux-chat-dapp",slug:"/deprecated/tutorials-contest/2021/lux-chat-dapp/",permalink:"/deprecated/tutorials-contest/2021/lux-chat-dapp/",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/master/docs/deprecated/tutorials-contest/2021/lux-chat-dapp/README.md",tags:[],version:"current",frontMatter:{}},o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Implementing the Smart Contract",id:"implementing-the-smart-contract",level:2},{value:"Account Creation",id:"account-creation",level:2},{value:"Adding Friends",id:"adding-friends",level:2},{value:"Messaging",id:"messaging",level:2},{value:"User Data Collections",id:"user-data-collections",level:2},{value:"Deploying the Smart Contract",id:"deploying-the-smart-contract",level:2},{value:"Setting up MetaMask",id:"setting-up-metamask",level:2},{value:"Deploy Using Remix",id:"deploy-using-remix",level:2},{value:"Creating a Frontend in React",id:"creating-a-frontend-in-react",level:2},{value:"Walkthrough",id:"walkthrough",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Transaction Failure",id:"transaction-failure",level:2},{value:"Application Crash",id:"application-crash",level:2},{value:"About the Authors",id:"about-the-authors",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"create-a-chat-dapp-using-solidity-and-reactjs",children:"Create a Chat Dapp Using Solidity and ReactJS"}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"These tutorials were published as a snapshot of when they were written,\nand may contain out-of-date-information.\nFor up-to-date information, please reach out to the owners of these\nprojects."})}),"\n",(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"In this tutorial we will build a decentralized chat application on Lux's\nTestnet test-network from scratch. The dapp will allow users to connect with other\npeople and chat with them. We will develop our smart contract using Solidity\nwhich will be deployed on Lux's C-chain. We will have a basic, easy-to-use\nUI developed using ReactJS. So, let us begin!"}),"\n",(0,s.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Basic familiarity with ",(0,s.jsx)(n.a,{href:"https://reactjs.org/",children:"ReactJS"})," and ",(0,s.jsx)(n.a,{href:"https://soliditylang.org/",children:"Solidity"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://nodejs.org/en/download/releases/",children:"Node.js"})," v10.18.0+"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://metamask.io/download.html",children:"MetaMask extension"})," on your browser"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementing-the-smart-contract",children:"Implementing the Smart Contract"}),"\n",(0,s.jsx)(n.p,{children:"Our chat dapp needs the basic functionality allowing users to connect with and\nshare messages with friends. To accomplish this, we will write the functions\nresponsible for creating an account, adding friends and sending messages."}),"\n",(0,s.jsx)(n.h2,{id:"account-creation",children:"Account Creation"}),"\n",(0,s.jsx)(n.p,{children:"We will define 3 functions :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"checkUserExists(pubkey)"})," function is used to check if a user is\nregistered with our application or not. It will help make sure duplicate users\nare not created and it will also be called from other functions to check their\nexistence."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"createAccount(username)"})," function registers a new user on the platform with the provided username."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"getUsername(pubkey)"})," function will return the username of the given user if it exists."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"adding-friends",children:"Adding Friends"}),"\n",(0,s.jsx)(n.p,{children:"Here also we will define 3 functions :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"checkAlreadyFriends(pubkey1, pubkey2)"})," function checks whether two users\nare already friends with each other or not. This is needed to prevent\nduplicate channel between the same parties and will also be used to prevent a\nuser from sending messages to other users unless they are friends."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"addFriend(pubkey, name)"})," function mark the two users as friend if they\nboth are registered on the platform and are already not friends with each\nother."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"getMyFriendList()"})," function will return an array of friends of the given user."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"messaging",children:"Messaging"}),"\n",(0,s.jsxs)(n.p,{children:["The final part of the Solidity contract will enable the exchange of messages\nbetween users. We will divide the task into two functions ",(0,s.jsx)(n.code,{children:"sendMessage()"})," and\n",(0,s.jsx)(n.code,{children:"readMessage()"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"sendMessage()"})," function allows a user to send messages to another\nregistered user (friend). This is done with ",(0,s.jsx)(n.code,{children:"checkUserExists(pubkey)"})," and\n",(0,s.jsx)(n.code,{children:"checkAlreadyFriends(pubkey1, pubkey2)"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"readMessage()"})," function returns the chat history that has happened between the two users so far."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"user-data-collections",children:"User Data Collections"}),"\n",(0,s.jsx)(n.p,{children:"We will have three types of user-defined data :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"user"})," will have the properties ",(0,s.jsx)(n.code,{children:"name"})," which stores the username, and\n",(0,s.jsx)(n.code,{children:"friendList"})," which is an array of other users."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"friend"})," will have the properties ",(0,s.jsx)(n.code,{children:"pubkey"})," which is the friends' public\naddress, and ",(0,s.jsx)(n.code,{children:"name"})," which the user would like to refer them as."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"message"})," has three properties: ",(0,s.jsx)(n.code,{children:"sender"}),", ",(0,s.jsx)(n.code,{children:"timestamp"})," and ",(0,s.jsx)(n.code,{children:"msg"}),', which is short for "message."']}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We would maintain 2 collections in our database:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"userList"})," where all the users on the platform are mapped with their public address."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allMessages"})," stores the messages. As Solidity does not allow user-defined\nkeys in a mapping, we can instead hash the public keys of the two users. This\nvalue can then be stored in the mapping."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"deploying-the-smart-contract",children:"Deploying the Smart Contract"}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-metamask",children:"Setting up MetaMask"}),"\n",(0,s.jsx)(n.p,{children:"Log in to MetaMask -> Click the Network drop-down -> Select Custom RPC"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"MetaMask",src:t(68077).Z+"",width:"408",height:"680"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Testnet Settings:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Name"}),": Lux Testnet C-Chain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"New RPC URL"}),": ",(0,s.jsx)(n.a,{href:"https://api.lux-test.network/ext/bc/C/rpc",children:"https://api.lux-test.network/ext/bc/C/rpc"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ChainID"}),": ",(0,s.jsx)(n.code,{children:"43113"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Symbol"}),": ",(0,s.jsx)(n.code,{children:"C-LUX"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Explorer"}),": ",(0,s.jsx)(n.code,{children:"https://testnet.snowtrace.io"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Fund your address from the given ",(0,s.jsx)(n.a,{href:"https://faucet.lux.network/",children:"faucet"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"deploy-using-remix",children:"Deploy Using Remix"}),"\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.a,{href:"https://remix.ethereum.org/",children:"Remix"})," -> Select Solidity"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"remix-preview",src:t(41060).Z+"",width:"1260",height:"579"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"Database.sol"})," file in the Remix file explorer, and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:'// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract Database {\n    \n    // Stores the default name of an user and her friends info\n    struct user {\n        string name;\n        friend[] friendList;\n    }\n\n    // Each friend is identified by its address and name assigned by the second party\n    struct friend {\n        address pubkey;\n        string name;\n    }\n\n    // message construct stores the single chat message and its metadata\n    struct message {\n        address sender;\n        uint256 timestamp;\n        string msg;\n    }\n\n    // Collection of users registered on the application\n    mapping(address => user) userList;\n    // Collection of messages communicated in a channel between two users\n    mapping(bytes32 => message[]) allMessages; // key : Hash(user1,user2)\n    \n    // It checks whether a user(identified by its public key)\n    // has created an account on this application or not\n    function checkUserExists(address pubkey) public view returns(bool) {\n        return bytes(userList[pubkey].name).length > 0;\n    }\n    \n    // Registers the caller(msg.sender) to our app with a non-empty username\n    function createAccount(string calldata name) external {\n        require(checkUserExists(msg.sender)==false, "User already exists!");\n        require(bytes(name).length>0, "Username cannot be empty!"); \n        userList[msg.sender].name = name;\n    }\n    \n    // Returns the default name provided by an user\n    function getUsername(address pubkey) external view returns(string memory) {\n        require(checkUserExists(pubkey), "User is not registered!");\n        return userList[pubkey].name;\n    }\n    \n    // Adds new user as your friend with an associated nickname\n    function addFriend(address friend_key, string calldata name) external {\n        require(checkUserExists(msg.sender), "Create an account first!");\n        require(checkUserExists(friend_key), "User is not registered!");\n        require(msg.sender!=friend_key, "Users cannot add themselves as friends!");\n        require(checkAlreadyFriends(msg.sender,friend_key)==false, "These users are already friends!");\n        \n        _addFriend(msg.sender, friend_key, name);\n        _addFriend(friend_key, msg.sender, userList[msg.sender].name);\n    }\n    \n    // Checks if two users are already friends or not\n    function checkAlreadyFriends(address pubkey1, address pubkey2) internal view returns(bool) {\n        \n        if(userList[pubkey1].friendList.length > userList[pubkey2].friendList.length)\n        {\n            address tmp = pubkey1;\n            pubkey1 = pubkey2;\n            pubkey2 = tmp;\n        }\n    \n        for(uint i=0; i<userList[pubkey1].friendList.length; ++i)\n        {\n            if(userList[pubkey1].friendList[i].pubkey == pubkey2)\n                return true;\n        }\n        return false;\n    }\n    \n    // A helper function to update the friendList\n    function _addFriend(address me, address friend_key, string memory name) internal {\n        friend memory newFriend = friend(friend_key,name);\n        userList[me].friendList.push(newFriend);\n    }\n    \n    // Returns list of friends of the sender\n    function getMyFriendList() external view returns(friend[] memory) {\n        return userList[msg.sender].friendList;\n    }\n    \n    // Returns a unique code for the channel created between the two users\n    // Hash(key1,key2) where key1 is lexicographically smaller than key2\n    function _getChatCode(address pubkey1, address pubkey2) internal pure returns(bytes32) {\n        if(pubkey1 < pubkey2)\n            return keccak256(abi.encodePacked(pubkey1, pubkey2));\n        else\n            return keccak256(abi.encodePacked(pubkey2, pubkey1));\n    }\n    \n    // Sends a new message to a given friend\n    function sendMessage(address friend_key, string calldata _msg) external {\n        require(checkUserExists(msg.sender), "Create an account first!");\n        require(checkUserExists(friend_key), "User is not registered!");\n        require(checkAlreadyFriends(msg.sender,friend_key), "You are not friends with the given user");\n        \n        bytes32 chatCode = _getChatCode(msg.sender, friend_key);\n        message memory newMsg = message(msg.sender, block.timestamp, _msg);\n        allMessages[chatCode].push(newMsg);\n    }\n    \n    // Returns all the chat messages communicated in a channel\n    function readMessage(address friend_key) external view returns(message[] memory) {\n        bytes32 chatCode = _getChatCode(msg.sender, friend_key);\n        return allMessages[chatCode];\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Navigate to the Solidity compiler Tab on the left side navigation bar and click\nthe blue button to compile the ",(0,s.jsx)(n.code,{children:"Database.sol"})," contract. Note down the ",(0,s.jsx)(n.code,{children:"ABI"})," as\nit will be required in the next section."]}),"\n",(0,s.jsx)(n.p,{children:'Navigate to Deploy Tab and open the \u201cENVIRONMENT\u201d drop-down. Select "Injected\nWeb3" (make sure MetaMask is loaded) and click "Deploy" button.'}),"\n",(0,s.jsxs)(n.p,{children:["Approve the transaction on MetaMask pop-up interface. Once our contract is\ndeployed successfully, Note down the ",(0,s.jsx)(n.code,{children:"contract address"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["An Application Binary Interface (ABI) is a JSON object which stores the\nmetadata about the methods of a contract like data type of input parameters,\nreturn data type & property of the method like payable, view, pure etc. You\ncan learn more about the ABI from the ",(0,s.jsx)(n.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html",children:"solidity\ndocumentation"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-frontend-in-react",children:"Creating a Frontend in React"}),"\n",(0,s.jsx)(n.p,{children:"Now, we are going to create a React app scaffold and set up the frontend of the application."}),"\n",(0,s.jsx)(n.p,{children:"Open a terminal and navigate to the directory where we will create the application."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd /path/to/directory\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now use ",(0,s.jsx)(n.code,{children:"npm"})," to install create-react-app. ",(0,s.jsx)(n.code,{children:"-g"})," flag denotes that the package should be installed globally."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install -g create-react-app\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create a new react app."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"create-react-app chat-app\n"})}),"\n",(0,s.jsx)(n.p,{children:"Move to the newly created directory and install the given dependencies."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd chat-app\nnpm install --save ethers@5.1.4 react-bootstrap@1.5.2 bootstrap@4.6.0\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.code,{children:"index.html"})," file in the ",(0,s.jsx)(n.code,{children:"public"})," directory, and paste the following HTML :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <meta name="theme-color" content="#000000" />\n    <title>Chat dapp</title>\n</head>\n\n<body>\n    <div id="root"></div>\n</body>\n\n</html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Move out of the public directory and create a new directory ",(0,s.jsx)(n.code,{children:"components"})," inside\n",(0,s.jsx)(n.code,{children:"src"})," directory, where we will be keeping all our React components, using the\nfollowing command :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir ./src/components\ncd ./src/components\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now let's create the component having the navbar of our dapp. Create a new file\ncalled ",(0,s.jsx)(n.code,{children:"NavBar.jsx"})," and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport { Button, Navbar } from "react-bootstrap";\n\n// This component renders the Navbar of our application\nexport function NavBar( props ){\n    return (\n        <Navbar bg="dark" variant="dark">\n            <Navbar.Brand href="#home"> \n                Lux Chat App \n            </Navbar.Brand>\n            <Navbar.Toggle />\n            <Navbar.Collapse className="justify-content-end">\n                <Navbar.Text> \n                    <Button style={{ display: props.showButton }} variant="success" onClick={ async () => { props.login(); }}>\n                        Connect to MetaMask\n                    </Button>\n                    <div style={{ display: props.showButton === "none" ? "block" : "none" }}>\n                        Signed in as: \n                        <a href="#"> \n                            { props.username }\n                        </a>\n                    </div>\n                </Navbar.Text>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["All the contacts will have a card with their name and public key. Create a new\nfile called ",(0,s.jsx)(n.code,{children:"ChatCard.jsx"})," and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport { Row, Card } from "react-bootstrap";\nimport \'bootstrap/dist/css/bootstrap.min.css\';\n\n// This is a function which renders the friends in the friends list\nexport function ChatCard( props ){\n    return (\n        <Row style={{ marginRight:"0px" }}>\n            <Card border="success" style={{ width:\'100%\', alignSelf:\'center\', marginLeft:"15px" }} onClick={ () => { props.getMessages( props.publicKey ); }}>\n              <Card.Body>\n                  <Card.Title> { props.name } </Card.Title>\n                  <Card.Subtitle> { props.publicKey.length > 20 ? props.publicKey.substring(0, 20) + " ..." : props.publicKey } </Card.Subtitle>\n              </Card.Body>\n            </Card>\n        </Row> \n    );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Each message will be rendered by the Message component. This component will have\nthe timestamp , senders' name and the message. Create a new file called\n",(0,s.jsx)(n.code,{children:"Message.jsx"})," and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport { Row, Card } from "react-bootstrap";\n\n// This is a functional component which renders the individual messages\nexport function Message( props ){\n    return (\n        <Row style={{ marginRight:"0px" }}>\n            <Card  border="success" style={{ width:\'80%\', alignSelf:\'center\', margin:"0 0 5px " + props.marginLeft, float:"right", right:"0px" }}>\n                <Card.Body>\n                    <h6 style={{ float:"right" }}> \n                        { props.timeStamp } \n                    </h6>\n                    <Card.Subtitle>\n                        <b>\n                            { props.sender }\n                        </b>\n                    </Card.Subtitle>\n                    <Card.Text>\n                        { props.data }\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        </Row>\n    );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To add a new contact we will make AddNewChat component. It will show a modal on\nclicking the NewChat button and ask for the contact details. Create a new file\ncalled ",(0,s.jsx)(n.code,{children:"AddNewChat.jsx"})," and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport { useState } from "react";\nimport { Button, Modal, Form } from "react-bootstrap";\n\n// This Modal help Add a new friend\nexport function AddNewChat( props ){\n    const [show, setShow] = useState( false );\n    const handleClose = () => setShow( false );\n    const handleShow = () => setShow( true );\n    return (\n        <div className="AddNewChat" style={{ position:"absolute", bottom:"0px", padding:"10px 45px 0 45px", margin:"0 95px 0 0", width:"97%" }}>\n            <Button variant="success" className="mb-2" onClick={ handleShow }>\n                + NewChat\n            </Button>\n            <Modal show={ show } onHide={ handleClose }>\n                <Modal.Header closeButton>\n                  <Modal.Title> Add New Friend </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group>\n                        <Form.Control required id="addPublicKey" size="text" type="text" placeholder="Enter Friends Public Key" />\n                        <br />\n                        <Form.Control required id="addName" size="text" type="text" placeholder="Name" />\n                        <br />\n                    </Form.Group>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant="secondary" onClick={ handleClose }>\n                        Close\n                    </Button>\n                    <Button variant="primary" onClick={ () => {\n                        props.addHandler( document.getElementById(\'addName\').value, document.getElementById(\'addPublicKey\').value );\n                        handleClose();\n                    }}>\n                        Add Friend\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>  \n    \n    );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Now lets create a new file called ",(0,s.jsx)(n.code,{children:"Components.js"})," and export all the components\ntogether. Paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'export { NavBar } from "./NavBar";\nexport { AddNewChat } from "./AddNewChat";\nexport { Message } from "./Message";\nexport { ChatCard } from "./ChatCard";\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Move out to the ",(0,s.jsx)(n.code,{children:"src"})," directory and create a new file called ",(0,s.jsx)(n.code,{children:"App.jsx"})," and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport { useState, useEffect } from "react";\nimport { Container, Row, Col, Card, Form, Button } from \'react-bootstrap\';\nimport { NavBar, ChatCard, Message, AddNewChat } from \'./components/Components.js\';\nimport { ethers } from "ethers";\nimport { abi } from "./abi";\n\n// Add the contract address inside the quotes\nconst CONTRACT_ADDRESS = ""; \n\nexport function App( props ) {  \n    const [friends, setFriends] = useState(null);\n    const [myName, setMyName] = useState(null);\n    const [myPublicKey, setMyPublicKey] = useState(null);\n    const [activeChat, setActiveChat] = useState({ friendname: null, publicKey: null });\n    const [activeChatMessages, setActiveChatMessages] = useState(null);\n    const [showConnectButton, setShowConnectButton] = useState("block");\n    const [myContract, setMyContract] = useState(null);\n  \n    // Save the contents of abi in a variable\n    const contractABI = abi; \n    let provider;\n    let signer;\n\n    // Login to MetaMask and check the if the user exists else creates one\n    async function login() {\n        let res = await connectToMetamask();\n        if( res === true ) {\n            provider = new ethers.providers.Web3Provider( window.ethereum );\n            signer = provider.getSigner();\n            try {\n\t\t\t\tconst contract = new ethers.Contract( CONTRACT_ADDRESS, contractABI, signer );\n\t\t\t\tsetMyContract( contract );\n\t\t\t\tconst address = await signer.getAddress();         \n\t\t\t\tlet present = await contract.checkUserExists( address );\n\t\t\t\tlet username;\n\t\t\t\tif( present )\n\t\t\t\t\tusername = await contract.getUsername( address );\n\t\t\t\telse {\n\t\t\t\t\tusername = prompt(\'Enter a username\', \'Guest\'); \n\t\t\t\t\tif( username === \'\' ) username = \'Guest\';\n\t\t\t\t\tawait contract.createAccount( username );\n\t\t\t\t}\n\t\t\t\tsetMyName( username );\n\t\t\t\tsetMyPublicKey( address );\n\t\t\t\tsetShowConnectButton( "none" );\n\t\t\t} catch(err) {\n\t\t\t\talert("CONTRACT_ADDRESS not set properly!");\n\t\t\t}\n        } else {\n            alert("Couldn\'t connect to MetaMask");\n        }    \n    }\n\n    // Check if the MetaMask connects \n    async function connectToMetamask() {\n        try {\n            await window.ethereum.enable();\n            return true;\n        } catch(err) {\n            return false;\n        }\n    }\n\n    // Add a friend to the users\' Friends List\n    async function addChat( name, publicKey ) {\n        try {\n\t\t\tlet present = await myContract.checkUserExists( publicKey );\n\t\t\tif( !present ) {\n\t\t\t\talert("Given address not found: Ask him to join the app :)");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tawait myContract.addFriend( publicKey, name );\n\t\t\t\tconst frnd = { "name": name, "publicKey": publicKey };\n\t\t\t\tsetFriends( friends.concat(frnd) );\n\t\t\t} catch(err) {\n\t\t\t\talert("Friend already Added! You can\'t be friend with the same person twice ;P");\n\t\t\t}\n\t\t} catch(err) {\n\t\t\talert("Invalid address!")\n\t\t}\n    }\n\n    // Sends messsage to an user \n    async function sendMessage( data ) {\n        if( !( activeChat && activeChat.publicKey ) ) return;\n        const recieverAddress = activeChat.publicKey;\n        await myContract.sendMessage( recieverAddress, data );\n    } \n\n    // Fetch chat messages with a friend \n    async function getMessage( friendsPublicKey ) {\n        let nickname;\n        let messages = [];\n        friends.forEach( ( item ) => {\n            if( item.publicKey === friendsPublicKey )\n                nickname = item.name;\n        });\n        // Get messages\n        const data = await myContract.readMessage( friendsPublicKey );\n        data.forEach( ( item ) => {\n            const timestamp = new Date( 1000*item[1].toNumber() ).toUTCString();\n            messages.push({ "publicKey": item[0], "timeStamp": timestamp, "data": item[2] });\n        });\n        setActiveChat({ friendname: nickname, publicKey: friendsPublicKey });\n        setActiveChatMessages( messages );\n    }\n\n    // This executes every time page renders and when myPublicKey or myContract changes\n    useEffect( () => {\n        async function loadFriends() {\n            let friendList = [];\n            // Get Friends\n            try {\n                const data = await myContract.getMyFriendList();\n                data.forEach( ( item ) => {\n                    friendList.push({ "publicKey": item[0], "name": item[1] });\n                })\n            } catch(err) {\n                friendList = null;  \n            }\n            setFriends( friendList );\n        }\n        loadFriends();\n    }, [myPublicKey, myContract]);\n\n    // Makes Cards for each Message\n    const Messages = activeChatMessages ? activeChatMessages.map( ( message ) => {\n        let margin = "5%";\n        let sender = activeChat.friendname;\n        if( message.publicKey === myPublicKey ) {\n            margin = "15%";\n            sender = "You";\n        }\n        return (\n            <Message marginLeft={ margin } sender={ sender } data={ message.data } timeStamp={ message.timeStamp } />\n        );\n    }) : null;\n  \n    // Displays each card\n    const chats = friends ? friends.map( ( friend ) => {\n     return (\n         <ChatCard publicKey={ friend.publicKey } name={ friend.name } getMessages={ ( key ) => getMessage( key ) } />\n     );\n    }) : null;\n\n    return (\n        <Container style={{ padding:"0px", border:"1px solid grey" }}>\n            {/* This shows the navbar with connect button */}\n            <NavBar username={ myName } login={ async () => login() } showButton={ showConnectButton } />\n            <Row>\n                {/* Here the friends list is shown */}\n                <Col style={{ "paddingRight":"0px", "borderRight":"2px solid #000000" }}>\n                    <div style={{ "backgroundColor":"#DCDCDC", "height":"100%", overflowY:"auto" }}>\n                          <Row style={{ marginRight:"0px" }}  >\n                              <Card style={{ width:\'100%\', alignSelf:\'center\', marginLeft:"15px" }}>\n                                <Card.Header>\n                                    Chats\n                                </Card.Header>\n                              </Card>\n                          </Row>\n                          { chats }\n                          <AddNewChat myContract={ myContract } addHandler={ ( name, publicKey ) => addChat( name, publicKey )} />\n                    </div>\n                </Col>\n                <Col xs={ 8 } style={{ "paddingLeft":"0px" }}>\n                    <div style={{ "backgroundColor":"#DCDCDC", "height":"100%" }}>\n                        {/* Chat header with refresh button, username and public key are rendered here */}\n                        <Row style={{ marginRight:"0px" }}>\n                              <Card style={{ width:\'100%\', alignSelf:\'center\', margin:"0 0 5px 15px" }}>\n                                <Card.Header>\n                                    { activeChat.friendname } : { activeChat.publicKey }\n                                    <Button style={{ float:"right" }} variant="warning" onClick={ () => {\n                                        if( activeChat && activeChat.publicKey )\n                                            getMessage( activeChat.publicKey );\n                                    } }>\n                                        Refresh\n                                    </Button>\n                                </Card.Header>\n                            </Card>\n                        </Row>\n                        {/* The messages will be shown here */}\n                        <div className="MessageBox" style={{ height:"400px", overflowY:"auto" }}>\n                           { Messages }\n                        </div>\n                        {/* The form with send button and message input fields */}\n                        <div className="SendMessage"  style={{ borderTop:"2px solid black", position:"relative", bottom:"0px", padding:"10px 45px 0 45px", margin:"0 95px 0 0", width:"97%" }}>\n                            <Form onSubmit={ (e) => {\n\t\t\t                \te.preventDefault();\n\t\t\t                \tsendMessage( document.getElementById( \'messageData\' ).value );\n\t\t\t                \tdocument.getElementById( \'messageData\' ).value = "";\n\t\t\t                }}>\n                                <Form.Row className="align-items-center">\n                                    <Col xs={9}>\n                                        <Form.Control id="messageData" className="mb-2"  placeholder="Send Message" />\n                                    </Col>\n                                    <Col >\n                                      <Button className="mb-2" style={{ float:"right" }} onClick={ () => {\n                                          sendMessage( document.getElementById( \'messageData\' ).value );\n                                          document.getElementById( \'messageData\' ).value = "";\n                                      }}>\n                                        Send\n                                      </Button>\n                                    </Col>\n                                </Form.Row>\n                            </Form>\n                        </div> \n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," Write down the contract address obtained from ",(0,s.jsx)(n.code,{children:"Implementing the smart contract"})," section in the variable called ",(0,s.jsx)(n.code,{children:"CONTRACT_ADDRESS"})," on line 9 of\n",(0,s.jsx)(n.code,{children:"App.jsx"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"index.js"})," file inside the ",(0,s.jsx)(n.code,{children:"src"})," directory and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport ReactDom from "react-dom";\nimport { App } from "../src/App.jsx";\n\nReactDom.render( \n    <App /> ,\n    document.getElementById(\'root\')\n);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Create a new file called ",(0,s.jsx)(n.code,{children:"abi.js"})," in the ",(0,s.jsx)(n.code,{children:"src"})," directory, and paste the following code :"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'export const abi = [\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "friend_key",\n                "type": "address"\n            },\n            {\n                "internalType": "string",\n                "name": "name",\n                "type": "string"\n            }\n        ],\n        "name": "addFriend",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "pubkey",\n                "type": "address"\n            }\n        ],\n        "name": "checkUserExists",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "string",\n                "name": "name",\n                "type": "string"\n            }\n        ],\n        "name": "createAccount",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getMyFriendList",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "address",\n                        "name": "pubkey",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "string",\n                        "name": "name",\n                        "type": "string"\n                    }\n                ],\n                "internalType": "struct Database.friend[]",\n                "name": "",\n                "type": "tuple[]"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "pubkey",\n                "type": "address"\n            }\n        ],\n        "name": "getUsername",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "friend_key",\n                "type": "address"\n            }\n        ],\n        "name": "readMessage",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "address",\n                        "name": "sender",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "timestamp",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "string",\n                        "name": "msg",\n                        "type": "string"\n                    }\n                ],\n                "internalType": "struct Database.message[]",\n                "name": "",\n                "type": "tuple[]"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "friend_key",\n                "type": "address"\n            },\n            {\n                "internalType": "string",\n                "name": "_msg",\n                "type": "string"\n            }\n        ],\n        "name": "sendMessage",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    }\n]\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["An Application Binary Interface (ABI) is a JSON object which stores the\nmetadata about the methods of a contract like data type of input parameters,\nreturn data type & property of the method like payable, view, pure etc. You\ncan learn more about the ABI from the ",(0,s.jsx)(n.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html",children:"solidity\ndocumentation"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now its time to run our React app. Use the following command to start the React app."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,s.jsx)(n.h2,{id:"walkthrough",children:"Walkthrough"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Visit ",(0,s.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," to interact with the app."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["User registration and adding a new friend",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{alt:"preview",src:t(86678).Z+"",width:"728",height:"408"}),"\nMake sure your friend is also registered to the application while adding him as a friend."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Chatting with friend",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{alt:"preview",src:t(77572).Z+"",width:"728",height:"408"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! We have successfully developed a decentralized chat application\nwhich can be deployed on Lux. We also created a boilerplate React\napplication to use as the frontend for our dapp. As a next step, You can improve\nthe application by adding features like delete messages, block users, or create\ngroups of friends. You can also optimize the gas cost by limiting the maximum\nnumber of messages stored."}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h2,{id:"transaction-failure",children:"Transaction Failure"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Check if your account has sufficient balance at ",(0,s.jsx)(n.a,{href:"https://testnet.snowtrace.io/",children:"Testnet\nblock-explorer"}),". You can fund your address from\nthe given ",(0,s.jsx)(n.a,{href:"https://faucet.lux.network/",children:"faucet"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Zero balance preview",src:t(32237).Z+"",width:"349",height:"597"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Make sure that you have selected the correct account on MetaMask if you have\nmore than one account connected to the site."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Multiple account preview",src:t(36283).Z+"",width:"352",height:"614"})}),"\n",(0,s.jsx)(n.h2,{id:"application-crash",children:"Application Crash"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{alt:"Error",src:t(75097).Z+"",width:"1302",height:"571"}),"\nCheck if you have updated the ",(0,s.jsx)(n.code,{children:"CONTRACT_ADDRESS"})," variable in ",(0,s.jsx)(n.code,{children:"src/index.js"})," properly!"]}),"\n",(0,s.jsx)(n.h2,{id:"about-the-authors",children:"About the Authors"}),"\n",(0,s.jsxs)(n.p,{children:["The tutorial was created by ",(0,s.jsx)(n.a,{href:"https://github.com/realnimish",children:"Nimish Agrawal"})," &\n",(0,s.jsx)(n.a,{href:"https://github.com/SayanKar",children:"Sayan Kar"}),". You can also reach out to them on\nLinkedIn ",(0,s.jsx)(n.a,{href:"https://www.linkedin.com/in/realnimish",children:"@Nimish Agrawal"})," and ",(0,s.jsx)(n.a,{href:"https://www.linkedin.com/in/sayan-kar-",children:"@Sayan\nKar"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Smart contract deployment process - ",(0,s.jsx)(n.a,{href:"https://docs.lux.network/build/tutorials/smart-contracts/deploy-a-smart-contract-on-using-remix-and-metamask",children:"Deploy a Smart Contract on Lux using Remix and MetaMask"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},77572:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/lux-chat-app-chat_preview-e3418e3a168cb05138d558e86f3ca2a8.gif"},75097:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/lux-chat-app-error-cf1304e5c5b414caaf7fd5d962b9d794.png"},68077:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/lux-chat-app-metamask-817d82b8dc74892e0fa5334b222c7ac4.png"},36283:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/lux-chat-app-multiple_accounts-89f242236fd7771b9bf167f2097d898f.jpeg"},86678:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/lux-chat-app-register-9b2ba018c78c558e75d15a232cb93004.gif"},41060:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/lux-chat-app-remix-7f7cd0a5561a37448fa0638e9a6419f2.png"},32237:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/lux-chat-app-zero_balance-3e5df6dafadb122df30c580712cfcb81.jpeg"},11151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>i});var s=t(67294);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);