"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[5655],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){x(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,x=function(e,t){if(null==e)return{};var n,a,x={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(x[n]=e[n]);return x}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(x[n]=e[n])}return x}var l=a.createContext({}),o=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,x=e.mdxType,i=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=o(n),u=x,m=c["".concat(l,".").concat(u)]||c[u]||d[u]||i;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function u(e,t){var n=arguments,x=t&&t.mdxType;if("string"==typeof e||x){var i=n.length,s=new Array(i);s[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:x,s[1]=r;for(var o=2;o<i;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4868:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return r},metadata:function(){return o},toc:function(){return d}});var a=n(7462),x=n(3366),i=(n(7294),n(3905)),s=["components"],r={},l="AVM Transaction Format",o={unversionedId:"specs/avm-transaction-serialization",id:"specs/avm-transaction-serialization",title:"AVM Transaction Format",description:"This file is meant to be the single source of truth for how we serialize transactions in the Lux Virtual Machine (AVM). This document uses the primitive serialization format for packing and secp256k1 for cryptographic user identification.",source:"@site/docs/specs/avm-transaction-serialization.md",sourceDirName:"specs",slug:"/specs/avm-transaction-serialization",permalink:"/specs/avm-transaction-serialization",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/specs/avm-transaction-serialization.md",tags:[],version:"current",frontMatter:{},sidebar:"specs",previous:{title:"Lux Native Tokens and ARC-20s",permalink:"/specs/coreth-arc20s"},next:{title:"Coreth Atomic Transaction Format",permalink:"/specs/coreth-atomic-transaction-serialization"}},p={},d=[{value:"Codec ID",id:"codec-id",level:2},{value:"Transferable Output",id:"transferable-output",level:2},{value:"What Transferable Output Contains",id:"what-transferable-output-contains",level:3},{value:"Gantt Transferable Output Specification",id:"gantt-transferable-output-specification",level:3},{value:"Proto Transferable Output Specification",id:"proto-transferable-output-specification",level:3},{value:"Transferable Output Example",id:"transferable-output-example",level:3},{value:"Transferable Input",id:"transferable-input",level:2},{value:"What Transferable Input Contains",id:"what-transferable-input-contains",level:3},{value:"Gantt Transferable Input Specification",id:"gantt-transferable-input-specification",level:3},{value:"Proto Transferable Input Specification",id:"proto-transferable-input-specification",level:3},{value:"Transferable Input Example",id:"transferable-input-example",level:3},{value:"Transferable Op",id:"transferable-op",level:2},{value:"What Transferable Op Contains",id:"what-transferable-op-contains",level:3},{value:"Gantt Transferable Op Specification",id:"gantt-transferable-op-specification",level:3},{value:"Proto Transferable Op Specification",id:"proto-transferable-op-specification",level:3},{value:"Transferable Op Example",id:"transferable-op-example",level:3},{value:"Outputs",id:"outputs",level:2},{value:"SECP256K1 Mint Output",id:"secp256k1-mint-output",level:2},{value:"What SECP256K1 Mint Output Contains",id:"what-secp256k1-mint-output-contains",level:3},{value:"Gantt SECP256K1 Mint Output Specification",id:"gantt-secp256k1-mint-output-specification",level:3},{value:"Proto SECP256K1 Mint Output Specification",id:"proto-secp256k1-mint-output-specification",level:3},{value:"SECP256K1 Mint Output Example",id:"secp256k1-mint-output-example",level:3},{value:"SECP256K1 Transfer Output",id:"secp256k1-transfer-output",level:2},{value:"What SECP256K1 Transfer Output Contains",id:"what-secp256k1-transfer-output-contains",level:3},{value:"Gantt SECP256K1 Transfer Output Specification",id:"gantt-secp256k1-transfer-output-specification",level:3},{value:"Proto SECP256K1 Transfer Output Specification",id:"proto-secp256k1-transfer-output-specification",level:3},{value:"SECP256K1 Transfer Output Example",id:"secp256k1-transfer-output-example",level:3},{value:"NFT Mint Output",id:"nft-mint-output",level:2},{value:"What NFT Mint Output Contains",id:"what-nft-mint-output-contains",level:3},{value:"Gantt NFT Mint Output Specification",id:"gantt-nft-mint-output-specification",level:3},{value:"Proto NFT Mint Output Specification",id:"proto-nft-mint-output-specification",level:3},{value:"NFT Mint Output Example",id:"nft-mint-output-example",level:3},{value:"NFT Transfer Output",id:"nft-transfer-output",level:2},{value:"What NFT Transfer Output Contains",id:"what-nft-transfer-output-contains",level:3},{value:"Gantt NFT Transfer Output Specification",id:"gantt-nft-transfer-output-specification",level:3},{value:"Proto NFT Transfer Output Specification",id:"proto-nft-transfer-output-specification",level:3},{value:"NFT Transfer Output Example",id:"nft-transfer-output-example",level:3},{value:"Inputs",id:"inputs",level:2},{value:"SECP256K1 Transfer Input",id:"secp256k1-transfer-input",level:2},{value:"What SECP256K1 Transfer Input Contains",id:"what-secp256k1-transfer-input-contains",level:3},{value:"Gantt SECP256K1 Transfer Input Specification",id:"gantt-secp256k1-transfer-input-specification",level:3},{value:"Proto SECP256K1 Transfer Input Specification",id:"proto-secp256k1-transfer-input-specification",level:3},{value:"SECP256K1 Transfer Input Example",id:"secp256k1-transfer-input-example",level:3},{value:"Operations",id:"operations",level:2},{value:"SECP256K1 Mint Operation",id:"secp256k1-mint-operation",level:2},{value:"What SECP256K1 Mint Operation Contains",id:"what-secp256k1-mint-operation-contains",level:3},{value:"Gantt SECP256K1 Mint Operation Specification",id:"gantt-secp256k1-mint-operation-specification",level:3},{value:"Proto SECP256K1 Mint Operation Specification",id:"proto-secp256k1-mint-operation-specification",level:3},{value:"SECP256K1 Mint Operation Example",id:"secp256k1-mint-operation-example",level:3},{value:"NFT Mint Op",id:"nft-mint-op",level:2},{value:"What NFT Mint Op Contains",id:"what-nft-mint-op-contains",level:3},{value:"Gantt NFT Mint Op Specification",id:"gantt-nft-mint-op-specification",level:3},{value:"Proto NFT Mint Op Specification",id:"proto-nft-mint-op-specification",level:3},{value:"NFT Mint Op Example",id:"nft-mint-op-example",level:3},{value:"NFT Transfer Op",id:"nft-transfer-op",level:2},{value:"What NFT Transfer Op Contains",id:"what-nft-transfer-op-contains",level:3},{value:"Gantt NFT Transfer Op Specification",id:"gantt-nft-transfer-op-specification",level:3},{value:"Proto NFT Transfer Op Specification",id:"proto-nft-transfer-op-specification",level:3},{value:"NFT Transfer Op Example",id:"nft-transfer-op-example",level:3},{value:"Initial State",id:"initial-state",level:2},{value:"What Initial State Contains",id:"what-initial-state-contains",level:3},{value:"Gantt Initial State Specification",id:"gantt-initial-state-specification",level:3},{value:"Proto Initial State Specification",id:"proto-initial-state-specification",level:3},{value:"Initial State Example",id:"initial-state-example",level:3},{value:"Credentials",id:"credentials",level:2},{value:"SECP256K1 Credential",id:"secp256k1-credential",level:2},{value:"What SECP256K1 Credential Contains",id:"what-secp256k1-credential-contains",level:3},{value:"Gantt SECP256K1 Credential Specification",id:"gantt-secp256k1-credential-specification",level:3},{value:"Proto SECP256K1 Credential Specification",id:"proto-secp256k1-credential-specification",level:3},{value:"SECP256K1 Credential Example",id:"secp256k1-credential-example",level:3},{value:"NFT Credential",id:"nft-credential",level:2},{value:"Unsigned Transactions",id:"unsigned-transactions",level:2},{value:"Unsigned BaseTx",id:"unsigned-basetx",level:2},{value:"What Base Tx Contains",id:"what-base-tx-contains",level:3},{value:"Gantt Base Tx Specification",id:"gantt-base-tx-specification",level:3},{value:"Proto Base Tx Specification",id:"proto-base-tx-specification",level:3},{value:"Base Tx Example",id:"base-tx-example",level:3},{value:"Unsigned CreateAssetTx",id:"unsigned-createassettx",level:2},{value:"What Unsigned Create Asset Tx Contains",id:"what-unsigned-create-asset-tx-contains",level:3},{value:"Gantt Unsigned Create Asset Tx Specification",id:"gantt-unsigned-create-asset-tx-specification",level:3},{value:"Proto Unsigned Create Asset Tx Specification",id:"proto-unsigned-create-asset-tx-specification",level:3},{value:"Unsigned Create Asset Tx Example",id:"unsigned-create-asset-tx-example",level:3},{value:"Unsigned OperationTx",id:"unsigned-operationtx",level:2},{value:"What Unsigned Operation Tx Contains",id:"what-unsigned-operation-tx-contains",level:3},{value:"Gantt Unsigned Operation Tx Specification",id:"gantt-unsigned-operation-tx-specification",level:3},{value:"Proto Unsigned Operation Tx Specification",id:"proto-unsigned-operation-tx-specification",level:3},{value:"Unsigned Operation Tx Example",id:"unsigned-operation-tx-example",level:3},{value:"Unsigned ImportTx",id:"unsigned-importtx",level:2},{value:"What Unsigned Import Tx Contains",id:"what-unsigned-import-tx-contains",level:3},{value:"Gantt Unsigned Import Tx Specification",id:"gantt-unsigned-import-tx-specification",level:3},{value:"Proto Unsigned Import Tx Specification",id:"proto-unsigned-import-tx-specification",level:3},{value:"Unsigned Import Tx Example",id:"unsigned-import-tx-example",level:3},{value:"Unsigned ExportTx",id:"unsigned-exporttx",level:2},{value:"What Unsigned Export Tx Contains",id:"what-unsigned-export-tx-contains",level:3},{value:"Gantt Unsigned Export Tx Specification",id:"gantt-unsigned-export-tx-specification",level:3},{value:"Proto Unsigned Export Tx Specification",id:"proto-unsigned-export-tx-specification",level:3},{value:"Unsigned Export Tx Example",id:"unsigned-export-tx-example",level:3},{value:"Signed Transaction",id:"signed-transaction",level:2},{value:"What Signed Transaction Contains",id:"what-signed-transaction-contains",level:3},{value:"Gantt Signed Transaction Specification",id:"gantt-signed-transaction-specification",level:3},{value:"Proto Signed Transaction Specification",id:"proto-signed-transaction-specification",level:3},{value:"Signed Transaction Example",id:"signed-transaction-example",level:3},{value:"UTXO",id:"utxo",level:2},{value:"What UTXO Contains",id:"what-utxo-contains",level:3},{value:"Gantt UTXO Specification",id:"gantt-utxo-specification",level:3},{value:"Proto UTXO Specification",id:"proto-utxo-specification",level:3},{value:"UTXO Examples",id:"utxo-examples",level:3},{value:"GenesisAsset",id:"genesisasset",level:2},{value:"What GenesisAsset Contains",id:"what-genesisasset-contains",level:3},{value:"Gantt GenesisAsset Specification",id:"gantt-genesisasset-specification",level:3},{value:"GenesisAsset Example",id:"genesisasset-example",level:3},{value:"Vertex",id:"vertex",level:2},{value:"What Vertex Contains",id:"what-vertex-contains",level:3},{value:"Gantt Vertex Specification",id:"gantt-vertex-specification",level:3},{value:"Proto Vertex Specification",id:"proto-vertex-specification",level:3},{value:"Vertex Example",id:"vertex-example",level:3}],c={toc:d};function u(e){var t=e.components,n=(0,x.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"avm-transaction-format"},"AVM Transaction Format"),(0,i.kt)("p",null,"This file is meant to be the single source of truth for how we serialize transactions in the Lux Virtual Machine (AVM). This document uses the ",(0,i.kt)("a",{parentName:"p",href:"/specs/serialization-primitives"},"primitive serialization")," format for packing and ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp256k1-addresses"},"secp256k1")," for cryptographic user identification."),(0,i.kt)("h2",{id:"codec-id"},"Codec ID"),(0,i.kt)("p",null,"Some data is prepended with a codec ID (unt16) that denotes how the data should be deserialized. Right now, the only valid codec ID is 0 (",(0,i.kt)("inlineCode",{parentName:"p"},"0x00 0x00"),")."),(0,i.kt)("h2",{id:"transferable-output"},"Transferable Output"),(0,i.kt)("p",null,"Transferable outputs wrap an output with an asset ID."),(0,i.kt)("h3",{id:"what-transferable-output-contains"},"What Transferable Output Contains"),(0,i.kt)("p",null,"A transferable output contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"AssetID")," and an ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#outputs"},(0,i.kt)("inlineCode",{parentName:"a"},"Output")),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID"))," is a 32-byte array that defines which asset this output references."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output"))," is an output, as defined ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#outputs"},"below"),". Outputs have four possible types: ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#secp256k1-transfer-output"},(0,i.kt)("inlineCode",{parentName:"a"},"SECP256K1TransferOutput")),", ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#secp256k1-mint-output"},(0,i.kt)("inlineCode",{parentName:"a"},"SECP256K1MintOutput")),", ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#nft-transfer-output"},(0,i.kt)("inlineCode",{parentName:"a"},"NFTTransferOutput"))," and ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#nft-mint-output"},(0,i.kt)("inlineCode",{parentName:"a"},"NFTMintOutput")),".")),(0,i.kt)("h3",{id:"gantt-transferable-output-specification"},"Gantt Transferable Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+----------+----------+-------------------------+\n| asset_id : [32]byte |                32 bytes |\n+----------+----------+-------------------------+\n| output   : Output   |      size(output) bytes |\n+----------+----------+-------------------------+\n                      | 32 + size(output) bytes |\n                      +-------------------------+\n")),(0,i.kt)("h3",{id:"proto-transferable-output-specification"},"Proto Transferable Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message TransferableOutput {\n    bytes asset_id = 1; // 32 bytes\n    Output output = 2;  // size(output)\n}\n")),(0,i.kt)("h3",{id:"transferable-output-example"},"Transferable Output Example"),(0,i.kt)("p",null,"Let\u2019s make a transferable output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AssetID"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Output"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transfer Output from below"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    AssetID <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Output  <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n]\n=\n[\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"transferable-input"},"Transferable Input"),(0,i.kt)("p",null,"Transferable inputs describe a specific UTXO with a provided transfer input."),(0,i.kt)("h3",{id:"what-transferable-input-contains"},"What Transferable Input Contains"),(0,i.kt)("p",null,"A transferable input contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TxID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTXOIndex")," ",(0,i.kt)("inlineCode",{parentName:"p"},"AssetID")," and an ",(0,i.kt)("inlineCode",{parentName:"p"},"Input"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," is a 32-byte array that defines which transaction this input is consuming an output from. Transaction IDs are calculated by taking sha256 of the bytes of the signed transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex"))," is an int that defines which utxo this input is consuming in the specified transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID"))," is a 32-byte array that defines which asset this input references."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Input"))," is an input, as defined below. This can currently only be a ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#secp256k1-transfer-input"},"SECP256K1 transfer input"))),(0,i.kt)("h3",{id:"gantt-transferable-input-specification"},"Gantt Transferable Input Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------+----------+------------------------+\n| tx_id      : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| utxo_index : int      |               04 bytes |\n+------------+----------+------------------------+\n| asset_id   : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| input      : Input    |      size(input) bytes |\n+------------+----------+------------------------+\n                        | 68 + size(input) bytes |\n                        +------------------------+\n")),(0,i.kt)("h3",{id:"proto-transferable-input-specification"},"Proto Transferable Input Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message TransferableInput {\n    bytes tx_id = 1;       // 32 bytes\n    uint32 utxo_index = 2; // 04 bytes\n    bytes asset_id = 3;    // 32 bytes\n    Input input = 4;       // size(input)\n}\n")),(0,i.kt)("h3",{id:"transferable-input-example"},"Transferable Input Example"),(0,i.kt)("p",null,"Let\u2019s make a transferable input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TxID"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UTXOIndex"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AssetID"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Input"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transfer Input from below"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TxID      <- 0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000\n    UTXOIndex <- 0x00000005\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Input     <- 0x0000000500000000075bcd15000000020000000700000003\n]\n=\n[\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07\n]\n")),(0,i.kt)("h2",{id:"transferable-op"},"Transferable Op"),(0,i.kt)("p",null,"Transferable operations describe a set of UTXOs with a provided transfer operation. Only one Asset ID is able to be referenced per operation."),(0,i.kt)("h3",{id:"what-transferable-op-contains"},"What Transferable Op Contains"),(0,i.kt)("p",null,"A transferable operation contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"AssetID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTXOIDs"),", and a ",(0,i.kt)("inlineCode",{parentName:"p"},"TransferOp"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID"))," is a 32-byte array that defines which asset this operation changes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIDs"))," is an array of TxID-OutputIndex tuples. This array must be sorted in lexicographical order."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransferOp"))," is a ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#operations"},"transferable operation object"),".")),(0,i.kt)("h3",{id:"gantt-transferable-op-specification"},"Gantt Transferable Op Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-------------+------------+------------------------------+\n| asset_id    : [32]byte   |                     32 bytes |\n+-------------+------------+------------------------------+\n| utxo_ids    : []UTXOID   | 4 + 36 * len(utxo_ids) bytes |\n+-------------+------------+------------------------------+\n| transfer_op : TransferOp |      size(transfer_op) bytes |\n+-------------+------------+------------------------------+\n                           |   36 + 36 * len(utxo_ids)    |\n                           |    + size(transfer_op) bytes |\n                           +------------------------------+\n")),(0,i.kt)("h3",{id:"proto-transferable-op-specification"},"Proto Transferable Op Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message UTXOID {\n    bytes tx_id = 1;       // 32 bytes\n    uint32 utxo_index = 2; // 04 bytes\n}\nmessage TransferableOp {\n    bytes asset_id = 1;           // 32 bytes\n    repeated UTXOID utxo_ids = 2; // 4 + 36 * len(utxo_ids) bytes\n    TransferOp transfer_op = 3;   // size(transfer_op)\n}\n")),(0,i.kt)("h3",{id:"transferable-op-example"},"Transferable Op Example"),(0,i.kt)("p",null,"Let\u2019s make a transferable operation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AssetID"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UTXOIDs"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UTXOID"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TxID"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"UTXOIndex"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"5")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Op"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example Transfer Op from below"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    UTXOIDs   <- [\n        {\n            TxID:0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000\n            UTXOIndex:5\n        }\n    ]\n    Op     <- 0x0000000d0000000200000003000000070000303900000003431100000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n=\n[\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // number of utxoIDs:\n    0x00, 0x00, 0x00, 0x01,\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // op:\n    0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x03,\n    0x43, 0x11, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,\n    0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61, 0xfb,\n    0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8, 0x34,\n    0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55, 0xc3,\n    0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e, 0xde,\n    0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89, 0x43,\n    0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"outputs"},"Outputs"),(0,i.kt)("p",null,"Outputs have four possible types: ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#secp256k1-transfer-output"},(0,i.kt)("inlineCode",{parentName:"a"},"SECP256K1TransferOutput")),", ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#secp256k1-mint-output"},(0,i.kt)("inlineCode",{parentName:"a"},"SECP256K1MintOutput")),", ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#nft-transfer-output"},(0,i.kt)("inlineCode",{parentName:"a"},"NFTTransferOutput"))," and ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#nft-mint-output"},(0,i.kt)("inlineCode",{parentName:"a"},"NFTMintOutput")),"."),(0,i.kt)("h2",{id:"secp256k1-mint-output"},"SECP256K1 Mint Output"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," mint output is an output that is owned by a collection of addresses."),(0,i.kt)("h3",{id:"what-secp256k1-mint-output-contains"},"What SECP256K1 Mint Output Contains"),(0,i.kt)("p",null,"A secp256k1 Mint output contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Threshold"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Addresses"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000006"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp that this output can be spent after. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold"))," is an int that names the number of unique signatures required to spend the output. Must be less than or equal to the length of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),". If ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is empty, must be 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is a list of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-secp256k1-mint-output-specification"},"Gantt SECP256K1 Mint Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------+------------+--------------------------------+\n| type_id   : int        |                       4 bytes  |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                       8 bytes  |\n+-----------+------------+--------------------------------+\n| threshold : int        |                       4 bytes  |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 20 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-mint-output-specification"},"Proto SECP256K1 Mint Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1MintOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint64 locktime = 2;          // 08 bytes\n    uint32 threshold = 3;         // 04 bytes\n    repeated bytes addresses = 4; // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-mint-output-example"},"SECP256K1 Mint Output Example"),(0,i.kt)("p",null,"Let\u2019s make a SECP256K1 mint output with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"6")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"54321")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x51025c61fbcfc078f69334f834be6dd26d55a955")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xc3344128e060128ede3523a24a461c8943ab0859"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID    <- 0x00000006\n    Locktime  <- 0x000000000000d431\n    Threshold <- 0x00000001\n    Addresses <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // typeID:\n    0x00, 0x00, 0x00, 0x06,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"secp256k1-transfer-output"},"SECP256K1 Transfer Output"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," transfer output allows for sending a quantity of an asset to a collection of addresses after a specified unix time."),(0,i.kt)("h3",{id:"what-secp256k1-transfer-output-contains"},"What SECP256K1 Transfer Output Contains"),(0,i.kt)("p",null,"A secp256k1 transfer output contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Amount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Threshold"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Addresses"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000007"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount"))," is a long that specifies the quantity of the asset that this output owns. Must be positive."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp that this output can be spent after. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold"))," is an int that names the number of unique signatures required to spend the output. Must be less than or equal to the length of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),". If ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is empty, must be 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is a list of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-secp256k1-transfer-output-specification"},"Gantt SECP256K1 Transfer Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| amount    : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 28 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-transfer-output-specification"},"Proto SECP256K1 Transfer Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1TransferOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint64 amount = 2;            // 08 bytes\n    uint64 locktime = 3;          // 08 bytes\n    uint32 threshold = 4;         // 04 bytes\n    repeated bytes addresses = 5; // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-transfer-output-example"},"SECP256K1 Transfer Output Example"),(0,i.kt)("p",null,"Let\u2019s make a secp256k1 transfer output with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"7")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12345")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"54321")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x51025c61fbcfc078f69334f834be6dd26d55a955")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xc3344128e060128ede3523a24a461c8943ab0859"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID    <- 0x00000007\n    Amount    <- 0x0000000000003039\n    Locktime  <- 0x000000000000d431\n    Threshold <- 0x00000001\n    Addresses <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // typeID:\n    0x00, 0x00, 0x00, 0x07,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"nft-mint-output"},"NFT Mint Output"),(0,i.kt)("p",null,"An NFT mint output is an NFT that is owned by a collection of addresses."),(0,i.kt)("h3",{id:"what-nft-mint-output-contains"},"What NFT Mint Output Contains"),(0,i.kt)("p",null,"An NFT Mint output contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GroupID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Threshold"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Addresses"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000a"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GroupID"))," is an int that specifies the group this NFT is issued to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp that this output can be spent after. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold"))," is an int that names the number of unique signatures required to spend the output. Must be less than or equal to the length of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),". If ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is empty, must be 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is a list of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-nft-mint-output-specification"},"Gantt NFT Mint Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| group_id  : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 24 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n")),(0,i.kt)("h3",{id:"proto-nft-mint-output-specification"},"Proto NFT Mint Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message NFTMintOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint32 group_id = 2;          // 04 bytes\n    uint64 locktime = 3;          // 08 bytes\n    uint32 threshold = 4;         // 04 bytes\n    repeated bytes addresses = 5; // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"nft-mint-output-example"},"NFT Mint Output Example"),(0,i.kt)("p",null,"Let\u2019s make an NFT mint output with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"10")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GroupID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12345")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"54321")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x51025c61fbcfc078f69334f834be6dd26d55a955")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xc3344128e060128ede3523a24a461c8943ab0859"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID    <- 0x0000000a\n    GroupID   <- 0x00003039\n    Locktime  <- 0x000000000000d431\n    Threshold <- 0x00000001\n    Addresses <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // TypeID\n    0x00, 0x00, 0x00, 0x0a,\n    // groupID:\n    0x00, 0x00, 0x30, 0x39,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"nft-transfer-output"},"NFT Transfer Output"),(0,i.kt)("p",null,"An NFT transfer output is an NFT that is owned by a collection of addresses."),(0,i.kt)("h3",{id:"what-nft-transfer-output-contains"},"What NFT Transfer Output Contains"),(0,i.kt)("p",null,"An NFT transfer output contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GroupID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Payload"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Threshold"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Addresses"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000b"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GroupID"))," is an int that specifies the group this NFT was issued with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Payload"))," is an arbitrary string of bytes no long longer than 1024 bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp that this output can be spent after. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold"))," is an int that names the number of unique signatures required to spend the output. Must be less than or equal to the length of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),". If ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is empty, must be 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is a list of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-nft-transfer-output-specification"},"Gantt NFT Transfer Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------+------------+-------------------------------+\n| type_id   : int        |                       4 bytes |\n+-----------+------------+-------------------------------+\n| group_id  : int        |                       4 bytes |\n+-----------+------------+-------------------------------+\n| payload   : []byte     |        4 + len(payload) bytes |\n+-----------+------------+-------------------------------+\n| locktime  : long       |                       8 bytes |\n+-----------+------------+-------------------------------+\n| threshold : int        |                       4 bytes |\n+-----------+------------+-------------------------------+\n| addresses : [][20]byte | 4 + 20 * len(addresses) bytes |\n+-----------+------------+-------------------------------+\n                         |             28 + len(payload) |\n                         |  + 20 * len(addresses) bytes  |\n                         +-------------------------------+\n")),(0,i.kt)("h3",{id:"proto-nft-transfer-output-specification"},"Proto NFT Transfer Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message NFTTransferOutput {\n    uint32 typeID = 1;            // 04 bytes\n    uint32 group_id = 2;          // 04 bytes\n    bytes payload = 3;            // 04 bytes + len(payload)\n    uint64 locktime = 4           // 08 bytes\n    uint32 threshold = 5;         // 04 bytes\n    repeated bytes addresses = 6; // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"nft-transfer-output-example"},"NFT Transfer Output Example"),(0,i.kt)("p",null,"Let\u2019s make an NFT transfer output with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"11")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GroupID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12345")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Payload")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"NFT Payload")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"54321")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x51025c61fbcfc078f69334f834be6dd26d55a955")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xc3344128e060128ede3523a24a461c8943ab0859"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID    <- 0x0000000b\n    GroupID   <- 0x00003039\n    Payload   <- 0x4e4654205061796c6f6164\n    Locktime  <- 0x000000000000d431\n    Threshold <- 0x00000001\n    Addresses <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // TypeID:\n    0x00, 0x00, 0x00, 0x0b,\n    // groupID:\n    0x00, 0x00, 0x30, 0x39,\n    // length of payload:\n    0x00, 0x00, 0x00, 0x0b,\n    // payload:\n    0x4e, 0x46, 0x54, 0x20, 0x50, 0x61, 0x79, 0x6c,\n    0x6f, 0x61, 0x64,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"inputs"},"Inputs"),(0,i.kt)("p",null,"Inputs have one possible type: ",(0,i.kt)("inlineCode",{parentName:"p"},"SECP256K1TransferInput"),"."),(0,i.kt)("h2",{id:"secp256k1-transfer-input"},"SECP256K1 Transfer Input"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," transfer input allows for spending an unspent secp256k1 transfer output."),(0,i.kt)("h3",{id:"what-secp256k1-transfer-input-contains"},"What SECP256K1 Transfer Input Contains"),(0,i.kt)("p",null,"A secp256k1 transfer input contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"Amount")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AddressIndices"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this input type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000005"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount"))," is a long that specifies the quantity that this input should be consuming from the UTXO. Must be positive. Must be equal to the amount specified in the UTXO."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices"))," is a list of unique ints that define the private keys that are being used to spend the UTXO. Each UTXO has an array of addresses that can spend the UTXO. Each int represents the index in this address array that will sign this transaction. The array must be sorted low to high.")),(0,i.kt)("h3",{id:"gantt-secp256k1-transfer-input-specification"},"Gantt SECP256K1 Transfer Input Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-------------------------+-------------------------------------+\n| type_id         : int   |                             4 bytes |\n+-----------------+-------+-------------------------------------+\n| amount          : long  |                             8 bytes |\n+-----------------+-------+-------------------------------------+\n| address_indices : []int |  4 + 4 * len(address_indices) bytes |\n+-----------------+-------+-------------------------------------+\n                          | 16 + 4 * len(address_indices) bytes |\n                          +-------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-transfer-input-specification"},"Proto SECP256K1 Transfer Input Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1TransferInput {\n    uint32 typeID = 1;                   // 04 bytes\n    uint64 amount = 2;                   // 08 bytes\n    repeated uint32 address_indices = 3; // 04 bytes + 04 bytes * len(address_indices)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-transfer-input-example"},"SECP256K1 Transfer Input Example"),(0,i.kt)("p",null,"Let\u2019s make a payment input with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeId")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"5")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"123456789")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices")),": ","[",(0,i.kt)("inlineCode",{parentName:"li"},"3"),",",(0,i.kt)("inlineCode",{parentName:"li"},"7"),"]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID         <- 0x00000005\n    Amount         <- 123456789 = 0x00000000075bcd15,\n    AddressIndices <- [0x00000003, 0x00000007]\n]\n=\n[\n    // type id:\n    0x00, 0x00, 0x00, 0x05,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    // length:\n    0x00, 0x00, 0x00, 0x02,\n    // sig[0]\n    0x00, 0x00, 0x00, 0x03,\n    // sig[1]\n    0x00, 0x00, 0x00, 0x07,\n]\n")),(0,i.kt)("h2",{id:"operations"},"Operations"),(0,i.kt)("p",null,"Operations have three possible types: ",(0,i.kt)("inlineCode",{parentName:"p"},"SECP256K1MintOperation"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NFTMintOp"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"NFTTransferOp"),"."),(0,i.kt)("h2",{id:"secp256k1-mint-operation"},"SECP256K1 Mint Operation"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," mint operation consumes a SECP256K1 mint output, creates a new mint output and sends a transfer output to a new set of owners."),(0,i.kt)("h3",{id:"what-secp256k1-mint-operation-contains"},"What SECP256K1 Mint Operation Contains"),(0,i.kt)("p",null,"A secp256k1 Mint operation contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AddressIndices"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"MintOutput"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"TransferOutput"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000008"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices"))," is a list of unique ints that define the private keys that are being used to spend the ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#utxo"},"UTXO"),". Each UTXO has an array of addresses that can spend the UTXO. Each int represents the index in this address array that will sign this transaction. The array must be sorted low to high."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"MintOutput"))," is a ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#secp256k1-mint-output"},"SECP256K1 Mint output"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransferOutput"))," is a ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#secp256k1-transfer-output"},"SECP256K1 Transfer output"),".")),(0,i.kt)("h3",{id:"gantt-secp256k1-mint-operation-specification"},"Gantt SECP256K1 Mint Operation Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+----------------------------------+------------------------------------+\n| type_id         : int            |                            4 bytes |\n+----------------------------------+------------------------------------+\n| address_indices : []int          | 4 + 4 * len(address_indices) bytes |\n+----------------------------------+------------------------------------+\n| mint_output     : MintOutput     |            size(mint_output) bytes |\n+----------------------------------+------------------------------------+\n| transfer_output : TransferOutput |        size(transfer_output) bytes |\n+----------------------------------+------------------------------------+\n                                   |       8 + 4 * len(address_indices) |\n                                   |                + size(mint_output) |\n                                   |      + size(transfer_output) bytes |\n                                   +------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-mint-operation-specification"},"Proto SECP256K1 Mint Operation Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1MintOperation {\n    uint32 typeID = 1;                   // 4 bytes\n    repeated uint32 address_indices = 2; // 04 bytes + 04 bytes * len(address_indices)\n    MintOutput mint_output = 3;          // size(mint_output\n    TransferOutput transfer_output = 4;  // size(transfer_output)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-mint-operation-example"},"SECP256K1 Mint Operation Example"),(0,i.kt)("p",null,"Let\u2019s make a ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," mint operation with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeId")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"8")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x00000003")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x00000007")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"MintOutput")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Mint Output from above"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransferOutput")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transfer Output from above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID <- 0x00000008\n    AddressIndices <- [0x00000003, 0x00000007]\n    MintOutput <- 0x00000006000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c89\n    TransferOutput <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n=\n[\n    // typeID\n    0x00, 0x00, 0x00, 0x08,\n    // number of address_indices:\n    0x00, 0x00, 0x00, 0x02,\n    // address_indices[0]:\n    0x00, 0x00, 0x00, 0x03,\n    // address_indices[1]:\n    0x00, 0x00, 0x00, 0x07,\n    // mint output\n    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n    // transfer output\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"nft-mint-op"},"NFT Mint Op"),(0,i.kt)("p",null,"An NFT mint operation consumes an NFT mint output and sends an unspent output to a new set of owners."),(0,i.kt)("h3",{id:"what-nft-mint-op-contains"},"What NFT Mint Op Contains"),(0,i.kt)("p",null,"An NFT mint operation contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AddressIndices"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GroupID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Payload"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Output")," of addresses."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this operation type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000c"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices"))," is a list of unique ints that define the private keys that are being used to spend the UTXO. Each UTXO has an array of addresses that can spend the UTXO. Each int represents the index in this address array that will sign this transaction. The array must be sorted low to high."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GroupID"))," is an int that specifies the group this NFT is issued to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Payload"))," is an arbitrary string of bytes no longer than 1024 bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output"))," is not a ",(0,i.kt)("inlineCode",{parentName:"li"},"TransferableOutput"),", but rather is a locktime, threshold, and an array of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-nft-mint-op-specification"},"Gantt NFT Mint Op Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------------------------+------------------------------------+\n| type_id         : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| address_indices : []int      | 4 + 4 * len(address_indices) bytes |\n+-----------------+------------+------------------------------------+\n| group_id        : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| payload         : []byte     |             4 + len(payload) bytes |\n+-----------------+------------+------------------------------------+\n| outputs         : []Output   |            4 + size(outputs) bytes |\n+-----------------+------------+------------------------------------+\n                               |                               20 + |\n                               |         4 * len(address_indices) + |\n                               |                     len(payload) + |\n                               |                size(outputs) bytes |\n                               +------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-nft-mint-op-specification"},"Proto NFT Mint Op Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message NFTMintOp {\n    uint32 typeID = 1;                   // 04 bytes\n    repeated uint32 address_indices = 2; // 04 bytes + 04 bytes * len(address_indices)\n    uint32 group_id = 3;                 // 04 bytes\n    bytes payload = 4;                   // 04 bytes + len(payload)\n    repeated bytes outputs = 5;          // 04 bytes + size(outputs)\n}\n")),(0,i.kt)("h3",{id:"nft-mint-op-example"},"NFT Mint Op Example"),(0,i.kt)("p",null,"Let\u2019s make an NFT mint operation with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeId")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x00000003")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x00000007")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GroupID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12345")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Payload")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x431100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"54321")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xc3344128e060128ede3523a24a461c8943ab0859"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID         <- 0x0000000c\n    AddressIndices <- [\n        0x00000003,\n        0x00000007,\n    ]\n    GroupID        <- 0x00003039\n    Payload        <- 0x431100\n    Locktime       <- 0x000000000000d431\n    Threshold      <- 0x00000001\n    Addresses      <- [\n        0xc3344128e060128ede3523a24a461c8943ab0859\n    ]\n]\n=\n[\n    // Type ID\n    0x00, 0x00, 0x00, 0x0c,\n    // number of address indices:\n    0x00, 0x00, 0x00, 0x02,\n    // address index 0:\n    0x00, 0x00, 0x00, 0x03,\n    // address index 1:\n    0x00, 0x00, 0x00, 0x07,\n    // groupID:\n    0x00, 0x00, 0x30, 0x39,\n    // length of payload:\n    0x00, 0x00, 0x00, 0x03,\n    // payload:\n    0x43, 0x11, 0x00,\n    // number of outputs:\n    0x00, 0x00, 0x00, 0x01,\n    // outputs[0]\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x01,\n    // addrs[0]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"nft-transfer-op"},"NFT Transfer Op"),(0,i.kt)("p",null,"An NFT transfer operation sends an unspent NFT transfer output to a new set of owners."),(0,i.kt)("h3",{id:"what-nft-transfer-op-contains"},"What NFT Transfer Op Contains"),(0,i.kt)("p",null,"An NFT transfer operation contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AddressIndices")," and an untyped ",(0,i.kt)("inlineCode",{parentName:"p"},"NFTTransferOutput"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000d"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices"))," is a list of unique ints that define the private keys that are being used to spend the UTXO. Each UTXO has an array of addresses that can spend the UTXO. Each int represents the index in this address array that will sign this transaction. The array must be sorted low to high."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NFTTransferOutput"))," is the output of this operation and must be an ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#nft-transfer-output"},"NFT Transfer Output"),". This output doesn\u2019t have the ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeId")),", because the type is known by the context of being in this operation.")),(0,i.kt)("h3",{id:"gantt-nft-transfer-op-specification"},"Gantt NFT Transfer Op Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------------------------+------------------------------------+\n| type_id         : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| address_indices : []int      | 4 + 4 * len(address_indices) bytes |\n+-----------------+------------+------------------------------------+\n| group_id        : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| payload         : []byte     |             4 + len(payload) bytes |\n+-----------------+------------+------------------------------------+\n| locktime        : long       |                            8 bytes |\n+-----------+------------+------------------------------------------+\n| threshold       : int        |                            4 bytes |\n+-----------------+------------+------------------------------------+\n| addresses       : [][20]byte |      4 + 20 * len(addresses) bytes |\n+-----------------+------------+------------------------------------+\n                               |                  36 + len(payload) |\n                               |        + 4 * len(address_indices)  |\n                               |        + 20 * len(addresses) bytes |\n                               +------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-nft-transfer-op-specification"},"Proto NFT Transfer Op Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message NFTTransferOp {\n    uint32 typeID = 1;                   // 04 bytes\n    repeated uint32 address_indices = 2; // 04 bytes + 04 bytes * len(address_indices)\n    uint32 group_id = 3;                 // 04 bytes\n    bytes payload = 4;                   // 04 bytes + len(payload)\n    uint64 locktime = 5;                 // 08 bytes\n    uint32 threshold = 6;                // 04 bytes\n    repeated bytes addresses = 7;        // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"nft-transfer-op-example"},"NFT Transfer Op Example"),(0,i.kt)("p",null,"Let\u2019s make an NFT transfer operation with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"13")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x00000007")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x00000003")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GroupID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12345")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Payload")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x431100")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"54321")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xc3344128e060128ede3523a24a461c8943ab0859")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x51025c61fbcfc078f69334f834be6dd26d55a955"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID         <- 0x0000000d\n    AddressIndices <- [\n        0x00000007,\n        0x00000003,\n    ]\n    GroupID        <- 0x00003039\n    Payload        <- 0x431100\n    Locktime       <- 0x000000000000d431\n    Threshold      <- 00000001\n    Addresses      <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // Type ID\n    0x00, 0x00, 0x00, 0x0d,\n    // number of address indices:\n    0x00, 0x00, 0x00, 0x02,\n    // address index 0:\n    0x00, 0x00, 0x00, 0x07,\n    // address index 1:\n    0x00, 0x00, 0x00, 0x03,\n    // groupID:\n    0x00, 0x00, 0x30, 0x39,\n    // length of payload:\n    0x00, 0x00, 0x00, 0x03,\n    // payload:\n    0x43, 0x11, 0x00,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x02,\n    // addrs[0]:\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55,\n    // addrs[1]:\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"initial-state"},"Initial State"),(0,i.kt)("p",null,"Initial state describes the initial state of an asset when it is created. It contains the ID of the feature extension that the asset uses, and a variable length array of outputs that denote the genesis UTXO set of the asset."),(0,i.kt)("h3",{id:"what-initial-state-contains"},"What Initial State Contains"),(0,i.kt)("p",null,"Initial state contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"FxID")," and an array of ",(0,i.kt)("inlineCode",{parentName:"p"},"Output"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"FxID"))," is an int that defines which feature extension this state is part of. For SECP256K1 assets, this is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000000"),". For NFT assets, this is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000001"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outputs"))," is a variable length array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#outputs"},"outputs"),", as defined above.")),(0,i.kt)("h3",{id:"gantt-initial-state-specification"},"Gantt Initial State Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------------+----------+-------------------------------+\n| fx_id         : int      |                       4 bytes |\n+---------------+----------+-------------------------------+\n| outputs       : []Output |       4 + size(outputs) bytes |\n+---------------+----------+-------------------------------+\n                           |       8 + size(outputs) bytes |\n                           +-------------------------------+\n")),(0,i.kt)("h3",{id:"proto-initial-state-specification"},"Proto Initial State Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message InitialState {\n    uint32 fx_id = 1;                  // 04 bytes\n    repeated Output outputs = 2;       // 04 + size(outputs) bytes\n}\n")),(0,i.kt)("h3",{id:"initial-state-example"},"Initial State Example"),(0,i.kt)("p",null,"Let\u2019s make an initial state:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FxID"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"InitialState"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'["Example SECP256K1 Transfer Output from above"]'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    FxID <- 0x00000000\n    InitialState  <- [\n        0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // fxID:\n    0x00, 0x00, 0x00, 0x00,\n    // num outputs:\n    0x00, 0x00, 0x00, 0x01,\n    // output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"credentials"},"Credentials"),(0,i.kt)("p",null,"Credentials have two possible types: ",(0,i.kt)("inlineCode",{parentName:"p"},"SECP256K1Credential"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"NFTCredential"),". Each credential is paired with an Input or Operation. The order of the credentials match the order of the inputs or operations."),(0,i.kt)("h2",{id:"secp256k1-credential"},"SECP256K1 Credential"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," credential contains a list of 65-byte recoverable signatures."),(0,i.kt)("h3",{id:"what-secp256k1-credential-contains"},"What SECP256K1 Credential Contains"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000009"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Signatures"))," is an array of 65-byte recoverable signatures. The order of the signatures must match the input\u2019s signature indices.")),(0,i.kt)("h3",{id:"gantt-secp256k1-credential-specification"},"Gantt SECP256K1 Credential Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------------------------+---------------------------------+\n| type_id         : int        |                         4 bytes |\n+-----------------+------------+---------------------------------+\n| signatures      : [][65]byte |  4 + 65 * len(signatures) bytes |\n+-----------------+------------+---------------------------------+\n                               |  8 + 65 * len(signatures) bytes |\n                               +---------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-credential-specification"},"Proto SECP256K1 Credential Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1Credential {\n    uint32 typeID = 1;             // 4 bytes\n    repeated bytes signatures = 2; // 4 bytes + 65 bytes * len(signatures)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-credential-example"},"SECP256K1 Credential Example"),(0,i.kt)("p",null,"Let\u2019s make a payment input with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"9")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"signatures")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID         <- 0x00000009\n    Signatures <- [\n        0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00,\n        0x404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00,\n    ]\n]\n=\n[\n    // Type ID\n    0x00, 0x00, 0x00, 0x09,\n    // length:\n    0x00, 0x00, 0x00, 0x02,\n    // sig[0]\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n    0x00,\n    // sig[1]\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,\n    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d, 0x5f,\n    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d, 0x6f,\n    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,\n    0x00,\n]\n")),(0,i.kt)("h2",{id:"nft-credential"},"NFT Credential"),(0,i.kt)("p",null,"An NFT credential is the same as an ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#secp256k1-credential"},"secp256k1 credential")," with a different TypeID. The TypeID for an NFT credential is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x0000000e"),"."),(0,i.kt)("h2",{id:"unsigned-transactions"},"Unsigned Transactions"),(0,i.kt)("p",null,"Unsigned transactions contain the full content of a transaction with only the signatures missing. Unsigned transactions have four possible types: ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#what-unsigned-create-asset-tx-contains"},(0,i.kt)("inlineCode",{parentName:"a"},"CreateAssetTx")),", ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#what-unsigned-operation-tx-contains"},(0,i.kt)("inlineCode",{parentName:"a"},"OperationTx")),", ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#what-unsigned-import-tx-contains"},(0,i.kt)("inlineCode",{parentName:"a"},"ImportTx")),", and ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#what-unsigned-export-tx-contains"},(0,i.kt)("inlineCode",{parentName:"a"},"ExportTx")),". They all embed ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#what-base-tx-contains"},(0,i.kt)("inlineCode",{parentName:"a"},"BaseTx")),", which contains common fields and operations."),(0,i.kt)("h2",{id:"unsigned-basetx"},"Unsigned BaseTx"),(0,i.kt)("h3",{id:"what-base-tx-contains"},"What Base Tx Contains"),(0,i.kt)("p",null,"A base tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NetworkID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BlockchainID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Outputs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Inputs"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Memo"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000000"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NetworkID"))," is an int that defines which network this transaction is meant to be issued to. This value is meant to support transaction routing and is not designed for replay attack prevention."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BlockchainID"))," is a 32-byte array that defines which blockchain this transaction was issued to. This is used for replay attack prevention for transactions that could potentially be valid across network or blockchain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outputs"))," is an array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#transferable-output"},"transferable output objects"),". Outputs must be sorted lexicographically by their serialized representation. The total quantity of the assets created in these outputs must be less than or equal to the total quantity of each asset consumed in the inputs minus the transaction fee."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Inputs"))," is an array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#transferable-input"},"transferable input objects"),". Inputs must be sorted and unique. Inputs are sorted first lexicographically by their ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," and then by the ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex"))," from low to high. If there are inputs that have the same ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," and ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),", then the transaction is invalid as this would result in a double spend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Memo"))," Memo field contains arbitrary bytes, up to 256 bytes.")),(0,i.kt)("h3",{id:"gantt-base-tx-specification"},"Gantt Base Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+--------------------------------------+-----------------------------------------+\n| type_id       : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| network_id    : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| blockchain_id : [32]byte             |                                32 bytes |\n+---------------+----------------------+-----------------------------------------+\n| outputs       : []TransferableOutput |                 4 + size(outputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| inputs        : []TransferableInput  |                  4 + size(inputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| memo          : [256]byte            |                    4 + size(memo) bytes |\n+---------------+----------------------+-----------------------------------------+\n                          | 52 + size(outputs) + size(inputs) + size(memo) bytes |\n                          +------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-base-tx-specification"},"Proto Base Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message BaseTx {\n    uint32 typeID = 1;           // 04 bytes\n    uint32 network_id = 2;       // 04 bytes\n    bytes blockchain_id = 3;     // 32 bytes\n    repeated Output outputs = 4; // 04 bytes + size(outs)\n    repeated Input inputs = 5;   // 04 bytes + size(ins)\n    bytes memo = 6;              // 04 bytes + size(memo)\n}\n")),(0,i.kt)("h3",{id:"base-tx-example"},"Base Tx Example"),(0,i.kt)("p",null,"Let\u2019s make an base tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NetworkID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BlockchainID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xffffffffeeeeeeeeddddddddcccccccbbbbbbbbaaaaaaaa9999999988888888")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outputs")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"Example Transferable Output as defined above"')))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Inputs")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"Example Transferable Input as defined above"')))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Memo")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00010203"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID       <- 0x00000000\n    NetworkID    <- 0x00000004\n    BlockchainID <- 0xffffffffeeeeeeeeddddddddcccccccbbbbbbbbaaaaaaaa9999999988888888\n    Outputs      <- [\n        0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n    ]\n    Inputs       <- [\n        0xf1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd15000000020000000700000003\n    ]\n    Memo <- 0x00010203\n]\n=\n[\n    // typeID\n    0x00, 0x00, 0x00, 0x00,\n    // networkID:\n    0x00, 0x00, 0x00, 0x04,\n    // blockchainID:\n    0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,\n    0xdd, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc,\n    0xbb, 0xbb, 0xbb, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa,\n    0x99, 0x99, 0x99, 0x99, 0x88, 0x88, 0x88, 0x88,\n    // number of outputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable output:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n    // number of inputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable input:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03,\n    // Memo length:\n    0x00, 0x00, 0x00, 0x04,\n    // Memo:\n    0x00, 0x01, 0x02, 0x03,\n]\n")),(0,i.kt)("h2",{id:"unsigned-createassettx"},"Unsigned CreateAssetTx"),(0,i.kt)("h3",{id:"what-unsigned-create-asset-tx-contains"},"What Unsigned Create Asset Tx Contains"),(0,i.kt)("p",null,"An unsigned create asset tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Symbol"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Denomination"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"InitialStates"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000001"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Name"))," is a human readable string that defines the name of the asset this transaction will create. The name is not guaranteed to be unique. The name must consist of only printable ASCII characters and must be no longer than 128 characters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Symbol"))," is a human readable string that defines the symbol of the asset this transaction will create. The symbol is not guaranteed to be unique. The symbol must consist of only printable ASCII characters and must be no longer than 4 characters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Denomination"))," is a byte that defines the divisibility of the asset this transaction will create. For example, the LUX token is divisible into billionths. Therefore, the denomination of the LUX token is 9. The denomination must be no more than 32."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"InitialStates"))," is a variable length array that defines the feature extensions this asset supports, and the ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#initial-state"},"initial state")," of those feature extensions.")),(0,i.kt)("h3",{id:"gantt-unsigned-create-asset-tx-specification"},"Gantt Unsigned Create Asset Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+----------------+----------------+--------------------------------------+\n| base_tx        : BaseTx         |                  size(base_tx) bytes |\n+----------------+----------------+--------------------------------------+\n| name           : string         |                  2 + len(name) bytes |\n+----------------+----------------+--------------------------------------+\n| symbol         : string         |                2 + len(symbol) bytes |\n+----------------+----------------+--------------------------------------+\n| denomination   : byte           |                              1 bytes |\n+----------------+----------------+--------------------------------------+\n| initial_states : []InitialState |       4 + size(initial_states) bytes |\n+----------------+----------------+--------------------------------------+\n                                  | size(base_tx) + size(initial_states) |\n                                  |  + 9 + len(name) + len(symbol) bytes |\n                                  +--------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-create-asset-tx-specification"},"Proto Unsigned Create Asset Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message CreateAssetTx {\n    BaseTx base_tx = 1;                       // size(base_tx)\n    string name = 2;                          // 2 bytes + len(name)\n    name symbol = 3;                          // 2 bytes + len(symbol)\n    uint8 denomination = 4;                   // 1 bytes\n    repeated InitialState initial_states = 5; // 4 bytes + size(initial_states)\n}\n")),(0,i.kt)("h3",{id:"unsigned-create-asset-tx-example"},"Unsigned Create Asset Tx Example"),(0,i.kt)("p",null,"Let\u2019s make an unsigned base tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BaseTx"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example BaseTx as defined above with ID set to 1"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Name"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Volatility Index")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Symbol"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"VIX")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Denomination"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"InitialStates")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"Example Initial State as defined above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx        <- 0x0000000100000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    Name          <- 0x0010566f6c6174696c69747920496e646578\n    Symbol        <- 0x0003564958\n    Denomination  <- 0x02\n    InitialStates <- [\n        0x0000000000000001000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04,\n    0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,\n    0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // name:\n    0x00, 0x10, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69,\n    0x6c, 0x69, 0x74, 0x79, 0x20, 0x49, 0x6e, 0x64,\n    0x65, 0x78,\n    // symbol length:\n    0x00, 0x03,\n    // symbol:\n    0x56, 0x49, 0x58,\n    // denomination:\n    0x02,\n    // number of InitialStates:\n    0x00, 0x00, 0x00, 0x01,\n    // InitialStates[0]:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"unsigned-operationtx"},"Unsigned OperationTx"),(0,i.kt)("h3",{id:"what-unsigned-operation-tx-contains"},"What Unsigned Operation Tx Contains"),(0,i.kt)("p",null,"An unsigned operation tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Ops"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000002"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Ops"))," is a variable-length array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#transferable-op"},"Transferable Ops"),".")),(0,i.kt)("h3",{id:"gantt-unsigned-operation-tx-specification"},"Gantt Unsigned Operation Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------+------------------+-------------------------------------+\n| base_tx : BaseTx           |                 size(base_tx) bytes |\n+---------+------------------+-------------------------------------+\n| ops     : []TransferableOp |                 4 + size(ops) bytes |\n+---------+------------------+-------------------------------------+\n                             | 4 + size(ops) + size(base_tx) bytes |\n                             +-------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-operation-tx-specification"},"Proto Unsigned Operation Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message OperationTx {\n    BaseTx base_tx = 1;          // size(base_tx)\n    repeated TransferOp ops = 2; // 4 bytes + size(ops)\n}\n")),(0,i.kt)("h3",{id:"unsigned-operation-tx-example"},"Unsigned Operation Tx Example"),(0,i.kt)("p",null,"Let\u2019s make an unsigned operation tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BaseTx"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example BaseTx above" with TypeID set to 2')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Ops")),": ","[",(0,i.kt)("inlineCode",{parentName:"li"},'"Example Transferable Op as defined above"'),"]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx <- 0x0000000200000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    Ops <- [\n        0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f00000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a090807060504030201000000000050000000d0000000200000003000000070000303900000003431100000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,\n    0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // number of operations:\n    0x00, 0x00, 0x00, 0x01,\n    // transfer operation:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x01, 0xf1, 0xe1, 0xd1, 0xc1,\n    0xb1, 0xa1, 0x91, 0x81, 0x71, 0x61, 0x51, 0x41,\n    0x31, 0x21, 0x11, 0x01, 0xf0, 0xe0, 0xd0, 0xc0,\n    0xb0, 0xa0, 0x90, 0x80, 0x70, 0x60, 0x50, 0x40,\n    0x30, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x03,\n    0x43, 0x11, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,\n    0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61, 0xfb,\n    0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8, 0x34,\n    0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55, 0xc3,\n    0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e, 0xde,\n    0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89, 0x43,\n    0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"unsigned-importtx"},"Unsigned ImportTx"),(0,i.kt)("h3",{id:"what-unsigned-import-tx-contains"},"What Unsigned Import Tx Contains"),(0,i.kt)("p",null,"An unsigned import tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SourceChain")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Ins"),". ","*"," The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),"for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000003"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SourceChain"))," is a 32-byte source blockchain ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Ins"))," is a variable length array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#transferable-input"},"Transferable Inputs"),".")),(0,i.kt)("h3",{id:"gantt-unsigned-import-tx-specification"},"Gantt Unsigned Import Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------+----------------------+-----------------------------+\n| base_tx : BaseTx               |         size(base_tx) bytes |\n+-----------------+--------------+-----------------------------+\n| source_chain    : [32]byte     |                    32 bytes |\n+---------+----------------------+-----------------------------+\n| ins     : []TransferIn         |         4 + size(ins) bytes |\n+---------+----------------------+-----------------------------+\n                        | 36 + size(ins) + size(base_tx) bytes |\n                        +--------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-import-tx-specification"},"Proto Unsigned Import Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message ImportTx {\n    BaseTx base_tx = 1;          // size(base_tx)\n    bytes source_chain = 2;      // 32 bytes\n    repeated TransferIn ins = 3; // 4 bytes + size(ins)\n}\n")),(0,i.kt)("h3",{id:"unsigned-import-tx-example"},"Unsigned Import Tx Example"),(0,i.kt)("p",null,"Let\u2019s make an unsigned import tx that uses the inputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BaseTx"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example BaseTx as defined above"'),", but with ",(0,i.kt)("inlineCode",{parentName:"li"},"TypeID")," set to ",(0,i.kt)("inlineCode",{parentName:"li"},"3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SourceChain"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000000000000000000000000000000000000000000000000000000000000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Ins"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transfer Input as defined above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx        <- 0x0000000300000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    SourceChain <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Ins <- [\n        f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd15000000020000000300000007,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x03,\n    0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,\n    0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // source chain:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // input count:\n    0x00, 0x00, 0x00, 0x01,\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,\n]\n")),(0,i.kt)("h2",{id:"unsigned-exporttx"},"Unsigned ExportTx"),(0,i.kt)("h3",{id:"what-unsigned-export-tx-contains"},"What Unsigned Export Tx Contains"),(0,i.kt)("p",null,"An unsigned export tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DestinationChain"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Outs"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000004"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"DestinationChain"))," is the 32 byte ID of the chain where the funds are being exported to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outs"))," is a variable length array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#transferable-output"},"Transferable Outputs"),".")),(0,i.kt)("h3",{id:"gantt-unsigned-export-tx-specification"},"Gantt Unsigned Export Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-------------------+---------------+--------------------------------------+\n| base_tx           : BaseTx        |                  size(base_tx) bytes |\n+-------------------+---------------+--------------------------------------+\n| destination_chain : [32]byte      |                             32 bytes |\n+-------------------+---------------+--------------------------------------+\n| outs              : []TransferOut |                 4 + size(outs) bytes |\n+-------------------+---------------+--------------------------------------+\n                          | 36 + size(outs) + size(base_tx) bytes |\n                          +---------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-export-tx-specification"},"Proto Unsigned Export Tx Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message ExportTx {\n    BaseTx base_tx = 1;            // size(base_tx)\n    bytes destination_chain = 2;   // 32 bytes\n    repeated TransferOut outs = 3; // 4 bytes + size(outs)\n}\n")),(0,i.kt)("h3",{id:"unsigned-export-tx-example"},"Unsigned Export Tx Example"),(0,i.kt)("p",null,"Let\u2019s make an unsigned export tx that uses the outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BaseTx"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example BaseTx as defined above"'),", but with ",(0,i.kt)("inlineCode",{parentName:"li"},"TypeID")," set to ",(0,i.kt)("inlineCode",{parentName:"li"},"4")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DestinationChain"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000000000000000000000000000000000000000000000000000000000000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Outs"),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transfer Output as defined above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx           <- 0x0000000400000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    DestinationChain <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Outs <- [\n        000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x04\n    0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,\n    0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // destination_chain:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // outs[] count:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,\n    0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,\n    0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"signed-transaction"},"Signed Transaction"),(0,i.kt)("p",null,"A signed transaction is an unsigned transaction with the addition of an array of ",(0,i.kt)("a",{parentName:"p",href:"/specs/avm-transaction-serialization#credentials"},"credentials"),"."),(0,i.kt)("h3",{id:"what-signed-transaction-contains"},"What Signed Transaction Contains"),(0,i.kt)("p",null,"A signed transaction contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"CodecID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UnsignedTx"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Credentials"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID"))," The only current valid codec id is ",(0,i.kt)("inlineCode",{parentName:"li"},"00 00"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UnsignedTx"))," is an unsigned transaction, as described above."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Credentials"))," is an array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#credentials"},"credentials"),". Each credential will be paired with the input in the same index at this credential.")),(0,i.kt)("h3",{id:"gantt-signed-transaction-specification"},"Gantt Signed Transaction Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------------------+--------------+------------------------------------------------+\n| codec_id            : uint16       |                                        2 bytes |\n+---------------------+--------------+------------------------------------------------+\n| unsigned_tx         : UnsignedTx   |                        size(unsigned_tx) bytes |\n+---------------------+--------------+------------------------------------------------+\n| credentials         : []Credential |                    4 + size(credentials) bytes |\n+---------------------+--------------+------------------------------------------------+\n                                     | 6 + size(unsigned_tx) + len(credentials) bytes |\n                                     +------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-signed-transaction-specification"},"Proto Signed Transaction Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message Tx {\n    uint16 codec_id = 1;                 // 2 bytes\n    UnsignedTx unsigned_tx = 2;          // size(unsigned_tx)\n    repeated Credential credentials = 3; // 4 bytes + size(credentials)\n}\n")),(0,i.kt)("h3",{id:"signed-transaction-example"},"Signed Transaction Example"),(0,i.kt)("p",null,"Let\u2019s make a signed transaction that uses the unsigned transaction and credentials from the previous examples."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UnsignedTx")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000100000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Credentials"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000900000002000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID     <- 0x0000\n    UnsignedTx  <- 0x0000000100000004ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000007000000030000000400010203\n    Credentials <- [\n        0x0000000900000002000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00,\n    ]\n]\n=\n[\n    // Codec ID\n    0x00, 0x00,\n    // unsigned transaction:\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04,\n    0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,\n    0xdd, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc,\n    0xbb, 0xbb, 0xbb, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa,\n    0x99, 0x99, 0x99, 0x99, 0x88, 0x88, 0x88, 0x88,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,\n    0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,\n    0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,\n    0x00, 0x00, 0x00, 0x01, 0xf1, 0xe1, 0xd1, 0xc1,\n    0xb1, 0xa1, 0x91, 0x81, 0x71, 0x61, 0x51, 0x41,\n    0x31, 0x21, 0x11, 0x01, 0xf0, 0xe0, 0xd0, 0xc0,\n    0xb0, 0xa0, 0x90, 0x80, 0x70, 0x60, 0x50, 0x40,\n    0x30, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03,\n    0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x02, 0x03\n    // number of credentials:\n    0x00, 0x00, 0x00, 0x01,\n    // credential[0]:\n    0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n    0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,\n    0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,\n    0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,\n    0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d,\n    0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,\n    0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d,\n    0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,\n    0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e,\n    0x7f, 0x00,\n")),(0,i.kt)("h2",{id:"utxo"},"UTXO"),(0,i.kt)("p",null,"A UTXO is a standalone representation of a transaction output."),(0,i.kt)("h3",{id:"what-utxo-contains"},"What UTXO Contains"),(0,i.kt)("p",null,"A UTXO contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"CodecID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TxID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTXOIndex"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AssetID"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Output"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID"))," The only valid ",(0,i.kt)("inlineCode",{parentName:"li"},"CodecID")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"00 00")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," is a 32-byte transaction ID. Transaction IDs are calculated by taking sha256 of the bytes of the signed transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex"))," is an int that specifies which output in the transaction specified by ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," that this utxo was created by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID"))," is a 32-byte array that defines which asset this utxo references."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output"))," is the output object that created this utxo. The serialization of Outputs was defined above. Valid output types are ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#secp256k1-mint-output"},"SECP Mint Output"),", ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#secp256k1-transfer-output"},"SECP Transfer Output"),", ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#nft-mint-output"},"NFT Mint Output"),", ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#nft-transfer-output"},"NFT Transfer Output"),".")),(0,i.kt)("h3",{id:"gantt-utxo-specification"},"Gantt UTXO Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+--------------+----------+-------------------------+\n| codec_id     : uint16   |                 2 bytes |\n+--------------+----------+-------------------------+\n| tx_id        : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output_index : int      |                 4 bytes |\n+--------------+----------+-------------------------+\n| asset_id     : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output       : Output   |      size(output) bytes |\n+--------------+----------+-------------------------+\n                          | 70 + size(output) bytes |\n                          +-------------------------+\n")),(0,i.kt)("h3",{id:"proto-utxo-specification"},"Proto UTXO Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message Utxo {\n    uint16 codec_id = 1;     // 02 bytes\n    bytes tx_id = 2;         // 32 bytes\n    uint32 output_index = 3; // 04 bytes\n    bytes asset_id = 4;      // 32 bytes\n    Output output = 5;       // size(output)\n}\n")),(0,i.kt)("h3",{id:"utxo-examples"},"UTXO Examples"),(0,i.kt)("p",null,"Let\u2019s make a UTXO with a SECP Mint Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x47c92ed62d18e3cccda512f60a0d5b1e939b6ab73fb2d011e5e306e79bd0448f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000001")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x47c92ed62d18e3cccda512f60a0d5b1e939b6ab73fb2d011e5e306e79bd0448f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000006000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID   <- 0x0000\n    TxID      <- 0x47c92ed62d18e3cccda512f60a0d5b1e939b6ab73fb2d011e5e306e79bd0448f\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x47c92ed62d18e3cccda512f60a0d5b1e939b6ab73fb2d011e5e306e79bd0448f\n    Output    <- 00000006000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0x47, 0xc9, 0x2e, 0xd6, 0x2d, 0x18, 0xe3, 0xcc,\n    0xcd, 0xa5, 0x12, 0xf6, 0x0a, 0x0d, 0x5b, 0x1e,\n    0x93, 0x9b, 0x6a, 0xb7, 0x3f, 0xb2, 0xd0, 0x11,\n    0xe5, 0xe3, 0x06, 0xe7, 0x9b, 0xd0, 0x44, 0x8f,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x47, 0xc9, 0x2e, 0xd6, 0x2d, 0x18, 0xe3, 0xcc,\n    0xcd, 0xa5, 0x12, 0xf6, 0x0a, 0x0d, 0x5b, 0x1e,\n    0x93, 0x9b, 0x6a, 0xb7, 0x3f, 0xb2, 0xd0, 0x11,\n    0xe5, 0xe3, 0x06, 0xe7, 0x9b, 0xd0, 0x44, 0x8f,\n    // secp mint output:\n    0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0x3c, 0xb7, 0xd3, 0x84,\n    0x2e, 0x8c, 0xee, 0x6a, 0x0e, 0xbd, 0x09, 0xf1,\n    0xfe, 0x88, 0x4f, 0x68, 0x61, 0xe1, 0xb2, 0x9c,\n    0x62, 0x76, 0xaa, 0x2a,\n]\n")),(0,i.kt)("p",null,"Let\u2019s make a UTXO with a SECP Transfer Output from the signed transaction created above:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xf966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transferable Output as defined above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID   <- 0x0000\n    TxID      <- 0xf966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7\n    UTXOIndex <- 0x00000000\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Output    <-     0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0xf9, 0x66, 0x75, 0x0f, 0x43, 0x88, 0x67, 0xc3,\n    0xc9, 0x82, 0x8d, 0xdc, 0xdb, 0xe6, 0x60, 0xe2,\n    0x1c, 0xcd, 0xbb, 0x36, 0xa9, 0x27, 0x69, 0x58,\n    0xf0, 0x11, 0xba, 0x47, 0x2f, 0x75, 0xd4, 0xe7,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x00,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // secp transfer output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,\n    0x24, 0x25, 0x26, 0x27,\n]\n")),(0,i.kt)("p",null,"Let\u2019s make a UTXO with an NFT Mint Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000001")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000a00000000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID   <- 0x0000\n    TxID      <- 0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7\n    Output    <- 0000000a00000000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0x03, 0xc6, 0x86, 0xef, 0xe8, 0xd8, 0x0c, 0x51,\n    0x9f, 0x35, 0x69, 0x29, 0xf6, 0xda, 0x94, 0x5f,\n    0x7f, 0xf9, 0x03, 0x78, 0xf0, 0x04, 0x4b, 0xb0,\n    0xe1, 0xa5, 0xd6, 0xc1, 0xad, 0x06, 0xba, 0xe7,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x03, 0xc6, 0x86, 0xef, 0xe8, 0xd8, 0x0c, 0x51,\n    0x9f, 0x35, 0x69, 0x29, 0xf6, 0xda, 0x94, 0x5f,\n    0x7f, 0xf9, 0x03, 0x78, 0xf0, 0x04, 0x4b, 0xb0,\n    0xe1, 0xa5, 0xd6, 0xc1, 0xad, 0x06, 0xba, 0xe7,\n    // nft mint output:\n    0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,\n    0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,\n    0x61, 0xe1, 0xb2, 0x9c, 0x62, 0x76, 0xaa, 0x2a,\n]\n")),(0,i.kt)("p",null,"Let\u2019s make a UTXO with an NFT Transfer Output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xa68f794a7de7bdfc5db7ba5b73654304731dd586bbf4a6d7b05be6e49de2f936")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," = ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000001")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000b000000000000000b4e4654205061796c6f6164000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID   <- 0x0000\n    TxID      <- 0xa68f794a7de7bdfc5db7ba5b73654304731dd586bbf4a6d7b05be6e49de2f936\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x03c686efe8d80c519f356929f6da945f7ff90378f0044bb0e1a5d6c1ad06bae7\n    Output    <- 0000000b000000000000000b4e4654205061796c6f6164000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c6276aa2a\n]\n=\n[\n    // codecID:\n    0x00, 0x00,\n    // txID:\n    0xa6, 0x8f, 0x79, 0x4a, 0x7d, 0xe7, 0xbd, 0xfc,\n    0x5d, 0xb7, 0xba, 0x5b, 0x73, 0x65, 0x43, 0x04,\n    0x73, 0x1d, 0xd5, 0x86, 0xbb, 0xf4, 0xa6, 0xd7,\n    0xb0, 0x5b, 0xe6, 0xe4, 0x9d, 0xe2, 0xf9, 0x36,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x03, 0xc6, 0x86, 0xef, 0xe8, 0xd8, 0x0c, 0x51,\n    0x9f, 0x35, 0x69, 0x29, 0xf6, 0xda, 0x94, 0x5f,\n    0x7f, 0xf9, 0x03, 0x78, 0xf0, 0x04, 0x4b, 0xb0,\n    0xe1, 0xa5, 0xd6, 0xc1, 0xad, 0x06, 0xba, 0xe7,\n    // nft transfer output:\n    0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x0b, 0x4e, 0x46, 0x54, 0x20,\n    0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x3c,\n    0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a, 0x0e,\n    0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68, 0x61,\n    0xe1, 0xb2, 0x9c, 0x62, 0x76, 0xaa, 0x2a,\n]\n")),(0,i.kt)("h2",{id:"genesisasset"},"GenesisAsset"),(0,i.kt)("p",null,"An asset to be issued in an instance of the AVM's Genesis"),(0,i.kt)("h3",{id:"what-genesisasset-contains"},"What GenesisAsset Contains"),(0,i.kt)("p",null,"An instance of a GenesisAsset contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"Alias"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NetworkID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BlockchainID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Outputs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Inputs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Memo"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Symbol"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Denomination"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"InitialStates"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Alias"))," is the alias for this asset."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NetworkID"))," defines which network this transaction is meant to be issued to. This value is meant to support transaction routing and is not designed for replay attack prevention."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BlockchainID"))," is the ID (32-byte array) that defines which blockchain this transaction was issued to. This is used for replay attack prevention for transactions that could potentially be valid across network or blockchain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outputs"))," is an array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#transferable-output"},"transferable output objects"),". Outputs must be sorted lexicographically by their serialized representation. The total quantity of the assets created in these outputs must be less than or equal to the total quantity of each asset consumed in the inputs minus the transaction fee."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Inputs"))," is an array of ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#transferable-input"},"transferable input objects"),". Inputs must be sorted and unique. Inputs are sorted first lexicographically by their ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," and then by the ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex"))," from low to high. If there are inputs that have the same ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," and ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),", then the transaction is invalid as this would result in a double spend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Memo"))," is a memo field that contains arbitrary bytes, up to 256 bytes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Name"))," is a human readable string that defines the name of the asset this transaction will create. The name is not guaranteed to be unique. The name must consist of only printable ASCII characters and must be no longer than 128 characters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Symbol"))," is a human readable string that defines the symbol of the asset this transaction will create. The symbol is not guaranteed to be unique. The symbol must consist of only printable ASCII characters and must be no longer than 4 characters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Denomination"))," is a byte that defines the divisibility of the asset this transaction will create. For example, the LUX token is divisible into billionths. Therefore, the denomination of the LUX token is 9. The denomination must be no more than 32."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"InitialStates"))," is a variable length array that defines the feature extensions this asset supports, and the ",(0,i.kt)("a",{parentName:"li",href:"/specs/avm-transaction-serialization#initial-state"},"initial state")," of those feature extensions.")),(0,i.kt)("h3",{id:"gantt-genesisasset-specification"},"Gantt GenesisAsset Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+----------------+----------------------+--------------------------------+\n| alias          : string               |           2 + len(alias) bytes |\n+----------------+----------------------+--------------------------------+\n| network_id     : int                  |                        4 bytes |\n+----------------+----------------------+--------------------------------+\n| blockchain_id  : [32]byte             |                       32 bytes |\n+----------------+----------------------+--------------------------------+\n| outputs        : []TransferableOutput |        4 + size(outputs) bytes |\n+----------------+----------------------+--------------------------------+\n| inputs         : []TransferableInput  |         4 + size(inputs) bytes |\n+----------------+----------------------+--------------------------------+\n| memo           : [256]byte            |           4 + size(memo) bytes |\n+----------------+----------------------+--------------------------------+\n| name           : string               |            2 + len(name) bytes |\n+----------------+----------------------+--------------------------------+\n| symbol         : string               |          2 + len(symbol) bytes |\n+----------------+----------------------+--------------------------------+\n| denomination   : byte                 |                        1 bytes |\n+----------------+----------------------+--------------------------------+\n| initial_states : []InitialState       | 4 + size(initial_states) bytes |\n+----------------+----------------------+--------------------------------+\n|           59 + size(alias) + size(outputs) + size(inputs) + size(memo) |\n|                 + len(name) + len(symbol) + size(initial_states) bytes |\n+------------------------------------------------------------------------+\n\n### Proto GenesisAsset Specification\n\n```text\nmessage GenesisAsset {\n    string alias = 1;                          // 2 bytes + len(alias)\n    uint32 network_id = 2;                     // 04 bytes\n    bytes blockchain_id = 3;                   // 32 bytes\n    repeated Output outputs = 4;               // 04 bytes + size(outputs)\n    repeated Input inputs = 5;                 // 04 bytes + size(inputs)\n    bytes memo = 6;                            // 04 bytes + size(memo)\n    string name = 7;                           // 2 bytes + len(name)\n    name symbol = 8;                           // 2 bytes + len(symbol)\n    uint8 denomination = 9;                    // 1 bytes\n    repeated InitialState initial_states = 10; // 4 bytes + size(initial_states)\n}\n")),(0,i.kt)("h3",{id:"genesisasset-example"},"GenesisAsset Example"),(0,i.kt)("p",null,"Let\u2019s make a GenesisAsset:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Alias")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"asset1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NetworkID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12345")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BlockchainID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000000000000000000000000000000000000000000000000000000000000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outputs")),": ","[","]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Inputs")),": ","[","]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Memo")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"2Zc54v4ek37TEwu4LiV3j41PUMRd6acDDU3ZCVSxE7X")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Name")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"asset1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Symbol")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"MFCA")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Denomination")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"InitialStates")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"Example Initial State as defined above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Alias         <- 0x617373657431\n    NetworkID     <- 0x00003039\n    BlockchainID  <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Outputs       <- []\n    Inputs        <- []\n    Memo          <- 0x66x726f6d20736e6f77666c616b6520746f206176616c616e636865\n    Name          <- 0x617373657431\n    Symbol        <- 0x66x726f6d20736e6f77666c616b6520746f206176616c616e636865\n    Denomination  <- 0x66x726f6d20736e6f77666c616b6520746f206176616c616e636865\n    InitialStates <- [\n        0x0000000000000001000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n    ]\n]\n=\n[\n    // asset alias len:\n    0x00, 0x06,\n    // asset alias:\n    0x61, 0x73, 0x73, 0x65, 0x74, 0x31,\n    // network_id:\n    0x00, 0x00, 0x30, 0x39,\n    // blockchain_id:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // output_len:\n    0x00, 0x00, 0x00, 0x00,\n    // input_len:\n    0x00, 0x00, 0x00, 0x00,\n    // memo_len:\n    0x00, 0x00, 0x00, 0x1b,\n    // memo:\n    0x66, 0x72, 0x6f, 0x6d, 0x20, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61,\n    0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68, 0x65,\n    // asset_name_len:\n    0x00, 0x0f,\n    // asset_name:\n    0x6d, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43, 0x61, 0x70, 0x41, 0x73, 0x73, 0x65, 0x74,\n    // symbol_len:\n    0x00, 0x04,\n    // symbol:\n    0x4d, 0x46, 0x43, 0x41,\n    // denomination:\n    0x07,\n    // number of InitialStates:\n    0x00, 0x00, 0x00, 0x01,\n    // InitialStates[0]:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"vertex"},"Vertex"),(0,i.kt)("p",null,"A vertex is a collection of transactions. It's the DAG equivalent of a block in a linear blockchain."),(0,i.kt)("h3",{id:"what-vertex-contains"},"What Vertex Contains"),(0,i.kt)("p",null,"A vertex contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Height"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Epoch"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentIDs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionCount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionSize"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Transactions"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Restrictions"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ChainID"))," is the ID of the chain this vertex exists on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Height"))," is the maximum height of a parent vertex plus 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Epoch"))," is the epoch this vertex belongs to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ParentIDs"))," are the IDs of this vertex's parents."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransactionCount"))," is the total number of transactions in this vertex."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransactionSize"))," is the total size of the transactions in this vertex."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Transactions"))," are the transactions in this vertex."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Restrictions"))," are IDs of transactions that must be accepted in the same epoch as this vertex or an earlier one.")),(0,i.kt)("h3",{id:"gantt-vertex-specification"},"Gantt Vertex Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+--------------+---------------+------------------------------+\n| chain_id     : [32]byte      | 32 bytes                     |\n+--------------+---------------+------------------------------+\n| height       : long          | 8 bytes                      |\n+--------------+---------------+------------------------------+\n| epoch        : int           | 4 bytes                      |\n+--------------+---------------+------------------------------+\n| parent_ids   : []ParentID    | 4 + size(parent_ids) bytes   |\n+--------------+---------------+------------------------------+\n| tx_count     : int           | 4 bytes                      |\n+--------------+---------------+------------------------------+\n| txs_size     : int           | 4 bytes                      |\n+--------------+---------------+------------------------------+\n| transactions : []Transaction | 4 + size(transactions) bytes |\n+--------------+---------------+------------------------------+\n| restrictions : []Restriction | 4 + size(restrictions) bytes |\n+--------------+---------------+-----------------------------------------+\n|   64 + size(parentIDs) + size(restrictions) + size(transactions) bytes |\n+------------------------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-vertex-specification"},"Proto Vertex Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message Vertex {\n    uint16 codec_id = 1;              // 04 bytes\n    bytes chain_id = 2;               // 32 bytes\n    uint64 height = 3;                // 08 bytes\n    uint32 epoch = 4;                 // 04 bytes\n    repeated bytes parent_ids = 5;    // 04 bytes + 32 bytes * count(parent_ids)\n    uint32 tx_count = 5;              // 04 bytes\n    uint32 txs_size = 6;              // 04 bytes\n    repeated bytes transactions = 9;  // 04 bytes + size(transactions)\n    repeated bytes restrictions = 10; // 04 bytes + size(restrictions)\n}\n")),(0,i.kt)("h3",{id:"vertex-example"},"Vertex Example"),(0,i.kt)("p",null,"Let\u2019s make a Vertex:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ChainID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xd891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Height")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Epoch")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ParentIDs")),": ",'["0x73fa32c486fe9feeb392ee374530c6fe076b08a111fd58e974e7f903a52951d2]'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Transactions")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"[Example BaseTx as defined above]")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Restrictions")),": []")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID          <- 0x0000\n    ChainID          <- 0xd891ad56056d9c01f18f43f58b5c784ad07a4a49cf3d1f11623804b5cba2c6bf\n    Height           <- 0x0000000000000003\n    Epoch            <- 0x00000000\n    ParentIDs        <- [0x73fa32c486fe9feeb392ee374530c6fe076b08a111fd58e974e7f903a52951d2]\n    Transactions     <- [Example BaseTx defined above]\n    Restrictions     <- []\n]\n=\n[\n   // codec id\n   00 00\n   // chain id\n   d8 91 ad 56 05 6d 9c 01 f1 8f 43 f5 8b 5c 78 4a d0 7a 4a 49 cf 3d 1f 11 62 38 04 b5 cb a2 c6 bf\n   // height\n   00 00 00 00 00 00 00 03\n   // epoch\n   00 00 00 00\n   // num parent IDs\n   00 00 00 01\n   // parent id 1\n   73 fa 32 c4 86 fe 9f ee b3 92 ee 37 45 30 c6 fe 07 6b 08 a1 11 fd 58 e9 74 e7 f9 03 a5 29 51 d2\n   // num txs\n   00 00 00 01\n   // size of the transaction\n   00 00 01 7b\n   // base tx from above\n   [omitted for brevity]\n   // num restrictions\n   00 00 00 00\n]\n")))}u.isMDXComponent=!0}}]);