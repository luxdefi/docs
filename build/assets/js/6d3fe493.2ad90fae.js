"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2247],{39136:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>l,frontMatter:()=>d,metadata:()=>s,toc:()=>a});var i=e(85893),c=e(11151);const d={},o="AuctionList.js",s={id:"deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/AuctionList.js",title:"AuctionList.js",description:"",source:"@site/docs/deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/AuctionList.js.md",sourceDirName:"deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend",slug:"/deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/AuctionList.js",permalink:"/deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/AuctionList.js",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/master/docs/deprecated/tutorials-contest/2021/drizzle-auction-manager/frontend/AuctionList.js.md",tags:[],version:"current",frontMatter:{}},r={},a=[];function u(t){const n={code:"code",h1:"h1",pre:"pre",...(0,c.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"auctionlistjs",children:"AuctionList.js"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'import React, { useState } from "react";\nimport { useDrizzleContext } from \'./drizzleContext\';\n\nfunction FetchAuctions({cacheCalls, userInfo}) {\n    const { drizzleVariables } = useDrizzleContext();\n    const { AuctionManager, accounts } = drizzleVariables;\n\n    const [bidPrices, setBidPrices] = useState(new Map([]))\n\n    const createBid = async (id, bidPrice) => {\n        await AuctionManager?.createBid(id, bidPrice).send({from: accounts[0]});\n        clearBidPriceInput(id);\n    }\n\n    const submitNewBid = (event, id) => {\n        event.preventDefault();\n        createBid(id, bidPrices.get(id));\n    }\n\n    const handleBidPriceChange = (event, id) => {\n        let _bidPrices = bidPrices;\n        _bidPrices.set(id, event.target.value);\n        setBidPrices(_bidPrices)\n    }\n\n    const clearBidPriceInput = (id) => {\n        let _bidPrices = bidPrices;\n        _bidPrices[id] = "";\n        setBidPrices(_bidPrices)\n    }\n\n    const getAuctionAnalytics = () => {\n        let auctionAnalytics = [];\n        for(let i = 0; i < cacheCalls.aId; i++) {\n            auctionAnalytics.push(cacheCalls.auctionAnalytics[i]);\n        }\n        return auctionAnalytics;\n    }\n\n    const allAuctions = cacheCalls.showAuctions;\n    const auctionAnalytics = getAuctionAnalytics();\n    return (\n        <table border="1" style={{maxWidth: "800px", width: "90%"}}>\n            <tr>\n                <td>Auction ID</td>\n                <td>Auction Details</td>\n                <td>Minimum Price</td>\n                <td>Bid</td>\n            </tr>\n            {\n                allAuctions !== undefined && allAuctions.map((auction, index) => (\n                    <tr>\n                        <td>\n                            {auction.auctionId}\n                        </td>\n                        <td>\n                            <b>{auction.name} <font size="2" color="green">{auction.userId == userInfo.id && "(created by you)"}</font></b><br/>\n                            <font size="2">{auction.description}</font><br/>\n                            <tr>\n                                <td>Total Bids</td>\n                                <td>Latest Bid</td>\n                                <td>Highest Bid</td>\n                                <td>Lowest Bid</td>\n                            </tr>\n                            <tr>\n                                <td>{auctionAnalytics[index]?.auctionBidId}</td>\n                                <td>\u20b9{auctionAnalytics[index]?.latestBid}</td>\n                                <td>\u20b9{auctionAnalytics[index]?.highestBid}</td>\n                                <td>\u20b9{auctionAnalytics[index]?.auctionBidId == 0 ? 0 : auctionAnalytics[index]?.lowestBid}</td>\n                            </tr>\n                        </td>\n                        <td>\n                            \u20b9{auction.msp}\n                        </td>\n                        <td>\n                            <form onSubmit={(event) => submitNewBid(event, auction.auctionId)} style={{margin: "10px"}}>\n                                <input required type="number" min={auction.msp} onChange={(event) => handleBidPriceChange(event, auction.auctionId)} placeholder="Enter your bid price"/><br/><br/>\n                                <input type="submit" value="Make Bid"/><br/><br/>\n                            </form>\n                        </td>\n                    </tr>\n                ))\n            }\n        </table>\n    )\n}\n\nexport default FetchAuctions;\n'})})]})}function l(t={}){const{wrapper:n}={...(0,c.a)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(u,{...t})}):u(t)}},11151:(t,n,e)=>{e.d(n,{Z:()=>s,a:()=>o});var i=e(67294);const c={},d=i.createContext(c);function o(t){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(c):t.components||c:o(t.components),i.createElement(d.Provider,{value:n},t.children)}}}]);