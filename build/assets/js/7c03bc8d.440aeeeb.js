"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5947],{74924:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var i=t(85893),s=t(11151);const r={},o="Distributed File Manager (DFM) using Lux, IPFS and ReactJS",a={id:"deprecated/tutorials-contest/2021/distributed-file-manager/README",title:"Distributed File Manager (DFM) using Lux, IPFS and ReactJS",description:"These tutorials were published as a snapshot of when they were written,",source:"@site/docs/deprecated/tutorials-contest/2021/distributed-file-manager/README.md",sourceDirName:"deprecated/tutorials-contest/2021/distributed-file-manager",slug:"/deprecated/tutorials-contest/2021/distributed-file-manager/",permalink:"/deprecated/tutorials-contest/2021/distributed-file-manager/",draft:!1,unlisted:!1,editUrl:"https://github.com/luxdefi/docs/edit/master/docs/deprecated/tutorials-contest/2021/distributed-file-manager/README.md",tags:[],version:"current",frontMatter:{}},c={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Understanding the Project",id:"understanding-the-project",level:2},{value:"<strong>Decoding IPFS and How is It Different?</strong>",id:"decoding-ipfs-and-how-is-it-different",level:3},{value:"Initializing the Working Directory",id:"initializing-the-working-directory",level:2},{value:"<strong>Setting up the ReactJS Project</strong>",id:"setting-up-the-reactjs-project",level:3},{value:"<strong>Setting up the Truffle Project</strong>",id:"setting-up-the-truffle-project",level:3},{value:"<strong>Get Lux&#39;s Credentials</strong>",id:"get-luxs-credentials",level:3},{value:"<strong>Add .env File</strong>",id:"add-env-file",level:3},{value:"Create the FileManager Contract",id:"create-the-filemanager-contract",level:2},{value:"<strong>Make a New File for Migrating Smart Contracts</strong>",id:"make-a-new-file-for-migrating-smart-contracts",level:2},{value:"<strong>Compile Contracts with Truffle</strong>",id:"compile-contracts-with-truffle",level:2},{value:"<strong>Fund the Account and Run Migrations on Lux&#39;s Testnet Test Network.</strong>",id:"fund-the-account-and-run-migrations-on-luxs-testnet-test-network",level:2},{value:"<strong>Fund Your Account</strong>",id:"fund-your-account",level:3},{value:"<strong>Run Migrations</strong>",id:"run-migrations",level:3},{value:"<strong>Possible Errors and Troubleshooting</strong>",id:"possible-errors-and-troubleshooting",level:3},{value:"Building the User Interface",id:"building-the-user-interface",level:2},{value:"BlockchainUtils Component",id:"blockchainutils-component",level:3},{value:"IPFSUploader Component",id:"ipfsuploader-component",level:3},{value:"IPFSViewer Component",id:"ipfsviewer-component",level:3},{value:"IPFSViewer Stylesheet",id:"ipfsviewer-stylesheet",level:3},{value:"Starting the Application",id:"starting-the-application",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2},{value:"About the Author",id:"about-the-author",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"distributed-file-manager-dfm-using-lux-ipfs-and-reactjs",children:"Distributed File Manager (DFM) using Lux, IPFS and ReactJS"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"These tutorials were published as a snapshot of when they were written,\nand may contain out-of-date-information.\nFor up-to-date information, please reach out to the owners of these\nprojects."})}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["In this tutorial we will be making a ",(0,i.jsx)(n.strong,{children:"Distributed File Manager"})," using the\n",(0,i.jsx)(n.strong,{children:"IPFS"})," protocol for storing our files, ",(0,i.jsx)(n.strong,{children:"Lux"})," network for storing the\nfile references of each address to their uploaded files and ",(0,i.jsx)(n.strong,{children:"ReactJS"})," for the\nfrontend code. For compiling and deploying our smart contracts, we will be using\n",(0,i.jsx)(n.strong,{children:"Truffle Suite"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For your information, ",(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com",children:"Truffle Suite"})," is a toolkit\nfor launching decentralized applications dapps on the EVM. With Truffle you can\nwrite and compile smart contracts, build artifacts, run migrations and interact\nwith deployed contracts. This tutorial illustrates how Truffle can be used with\nthe ",(0,i.jsx)(n.a,{href:"https://lux.network",children:"Lux"})," network, which is an instance of the EVM."]}),"\n",(0,i.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://git-scm.com/",children:"Git"}),",\n",(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," and ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://reactjs.org/",children:"ReactJS"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Basic familiarity with ",(0,i.jsx)(n.a,{href:"https://lux.network",children:"Lux"})," network,\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.8.6/",children:"Solidity"})," and\n",(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com/truffle",children:"Truffle"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://nodejs.org/en",children:"NodeJS"})," >= 10.16 and ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/",children:"npm"})," >=\n5.6 installed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://www.trufflesuite.com/truffle",children:"Truffle"}),", which can be installed\nglobally with ",(0,i.jsx)(n.code,{children:"npm install -g truffle"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://metamask.io",children:"MetaMask"})," extension added to the browser."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-project",children:"Understanding the Project"}),"\n",(0,i.jsxs)(n.p,{children:["From the title, ",(0,i.jsx)(n.strong,{children:"Distributed File Manager"}),", you have got an idea that it's\nabout making a dapp that will allow us to upload and manage files in a so-called\n",(0,i.jsx)(n.strong,{children:"distributed"})," fashion. But you might be wondering, that what is ",(0,i.jsx)(n.strong,{children:"IPFS"})," and\nhow will our files be distributed!!! Nothing to worry about, just go through the\ntext, and all your doubts will be resolved."]}),"\n",(0,i.jsx)(n.h3,{id:"decoding-ipfs-and-how-is-it-different",children:(0,i.jsx)(n.strong,{children:"Decoding IPFS and How is It Different?"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"IPFS"})," is an acronym that stands for ",(0,i.jsx)(n.strong,{children:"InterPlanetary File System"}),".\nIt is a communication protocol and network for storing and sharing\ndata. Theoretically, it aims to make a file-sharing system that can communicate\namong the planets, someday. Check out ",(0,i.jsx)(n.a,{href:"https://awesome.ipfs.io/",children:"Awesome IPFS"}),"\nto learn more about projects built on IPFS."]}),"\n",(0,i.jsxs)(n.p,{children:["Currently, we are dominated by the ",(0,i.jsx)(n.strong,{children:"client-server"})," model of communication\nwhich is following ",(0,i.jsx)(n.strong,{children:"HTTP"})," aka ",(0,i.jsx)(n.strong,{children:"Hypertext Transfer Protocol"}),". This means\nthat, in between the communication between two devices, one has to be the server\n(which will serve or respond with data) and the other should be the client\n(which will receive or request data). The major problem with this client-server\nmodel is that the client would have to request data from the server, far away\nfrom it, even if the same data was previously received by its neighbour or was\navailable somewhere closer. This would cause high latency (delay in receiving\ndata) and low bandwidths (speed of data transfer)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"server vs p2p",src:t(92651).Z+"",width:"601",height:"301"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"IPFS"})," is a relatively new protocol, which aims to resolve these issues. It\nfollows the ",(0,i.jsx)(n.strong,{children:"peer-to-peer"})," model of communication, in which there could be an\narbitrary number of servers responding to the client with the required data.\nOnce the client has the data (or even just bits of other data), it can then act\nas a server. Every node connected to the network can act as a server if it has\nthe required software installed. Sending data from multiple servers may seem\ninefficient, however, the protocol is designed this way. The data is hashed and\ndivided into pieces that can be transmitted and stored separately, but given\nsufficient, information can be re-joined later. Once all the pieces are in\nplace, it makes the whole file."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"IPFS swarm",src:t(27922).Z+"",width:"400",height:"412"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"IPFS"})," is a large swarm of such nodes, which chose to serve data. We need IPFS\nclients to connect to those nodes and upload data. We can also connect to the\nnetwork using the available JavaScript client libraries like ",(0,i.jsx)(n.code,{children:"ipfs-http-client"}),".\nThere are several providers like ",(0,i.jsx)(n.strong,{children:"Infura"}),", which provides an HTTP portal to\nview the files on the IPFS. More technical details are provided ahead in the\ntutorial."]}),"\n",(0,i.jsx)(n.h2,{id:"initializing-the-working-directory",children:"Initializing the Working Directory"}),"\n",(0,i.jsxs)(n.p,{children:["Our application's client-side is made using ",(0,i.jsx)(n.strong,{children:"ReactJS"}),". Smart contracts will be\nmade using the ",(0,i.jsx)(n.strong,{children:"Solidity"})," language and will be deployed on the ",(0,i.jsx)(n.strong,{children:"Lux"}),"\nnetwork with Truffle Suite. Therefore, we need to set up our working\ndirectory according to ReactJS and Truffle Suite, for making our development\nprocess smoother."]}),"\n",(0,i.jsx)(n.p,{children:"Open a terminal and navigate to the directory where we will create the\napplication. Usually, this will be inside our user home directory but can be\nlocated wherever is practical. On most Linux distributions this will change into\n/home/ . On MacOS, it will be /Users/. On Windows, the user directories are\nlocated in C:\\Users."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ~\n"})}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-the-reactjs-project",children:(0,i.jsx)(n.strong,{children:"Setting up the ReactJS Project"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a new react app using npx. npx is a npm package runner (x stands for\neXecute). The typical use is to download and run a package temporarily or for\ntrials. You can learn more about npx ",(0,i.jsx)(n.a,{href:"https://www.npmjs.com/package/npx",children:"here"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx create-react-app dfm-react\n"})}),"\n",(0,i.jsx)(n.p,{children:"Move to the newly created directory and install the basic dependencies."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd dfm-react\nnpm install --save dotenv web3 @truffle/contract @truffle/hdwallet-provider\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"index.html"})," file inside of the ",(0,i.jsx)(n.code,{children:"public"})," directory and replace the\nexisting code with the following HTML :"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <title>Distributed File Manager</title>\n    <link\n      rel="stylesheet"\n      href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"\n    />\n  </head>\n\n  <body>\n    <div id="root"></div>\n  </body>\n</html>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"App.js"})," inside of the ",(0,i.jsx)(n.code,{children:"src"})," directory and replace the existing\ncode with the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\n\n// 1. Importing other modules\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      web3: null,\n      account: null,\n      contract: null,\n    };\n  }\n\n  componentDidMount() {\n    this.init();\n  }\n\n  async init() {\n    // 2. Load web3\n    // 3. Load Account\n    // 4. Load Smart-Contract instance\n  }\n\n  render() {\n    return (\n      <div>\n        <font color="white">Distributed File Manager</font>\n        {/* 5. Navbar */}\n\n        {/* 6. IPFS Viewer component */}\n\n        {/* 7. IPFS Uploader component */}\n      </div>\n    );\n  }\n}\nexport default App;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"App"})," component will maintain a state with ",(0,i.jsx)(n.code,{children:"web3"})," instance of the\n",(0,i.jsx)(n.code,{children:"MetaMask"})," provider for interacting with the Lux network, ",(0,i.jsx)(n.code,{children:"account"}),"\naddress and instance of the deployed smart contract."]}),"\n",(0,i.jsxs)(n.p,{children:["Open the file ",(0,i.jsx)(n.code,{children:"index.js"})," inside of the ",(0,i.jsx)(n.code,{children:"src"})," directory and replace the existing\ncode with the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport ReactDOM from "react-dom";\nimport App from "./App";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById("root")\n);\n'})}),"\n",(0,i.jsx)(n.p,{children:"React project setup is now complete."}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-the-truffle-project",children:(0,i.jsx)(n.strong,{children:"Setting up the Truffle Project"})}),"\n",(0,i.jsxs)(n.p,{children:["Run the following command in the root directory, to create a boilerplate for the ",(0,i.jsx)(n.code,{children:"Truffle"})," project."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle init\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will set up Truffle's initial project structure. Smart contracts will be\nstored in the ",(0,i.jsx)(n.code,{children:"contracts"})," folder, deployment functions for migrating smart\ncontracts to the network will be stored in the ",(0,i.jsx)(n.code,{children:"migrations"})," folder. By default,\nthe ",(0,i.jsx)(n.code,{children:"/build/contracts"})," folder would contain information about the compiled and\ndeployed contract, ABI etc in the ",(0,i.jsx)(n.code,{children:".json"})," format and these files are known as\n",(0,i.jsx)(n.code,{children:"artifacts"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["There is also 1 ",(0,i.jsx)(n.strong,{children:"config"})," file created by the above command, which is,\n",(0,i.jsx)(n.strong,{children:"truffle-config.js"}),". In this file, there is a lot of information regarding how\nto deploy contracts, how to choose a network to deploy them, and many others.\nTherefore, we should preserve this file for reference. So, use the below command\nto make a copy of this file. This would create a copy named\n",(0,i.jsx)(n.code,{children:"truffle-config-default.js"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp truffle-config.js truffle-config-default.js\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we can update the ",(0,i.jsx)(n.code,{children:"truffle-config.js"})," file with the following code, to\ndeploy the smart contract on Lux's Testnet test network. This file is where\nwe define the connection to the Lux network. An account on Lux with\na valid mnemonic is required to deploy the contract to the network."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'require("dotenv").config();\nconst HDWalletProvider = require("@truffle/hdwallet-provider");\n\n// Account credentials from which our contract will be deployed\nconst MNEMONIC = process.env.MNEMONIC;\n\nmodule.exports = {\n  contracts_build_directory: "./src/build/contracts",\n  networks: {\n    development: {\n      host: "127.0.0.1",\n      port: 7545,\n      network_id: "*",\n    },\n    testnet: {\n      provider: function () {\n        return new HDWalletProvider({\n          mnemonic: MNEMONIC,\n          providerOrUrl: `https://api.lux-test.network/ext/bc/C/rpc`,\n        });\n      },\n      network_id: "*",\n      gas: 3000000,\n      gasPrice: 470000000000,\n      skipDryRun: true,\n    },\n  },\n  compilers: {\n    solc: {\n      version: "0.8.0",\n    },\n  },\n};\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that we're setting the ",(0,i.jsx)(n.code,{children:"gasPrice"})," and ",(0,i.jsx)(n.code,{children:"gas"})," to the appropriate values for\nthe Lux C-Chain. Here, you can see that we have used\n",(0,i.jsx)(n.code,{children:"contracts_build_directory"})," to change the default location of ",(0,i.jsx)(n.code,{children:"artifacts"})," from\nthe project root directory to the ",(0,i.jsx)(n.code,{children:"src"})," folder. This is because React cannot\naccess files that are present outside the ",(0,i.jsx)(n.code,{children:"src"})," folder."]}),"\n",(0,i.jsx)(n.p,{children:"In the Truffle configuration file, you might have noticed a lot of jargon like\nHD wallet, mnemonic, address etc. Let's understand these keywords in more\ndetail."}),"\n",(0,i.jsxs)(n.p,{children:["Before the concept of ",(0,i.jsx)(n.strong,{children:"wallets"})," or more specifically ",(0,i.jsx)(n.strong,{children:"Hierarchical\nDeterministic (HD) Wallets"}),", there were standalone Private-Public key pairs. HD\nwallets on the other hand are a tree of these key pairs, in which one key pair\ncan generate multiple child key pairs."]}),"\n",(0,i.jsxs)(n.p,{children:["In HD wallets, first, a random 128 - 256 bit number is generated, also known as\n",(0,i.jsx)(n.strong,{children:"entropy"})," or the ",(0,i.jsx)(n.strong,{children:"root seed"})," or ",(0,i.jsx)(n.strong,{children:"private key"}),". This entropy is then\nappended with few bits of its checksum, to make the number of bits in entropy, a\nmultiple of 11. Then this sequence of bits is divided into sections of 11 bits\neach. Each section represents the index of a word in a\n",(0,i.jsx)(n.a,{href:"https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt",children:"list"})," of 2048\nwords. This sequence of words represents our wallet's ",(0,i.jsx)(n.strong,{children:"mnemonic"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Checksum is a few bits of the hash of data to detect errors that may have been\nintroduced during its transmission or storage. Errors are verified by hashing\nthe actual data and comparing it with its appended checksum. If the checksum\nmatches with the hashed data then there is no error."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Then the root seed is passed to a one-way hash function to generate a 512-bit\nseed. The left 256 bits will make the ",(0,i.jsx)(n.strong,{children:"master private key"})," and the right 256\nbits will make the ",(0,i.jsx)(n.strong,{children:"master chain code"}),". Chain codes are used to introduce\nrandomness in the child keys. HD wallets use the ",(0,i.jsx)(n.strong,{children:"child key derivation (CKD)"}),"\nfunction to derive children keys from parent keys. The child key derivation\nfunctions are based on a one-way hash function that combines:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A parent private or public key"}),"\n",(0,i.jsx)(n.li,{children:"A seed called a chain code (256 bits)"}),"\n",(0,i.jsx)(n.li,{children:"An index number (32 bits)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"master private public key generation",src:t(37073).Z+"",width:"1000",height:"428"})}),"\n",(0,i.jsxs)(n.p,{children:["The index number can range from 0 to 2^32 - 1. Thus using a parent with a given\nprivate key and chain code we can generate 2^32 or around 4 Billion child key\npairs. In a normal derivation, we use parent public key and chain code to\ngenerate children. But this could be vulnerable to security threats and hence we\ncan make derivation hard by using the parent's private key instead of the public\nkey for CKD. This process is known as ",(0,i.jsx)(n.strong,{children:"Hardened child key derivation"}),". And to\ndistinguish it from normal derivation, we use different index numbers. For\nnormal derivation index number is from 0 to 2^31 - 1 and for hardened\nderivation, it is from 2^31 to 2^32 - 1. Hardened index number start from 2\nBillion which make it difficult to read, so we use i' to represent index 2^31 +\ni, where 0 <= i <= 2^32 - 1."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"child public private key generation",src:t(36284).Z+"",width:"1000",height:"580"})}),"\n",(0,i.jsxs)(n.p,{children:["Master keys along with master chain code can create child keys which can further\ncreate grandchild keys and so on. Each generation is known as a tree level. Keys\nin an HD wallet are identified using a ",(0,i.jsx)(n.strong,{children:"path"})," naming convention, with each\nlevel of the tree separated by a slash (/) character. Private keys derived from\nthe master private key start with ",(0,i.jsx)(n.strong,{children:"m"}),". Public keys derived from the master\npublic key start with ",(0,i.jsx)(n.strong,{children:"M"}),". An HD path ",(0,i.jsx)(n.code,{children:"m/0"})," represents the 0th or first child\nprivate key derived from the master. Similarly, ",(0,i.jsx)(n.code,{children:"m/3'/1"})," denotes the 2nd child\nprivate key of the 4th or (2^31 + 3)th hardened child derived from the master."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"distributed file manager",src:t(45323).Z+"",width:"800",height:"493"})}),"\n",(0,i.jsx)(n.p,{children:"There are various Bitcoin Improvement Proposals (BIP) that proposes the standard\nway of deriving paths. BIP0044 (44th proposal) specifies the structure as\nconsisting of five predefined tree levels:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"m / purpose' / coin_type' / account' / change / address_index"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"purpose"})," - Always set to 44'."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"coin_type"})," - Specifies the type of cryptocurrency coin, allowing for\nmulticurrency HD wallets where each currency has its subtree under the second\nlevel."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"account"})," - Allows users to subdivide their wallets into separate logical\nsubaccounts, for accounting or organizational purposes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"change"})," - It has 2 subtrees, one normal receiving address and the other for\nreceiving change tokens which are reverted when you supplied more than the\nrequired transaction cost."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"address_index"})," - We can use all the 4 Billion child keys as our address,\nbut this index would set the primary address for our wallet."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Lux's wallets like ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network",children:"https://wallet.lux.network"})," use the path ",(0,i.jsx)(n.code,{children:"m/44'/9000'/0'/0"}),"\nfor its key derivation, since the coin type of Lux is ",(0,i.jsx)(n.strong,{children:"52752"}),". The list\nof different crypto coins along with their type can be found\n",(0,i.jsx)(n.a,{href:"https://github.com/satoshilabs/slips/blob/master/slip-0044.md",children:"here"}),". The coin\ntypes have nothing to do with the blockchain architecture and is chosen\nrandomly. By default ",(0,i.jsx)(n.code,{children:"ethers.Wallet.fromMnemonic()"})," function uses Ethereum's\ndefault path which has a coin type of ",(0,i.jsx)(n.strong,{children:"60"}),". That's why we need to manually set\nthe path in this function. Using a different path would give a different address\nderived from the same mnemonic. So, if we want to use our manual paths, we\nshould remember them, otherwise, we can't derive the address without a path."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["I would recommend you to read more about these keys, addresses and wallets on ",(0,i.jsx)(n.a,{href:"https://www.oreilly.com/library/view/mastering-bitcoin/9781491902639/ch04.html",children:"O'Reilly"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"get-luxs-credentials",children:(0,i.jsx)(n.strong,{children:"Get Lux's Credentials"})}),"\n",(0,i.jsx)(n.p,{children:"For deploying smart contracts we need two things: A node connected to the\nLux network and an account with few LUX. Lux connected node through\nRPC (Remote Procedure Call) is provided for free by the Lux Networks."}),"\n",(0,i.jsxs)(n.p,{children:["Now we need an Lux wallet, where we would keep our funds, required for all\nthe transactions on the network. So, visit ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network",children:"here"}),"\nand create an account. Save the mnemonic in a secure place (we would need it\nlater). Instructions to add funds will be provided later in the tutorial."]}),"\n",(0,i.jsx)(n.h3,{id:"add-env-file",children:(0,i.jsx)(n.strong,{children:"Add .env File"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we need a ",(0,i.jsx)(n.strong,{children:"Lux"})," wallet, where we would keep our funds, required for\nall the transactions on the network. Visit the ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network/",children:"Lux\nWallet"})," and create an account. While creating your\naccount you will see your public address and mnemonic. This public address will\nbe required to transfer funds. Save the ",(0,i.jsx)(n.strong,{children:"mnemonic"})," in a secure place, we will\nneed it later. Instructions to add funds will be provided later in the tutorial."]}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:".env"})," file in the project root folder. Please take a note that dot (.)\nis necessary for the ",(0,i.jsx)(n.code,{children:".env"})," file name. Now copy your Lux wallet's mnemonic\nin the .env file as shown below. In the .env file, ",(0,i.jsx)(n.strong,{children:"MNEMONIC"}),' should be\nenclosed within double-quotes (" ").']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'MNEMONIC="<wallet-mnemonic>"\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Never share or commit your ",(0,i.jsx)(n.code,{children:".env"})," file. It contains your credentials like\n",(0,i.jsx)(n.code,{children:"mnemonics"}),". Therefore, it is advised to add ",(0,i.jsx)(n.code,{children:".env"})," to your ",(0,i.jsx)(n.code,{children:".gitignore"})," file."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Our project setup is now complete."}),"\n",(0,i.jsx)(n.p,{children:"To confirm that we are on the same page, run the following command in the project root folder."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,i.jsx)(n.p,{children:"It might take few seconds, to show output as in the image below."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"localhost react server",src:t(78584).Z+"",width:"403",height:"180"})}),"\n",(0,i.jsxs)(n.p,{children:["In a web browser, visit the URL ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"}),'.\nIf npm start has not encountered any errors, we will see the text "Distributed\nFile Manager" at the top of the page as shown in this image :']}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"localhost frontend",src:t(32078).Z+"",width:"299",height:"195"})}),"\n",(0,i.jsx)(n.h2,{id:"create-the-filemanager-contract",children:"Create the FileManager Contract"}),"\n",(0,i.jsxs)(n.p,{children:["Create the file ",(0,i.jsx)(n.code,{children:"FileManager.sol"})," (",(0,i.jsx)(n.code,{children:".sol"})," stands for Solidity) inside of the\n",(0,i.jsx)(n.code,{children:"contracts"})," directory and paste the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-solidity",children:"// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0;\n\ncontract FileManager {\n  // Structure of each File\n  struct File {\n    string fileName;\n    string fileType;\n    string cid;\n  }\n\n  // Mapping of each user's address with the array of files they are storing\n  mapping(address => File[]) files;\n\n  function addFile(string[] memory _fileInfo, string  memory _cid) public {\n    files[msg.sender].push(File(_fileInfo[0], _fileInfo[1], _cid));\n  }\n\n  function getFiles(address _account) public  view  returns (File[] memory) {\n    return files[_account];\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"FileManager"})," is a solidity smart contract that lets us store and view the meta\ndetails of file which we upload on the IPFS network. IPFS uses content\naddressing rather than location addressing. To identify files on the network,\nIPFS uses a cryptographic hash for each file. This hash is known as a content\nidentifier or cid. Whatever the size of the file, the length of this hash would\nbe the same and is enough to identify every file uniquely. After uploading the\nfile to IPFS, we get a cid that acts as a reference to that file on the network,\nand we store this cid on the Lux blockchain."]}),"\n",(0,i.jsxs)(n.p,{children:['Now IPFS generates a unique content identifier, the "cid" which can be used to\nreference this file on the network. cid\'s look similar to\n',(0,i.jsx)(n.code,{children:"QmVwyUH96NeQPwLN5jDkgNxM41xGCB1EVjnBYX7NoWWmKH"}),", a long string of upper- and\nlower-case letters and numbers. This is the hashed representation of the\ncontent. More information about IPFS content identifiers can be found on the\n",(0,i.jsx)(n.a,{href:"https://docs.ipfs.io/concepts/content-addressing/#content-addressing-and-cids",children:"IPFS\ndocs"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Let's understand this smart contract"})}),"\n",(0,i.jsxs)(n.p,{children:["The code for smart contract is everything within ",(0,i.jsx)(n.code,{children:"contract FileManager { }"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Basic structure about Files"})," - ",(0,i.jsx)(n.code,{children:"File"})," is a struct that's a skeleton to store\nthe details of each file. We are having three attributes of each file:\n",(0,i.jsx)(n.code,{children:"fileName"}),", ",(0,i.jsx)(n.code,{children:"fileType"})," that is whether it is image, audio, video or an application\nand finally ",(0,i.jsx)(n.code,{children:"cid"}),". Here, ",(0,i.jsx)(n.code,{children:"files"})," is a mapping between the owner (address) of the\nfiles and the array of those ",(0,i.jsx)(n.code,{children:"File"})," structures which they uploaded."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Structure of each File\nstruct File {\n  string fileName;\n  string fileType;\n  string cid;\n}\n\n// Mapping of each user's address with the array of files they are storing\nmapping(address => File[]) files;\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Adding files"})," - ",(0,i.jsx)(n.code,{children:"addFile()"})," function is used to add details of file to the\narray of ",(0,i.jsx)(n.code,{children:"File"})," structures corresponding to each address. ",(0,i.jsx)(n.code,{children:"files[msg.sender]"}),"\nrefers to the array of file structures, belonging to the caller of this function,\nthat is the address ",(0,i.jsx)(n.code,{children:"msg.sender"}),". Function's arguments are ",(0,i.jsx)(n.code,{children:"_fileInfo[]"})," which is an\narray of 2 parameters (file name and file type respectively) and the second\nargument is ",(0,i.jsx)(n.code,{children:"cid"})," which is the content id for the uploaded file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"function addFile(string[] memory _fileInfo, string  memory _cid) public {\n  files[msg.sender].push(File(_fileInfo[0], _fileInfo[1], _cid));\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Viewing stored files"})," - ",(0,i.jsx)(n.code,{children:"getFiles()"})," is a function that returns the array of\nfile structures corresponding to the account address. It returns the details of\nall the files as an array that's being uploaded by the address (passed in the\nargument of this function) on the IPFS network."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"function getFiles(address _account) public  view  returns (File[] memory) {\n  return files[_account];\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"make-a-new-file-for-migrating-smart-contracts",children:(0,i.jsx)(n.strong,{children:"Make a New File for Migrating Smart Contracts"})}),"\n",(0,i.jsxs)(n.p,{children:["Create a new file in the ",(0,i.jsx)(n.code,{children:"migrations"})," directory named ",(0,i.jsx)(n.code,{children:"2_deploy_contracts.js"}),",\nand add the following block of code. This handles deploying the ",(0,i.jsx)(n.code,{children:"FileManager"}),"\nsmart contract to the blockchain."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const FileManager = artifacts.require("FileManager");\n\nmodule.exports = function (deployer) {\n  deployer.deploy(FileManager);\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"compile-contracts-with-truffle",children:(0,i.jsx)(n.strong,{children:"Compile Contracts with Truffle"})}),"\n",(0,i.jsxs)(n.p,{children:["If we have altered the code within our Solidity source files or made new ones\n(like ",(0,i.jsx)(n.code,{children:"FileManager.sol"}),"), we need to run ",(0,i.jsx)(n.code,{children:"truffle compile"})," in the terminal, from\ninside the project root directory."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle compile\n"})}),"\n",(0,i.jsx)(n.p,{children:"You should see:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Compiling your contracts...\n===========================\n> Compiling ./contracts/FileManager.sol\n> Artifacts written to /home/guest/blockchain/dfm-react/src/build/contracts\n> Compiled successfully using:\n   - solc: 0.8.0+commit.c7dfd78e.Emscripten.clang\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["There might be an error ",(0,i.jsx)(n.code,{children:"Error: Cannot find module 'pify'"}),", if the ",(0,i.jsx)(n.code,{children:"pify"}),"\nmodule is not installed automatically while installing ",(0,i.jsx)(n.code,{children:"truffle"}),". So, this\nissue can be resolved by separately installing ",(0,i.jsx)(n.code,{children:"pify"}),", using the command below"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"npm install pify --save\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Compiling the smart contracts would create ",(0,i.jsx)(n.code,{children:".json"})," file in the\n",(0,i.jsx)(n.code,{children:"src/build/contracts"})," directory. It stores ",(0,i.jsx)(n.code,{children:"ABI"})," and other necessary metadata."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ABI"})," refers to Application Binary Interface, which is a standard for\ninteracting with the smart contracts from outside the blockchain as well as\ncontract-to-contract interaction. Please refer to the Solidity's documentation\nabout ABIs\n",(0,i.jsx)(n.a,{href:"https://docs.soliditylang.org/en/v0.5.3/abi-spec.html#:~:text=The%20Contract%20Application%20Binary%20Interface,contract%2Dto%2Dcontract%20interaction.&text=This%20specification%20does%20not%20address,known%20only%20at%20run%2Dtime",children:"here"}),"\nto learn more."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fund-the-account-and-run-migrations-on-luxs-testnet-test-network",children:(0,i.jsx)(n.strong,{children:"Fund the Account and Run Migrations on Lux's Testnet Test Network."})}),"\n",(0,i.jsxs)(n.p,{children:["When deploying smart contracts to the Lux network, it will require some\ndeployment cost. As you can see inside ",(0,i.jsx)(n.code,{children:"truffle-config.js"}),",\n",(0,i.jsx)(n.code,{children:"@truffle/hdwallet-provider"})," will help us in deploying on Lux and\ndeployment cost will be managed by an account whose mnemonic has been stored in\nthe ",(0,i.jsx)(n.code,{children:".env"})," file. Therefore we need to fund the account."]}),"\n",(0,i.jsx)(n.h3,{id:"fund-your-account",children:(0,i.jsx)(n.strong,{children:"Fund Your Account"})}),"\n",(0,i.jsxs)(n.p,{children:["We need funds in our C-Chain address, as smart contracts are deployed on C-Chain,\nthe Contract-Chain. This address can easily be found on the ",(0,i.jsx)(n.a,{href:"https://wallet.lux.network",children:"Lux\nWallet"})," dashboard. Lux network has 3 chains:\nX-Chain, P-Chain and C-Chain. The address of all these chains can be found by\nswitching tabs at the bottom of the division, where there is a QR code. So,\nswitch to C-Chain, and copy the address. Now fund your account using the faucet\nlink ",(0,i.jsx)(n.a,{href:"https://faucet.lux.network/",children:"here"})," and paste your C-Chain address in the\ninput field. Refer to the below image, to identify the address section."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"lux c-chain address",src:t(17031).Z+"",width:"353",height:"290"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["You'll need to send at least ",(0,i.jsx)(n.code,{children:"135422040"})," nLUX to the account to cover the\ncost of contract deployments. Here ",(0,i.jsx)(n.code,{children:"nLUX"})," refers nano-LUX, that is a billionth of\nan ",(0,i.jsx)(n.code,{children:"LUX"}),", or simply 1 ",(0,i.jsx)(n.code,{children:"nLUX"})," = (1/1000,000,000) ",(0,i.jsx)(n.code,{children:"LUX"}),". Though funding\nthrough faucet would give you enough ",(0,i.jsx)(n.code,{children:"LUX"})," to run multiple deployments and\ntransactions on the network."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"run-migrations",children:(0,i.jsx)(n.strong,{children:"Run Migrations"})}),"\n",(0,i.jsxs)(n.p,{children:["Now everything is in place to run migrations and deploy the ",(0,i.jsx)(n.code,{children:"FileManager"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle migrate --network testnet\n"})}),"\n",(0,i.jsx)(n.p,{children:"This might take a while depending upon your internet connection or traffic on the Lux network."}),"\n",(0,i.jsx)(n.p,{children:"Note - For development purpose, we may deploy our contracts on a local network,\nby running Ganache (Truffle's local blockchain simulation) and using the command"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"truffle migrate --network development\n"})}),"\n",(0,i.jsx)(n.p,{children:"On successful execution of this command, you should see:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Starting migrations...\n======================\n> Network name:    'testnet'\n> Network id:      1\n> Block gas limit: 8000000 (0x7a1200)\n\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   > transaction hash:    0x094a9c0f12ff3158bcb40e266859cb4f34a274ea492707f673b93790af40e9e9\n   > Blocks: 0            Seconds: 0\n   > contract address:    0x0b1f00d0Af6d5c864f86E6b96216e0a2Da111055\n   > block number:        40\n   > block timestamp:     1620393171\n   > account:             0x80599dd7F8c5426096FD189dcC6C40f47e8e3714\n   > balance:             39.71499696\n   > gas used:            173118 (0x2a43e)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.00346236 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.00346236 ETH\n\n\n2_deploy_contracts.js\n=====================\n\n   Deploying 'FileManager'\n   ------------------------\n   > transaction hash:    0xbeb13fc6bbee250eea9151faf02bfe247ec497294acc84c9b8319ed609ced086\n   > Blocks: 0            Seconds: 0\n   > contract address:    0xf30D372A6911CCF6BBa1e84c3CEd51cC0F3D7769\n   > block number:        42\n   > block timestamp:     1620393172\n   > account:             0x80599dd7F8c5426096FD189dcC6C40f47e8e3714\n   > balance:             39.69235442\n   > gas used:            1090212 (0x10a2a4)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.02180424 ETH\n\n\n   > Saving migration to chain.\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:          0.02180424 ETH\n\n\nSummary\n=======\n> Total deployments:   2\n> Final cost:          0.0252666 ETH\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Deploying smart contracts is a transaction on the blockchain network. Therefore,\nin the above output, you can see a ",(0,i.jsx)(n.strong,{children:"transaction hash"})," which starts with a\n",(0,i.jsx)(n.code,{children:"0x"}),". Using this transaction hash you can verify your transaction on the\nLux's Testnet network, using their blockchain explorer\n",(0,i.jsx)(n.a,{href:"https://testnet.avascan.info/",children:"here"})," by searching your transaction hash."]}),"\n",(0,i.jsxs)(n.p,{children:["You may also view your deployed smart contracts using their contract address as\nprovided in the above output of ",(0,i.jsx)(n.code,{children:"truffle migrate"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"possible-errors-and-troubleshooting",children:(0,i.jsx)(n.strong,{children:"Possible Errors and Troubleshooting"})}),"\n",(0,i.jsx)(n.p,{children:"If you didn't create an account on the C-Chain you'll see this error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Error: Expected parameter 'from' not passed to function.\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you didn't fund the account, you'll see this error:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Error:  *** Deployment Failed ***\n\n\"Migrations\" could not deploy due to insufficient funds\n   * Account:  0x090172CD36e9f4906Af17B2C36D662E69f162282\n   * Balance:  0 wei\n   * Message:  sender doesn't have enough funds to send tx. The upfront cost is: 1410000000000000000 and the sender's account only has: 0\n   * Try:\n      + Using an adequately funded account\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The information like contract address and ABI of the deployed contract is\npresent in the ",(0,i.jsx)(n.code,{children:"src/build/contract"})," directory as ",(0,i.jsx)(n.code,{children:"FileManager.json"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"building-the-user-interface",children:"Building the User Interface"}),"\n",(0,i.jsxs)(n.p,{children:["We have already set up our React project directory. The client-side files to\ninteract with the Lux blockchain are present in the ",(0,i.jsx)(n.code,{children:"src"})," folder. First,\nwe will make a ReactJS component with of a couple of functions to connect our\nbrowser with the Lux network. These functions will be kept in a separate\nfile named ",(0,i.jsx)(n.code,{children:"BlockchainUtil.js"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"blockchainutils-component",children:"BlockchainUtils Component"}),"\n",(0,i.jsxs)(n.p,{children:["Create the file ",(0,i.jsx)(n.code,{children:"BlockchainUtil.js"})," inside of the project ",(0,i.jsx)(n.code,{children:"src"})," directory and paste the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\nimport Web3 from "web3";\nimport TruffleContract from "@truffle/contract";\n\n// For connecting our web application with MetaMask Web3 Provider\nexport class GetWeb3 extends React.Component {\n  async getWeb3() {\n    let web3 = window.web3;\n    if (typeof web3 !== "undefined") {\n      // Setup Web3 Provider\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n      return this.web3;\n    } else {\n      this.isWeb3 = false;\n    }\n  }\n}\n\n// For getting our Smart-Contract\'s instance to interact with it using javascript\nexport class GetContract extends React.Component {\n  async getContract(web3, contractJson) {\n    // Setup Contract\n    this.contract = await TruffleContract(contractJson);\n    this.contract.setProvider(web3.currentProvider);\n    return await this.contract.deployed();\n  }\n}\n\n// For getting our account address from the MetaMask\nexport class GetAccount extends React.Component {\n  async getAccount(web3) {\n    return await web3.eth.getAccounts();\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Updating App.js"})," - ",(0,i.jsx)(n.code,{children:"App.js"})," is the entry point of any React application.\nTherefore we need to update ",(0,i.jsx)(n.code,{children:"App.js"})," regularly with the components which we want\nto show in our application. As we move further, build all components, we will\nalso update ",(0,i.jsx)(n.code,{children:"App.js"})," in the end."]}),"\n",(0,i.jsx)(n.h3,{id:"ipfsuploader-component",children:"IPFSUploader Component"}),"\n",(0,i.jsxs)(n.p,{children:["Now let's make a component that will upload the files from our system to the\nIPFS network. So, make a file named ",(0,i.jsx)(n.code,{children:"IPFSUploader.js"})," in the ",(0,i.jsx)(n.code,{children:"src"})," directory and\nuse the code as present in this ",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/distributed-file-manager/frontend/IPFSUploader.js",children:"file"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Let's understand this component block by block."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"IPFS Client"})," - First we need to make a connection to IPFS client using the\n",(0,i.jsx)(n.code,{children:"ipfs-http-client"})," module. This has to be done by some IPFS provider like\n",(0,i.jsx)(n.code,{children:"Infura"}),". So, the following line would create an IPFS client -"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const ipfs = create({ host: "ipfs.infura.io", port: 5001, protocol: "https" });\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"state"})," - ",(0,i.jsx)(n.strong,{children:"IPFSUploader"})," component will maintain a state of file properties\nlike ",(0,i.jsx)(n.code,{children:"fileName"}),", ",(0,i.jsx)(n.code,{children:"fileType"}),", ",(0,i.jsx)(n.code,{children:"buffer"})," of each file, ",(0,i.jsx)(n.code,{children:"account"})," address and ",(0,i.jsx)(n.code,{children:"cid"}),"\nof the uploaded file. These state variables will be updated whenever there is a\nchange in the input field of file type."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"captureFile()"})," - This function will be called whenever there is an ",(0,i.jsx)(n.code,{children:"onChange"}),"\nevent in the input field. This will update the state with necessary file\ninformation. In this function, we will be having a ",(0,i.jsx)(n.code,{children:"Compressor"})," instance which\nwill compress the file of ",(0,i.jsx)(n.code,{children:"image"})," type."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"onSubmit()"})," - This function would be called when the user will submit the\nform containing the file as an input. This function would first invoke the\n",(0,i.jsx)(n.code,{children:"add()"})," function of the IPFS client and upload the ",(0,i.jsx)(n.code,{children:"buffer"})," of this file which\nwas previously stored in the ",(0,i.jsx)(n.code,{children:"state"})," of this component. Once the file is\nuploaded, it will return a ",(0,i.jsx)(n.code,{children:"cid"}),". After that, we will add this file information\nalong with ",(0,i.jsx)(n.code,{children:"cid"})," to the smart contract using the ",(0,i.jsx)(n.code,{children:"addFile()"})," contract function."]}),"\n",(0,i.jsxs)(n.p,{children:["Since we have used new libraries like ",(0,i.jsx)(n.code,{children:"compressorjs"}),", ",(0,i.jsx)(n.code,{children:"ipfs-http-client"})," and\n",(0,i.jsx)(n.code,{children:"rimble-ui"})," which we did not install previously, therefore please install these\nlibraries using the below command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install --save ipfs-http-client compressorjs rimble-ui --force\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Rimble UI library comes with a peer dependency of ",(0,i.jsx)(n.code,{children:"react@16.9.0"})," which is not\nthe latest version of React that we are using which is ",(0,i.jsx)(n.code,{children:"react@17.0.2"}),". Running the\n",(0,i.jsx)(n.code,{children:"npm install"})," command without the ",(0,i.jsx)(n.code,{children:"--force"})," tag would cause an ",(0,i.jsx)(n.code,{children:"unable to resolve dependency tree"})," conflict. Thus, the ",(0,i.jsx)(n.code,{children:"--force"})," tag is used to override\nany type of conflicts and proceeds with the installation anyway. Another way\nto resolve this conflict is by using the ",(0,i.jsx)(n.code,{children:"--legacy-peer-deps"})," tag instead, but\nthis would ignore all peer dependencies which we do not require, as the\nconflict is only between ",(0,i.jsx)(n.code,{children:"react"})," and ",(0,i.jsx)(n.code,{children:"rimble-ui"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ipfsviewer-component",children:"IPFSViewer Component"}),"\n",(0,i.jsxs)(n.p,{children:["Now make a new file named ",(0,i.jsx)(n.code,{children:"IPFSViewer.js"}),". This component would be used to fetch\nfile information from the deployed smart contract and display it on the website.\nUse the code as present in this ",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/distributed-file-manager/frontend/IPFSViewer.js",children:"file"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Let's understand the above component block by block."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"state"})," - The state of this component would contain an array of different\ntypes of files like ",(0,i.jsx)(n.code,{children:"imageFiles"}),", ",(0,i.jsx)(n.code,{children:"audioFiles"})," etc."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"loadFiles()"})," - This function would be called after the component is mounted\nand would load the state with all the files which are uploaded by the account\naddress Using the ",(0,i.jsx)(n.code,{children:"getFiles()"})," function of the smart contract, it can easily\nfetch all file information from the blockchain. It will separate the different\ntypes of files like images, videos, audios etc. accordingly and update the\nstate."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"showImageFiles()"})," - This function would return components with all image\nfiles composed with proper ",(0,i.jsx)(n.code,{children:"img"})," tag, as an array, to the caller of this\nfunction."]}),"\n",(0,i.jsx)(n.p,{children:"Similarly, there are different functions for each file type."}),"\n",(0,i.jsx)(n.h3,{id:"ipfsviewer-stylesheet",children:"IPFSViewer Stylesheet"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"IPFSViewerCSS.css"})," file has been imported to add few designs to the page like\ndecreasing the width of the scroll bar, colour changes etc. So, make a new file\nnamed ",(0,i.jsx)(n.code,{children:"IPFSViewerCSS.css"})," and add the following code inside it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".imageViewer::-webkit-scrollbar {\n  height: 2px;\n}\n\n.imageViewer::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px rgb(94, 94, 94);\n  border-radius: 50px;\n}\n\n.imageViewer::-webkit-scrollbar-thumb {\n  background: rgb(0, 0, 0);\n  border-radius: 50px;\n}\n\na {\n  color: white;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now we need to update our ",(0,i.jsx)(n.code,{children:"App.js"})," file with all the components that we have made so far."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Import Modules"})," - First import all the modules and components into the\n",(0,i.jsx)(n.code,{children:"App.js"})," file by appending the following code under the ",(0,i.jsx)(n.code,{children:"//1 Importing..."}),"\nsection."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// 1. Importing other modules\nimport { GetWeb3, GetContract, GetAccount } from "./BlockchainUtil";\nimport IPFSUploader from "./IPFSUploader";\nimport IPFSViewer from "./IPFSViewer";\n\nimport contractJson from "./build/contracts/FileManager.json";\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Load Web3"})," - Now put the following code under the ",(0,i.jsx)(n.code,{children:"//2. Load web3..."}),"\nsection. This would set the state with web3 instance."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// 2. Load web3\nconst Web3 = new GetWeb3();\nthis.web3 = await Web3.getWeb3();\nthis.setState({ web3: this.web3 });\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Load Account"})," - Put the following code under the ",(0,i.jsx)(n.code,{children:"//3. Load Account..."}),"\nsection. This would set the state with MetaMask wallet's first connected\naddress."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// 3. Load Account\nconst Account = new GetAccount();\nthis.account = await Account.getAccount(this.web3);\nthis.setState({ account: this.account[0] });\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Load Smart contract"})," - Put the following code under the ",(0,i.jsx)(n.code,{children:"//4. Load smart..."}),"\nsection. This would set the state with deployed smart contract's instance for\nthe contract's interaction using JavaScript."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// 4. Load Contract\nconst Contract = new GetContract();\nthis.contract = await Contract.getContract(this.web3, contractJson);\nthis.setState({ contract: this.contract });\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Load components"})," - Inside the ",(0,i.jsx)(n.code,{children:"<div>"})," tag of ",(0,i.jsx)(n.code,{children:"return()"})," function, replace the\nexisting sample text ",(0,i.jsx)(n.code,{children:"Distributed File Manager"})," with the code of the following\ncomponents."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:'{\n  /* 5. Navbar */\n}\n<nav\n  className="navbar navbar-dark shadow"\n  style={{ backgroundColor: "#1b2021", height: "60px", color: "white" }}\n>\n  <b>Distributed File Manager</b>\n  <span style={{ float: "right" }}>{this.state.account}</span>\n</nav>;\n\n{\n  /* 6. IPFS Viewer com  ponent */\n}\n<IPFSViewer state={this.state} />;\n\n{\n  /* 7. IPFS Uploader component */\n}\n<IPFSUploader state={this.state} />;\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Your ",(0,i.jsx)(n.code,{children:"App.js"})," would now look like this ",(0,i.jsx)(n.a,{href:"/deprecated/tutorials-contest/2021/distributed-file-manager/frontend/App.js",children:"file"})]}),"\n",(0,i.jsx)(n.h2,{id:"starting-the-application",children:"Starting the Application"}),"\n",(0,i.jsxs)(n.p,{children:["Now go to the project root directory of the project, the ",(0,i.jsx)(n.code,{children:"dfm-react"}),"\ndirectory, and run the command ",(0,i.jsx)(n.code,{children:"npm start"}),". The ReactJS server would start\nautomatically. Visit ",(0,i.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})," to interact\nwith the built dapp."]}),"\n",(0,i.jsx)(n.p,{children:"Don't forget to set up MetaMask with Lux Testnet and also fund the\naccount with Lux test tokens to upload files."}),"\n",(0,i.jsx)(n.p,{children:"In the MetaMask extension, add a custom RPC by clicking at the network dropdown\nin the centre of the extension. Fill in the details as shown in the below image."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Info"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Network Name"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Lux Testnet"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"New RPC URL"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"https://api.lux-test.network/ext/bc/C/rpc",children:"https://api.lux-test.network/ext/bc/C/rpc"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Chain ID"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"43113"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Currency Symbol"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"LUX-C"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Block Explorer URL"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.a,{href:"https://testnet.snowtrace.io",children:"https://testnet.snowtrace.io"})})]})]})]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["If you find any difficulty in setting up the project, then feel free to clone\nthis repository\n",(0,i.jsx)(n.a,{href:"https://github.com/rajranjan0608/dfm/tree/lux",children:"https://github.com/rajranjan0608/dfm/tree/lux"}),",\nand follow the steps in the ",(0,i.jsx)(n.code,{children:"README.md"})," file of this repo in order to run the\napplication."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"final dapplication",src:t(43095).Z+"",width:"600",height:"337"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["Congratulations! You have successfully built a Distributed File Manager by\ndeploying the smart contract on ",(0,i.jsx)(n.strong,{children:"Lux"})," Testnet test network using\n",(0,i.jsx)(n.strong,{children:"Truffle Suite"})," and connecting your client-side made with ",(0,i.jsx)(n.strong,{children:"ReactJS"}),". The most\ninteresting part is that we have used the ",(0,i.jsx)(n.strong,{children:"IPFS"})," protocol for uploading our\nfiles on the distributed network."]}),"\n",(0,i.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,i.jsxs)(n.p,{children:["We have built a Distributed File Manager with basic upload and view features. I\nwant to encourage you to make a more scalable and sophisticated application by\nadding few more features like encrypting files before uploading by using the\nreceiver's public key or their account address. Or if you want to keep the file\nto yourself, you might encrypt the file using your account address. Learn more\non how to encrypt files before uploading them to IPFS\n",(0,i.jsx)(n.a,{href:"https://mycoralhealth.medium.com/learn-to-securely-share-files-on-the-blockchain-with-ipfs-219ee47df54c",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"about-the-author",children:"About the Author"}),"\n",(0,i.jsxs)(n.p,{children:["This tutorial is created by ",(0,i.jsx)(n.a,{href:"https://www.linkedin.com/in/iamrajranjan",children:"Raj Ranjan"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},92651:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-00-server-vs-p2p-6ad0749798dc9a1a5e03041390c866f6.jpeg"},27922:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-01-ipfs-swarm-e1927253b0c2d31aea58bca496e2c499.jpeg"},37073:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-02-master-private-public-key-generation-db8b15a6c0b55b21ff235937e9a10290.png"},36284:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-03-child-public-private-key-generation-efa2ee6d4a7ee669cfb929988e16a7da.png"},45323:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-04-hdwallet-cd2f2afa7442db087a8f5870ff6cf90f.png"},78584:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-05-localhost-react-server-21efd177babb30f9a6e32e9ae2f1b947.png"},32078:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-06-localhost-frontend-e73ea92737b3ac45bbe51ed738de24c3.png"},17031:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-07-c-chain-address-9d61064592c1afbc3d45788091af9917.png"},43095:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/distributed-file-manager-08-final-dapplication-18af7b95550514deb5182818c3dffddb.gif"},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(67294);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);