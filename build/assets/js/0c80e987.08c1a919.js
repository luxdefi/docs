"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[7868],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6884:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={},c="Using Foundry with the Lux C-Chain",s={unversionedId:"dapps/smart-contracts/using-foundry-with-the-lux-c-chain",id:"dapps/smart-contracts/using-foundry-with-the-lux-c-chain",title:"Using Foundry with the Lux C-Chain",description:"Introduction",source:"@site/docs/dapps/smart-contracts/using-foundry-with-the-lux-c-chain.md",sourceDirName:"dapps/smart-contracts",slug:"/dapps/smart-contracts/using-foundry-with-the-lux-c-chain",permalink:"/dapps/smart-contracts/using-foundry-with-the-lux-c-chain",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/dapps/smart-contracts/using-foundry-with-the-lux-c-chain.md",tags:[],version:"current",frontMatter:{},sidebar:"dapps",previous:{title:"Deploy a Smart Contract on Lux Using Remix and MetaMask",permalink:"/dapps/smart-contracts/deploy-a-smart-contract-on-lux-using-remix-and-metamask"},next:{title:"Using Hardhat with the Lux C-Chain",permalink:"/dapps/smart-contracts/using-hardhat-with-the-lux-c-chain"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Implement a Game Item NFT",id:"implement-a-game-item-nft",level:2},{value:"Compile &amp; deploy with Forge",id:"compile--deploy-with-forge",level:2},{value:"Mainnet Workflow",id:"mainnet-workflow",level:2},{value:"Local Workflow",id:"local-workflow",level:2}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-foundry-with-the-lux-c-chain"},"Using Foundry with the Lux C-Chain"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This article shows how to deploy and interact with smart contracts using foundry on the ",(0,o.kt)("a",{parentName:"p",href:"/quickstart/fuji-workflow"},"Fuji C-Chain"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/foundry-rs/foundry"},"Foundry toolchain")," is a smart contract development toolchain written in Rust."),(0,o.kt)("p",null,"Foundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command-line."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You have ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/foundry-rs/foundry#installation"},"installed Foundry"),". This installation includes the ",(0,o.kt)("inlineCode",{parentName:"li"},"forge")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"cast")," binaries used in this walk-through."),(0,o.kt)("li",{parentName:"ul"},"You are familiar with ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/luxdefi/lux-smart-contract-quickstart"},"Lux Smart Contract Quickstart"),"."),(0,o.kt)("li",{parentName:"ul"},"If you plan on running locally, ensure that you have installed and are familiar with ",(0,o.kt)("a",{parentName:"li",href:"../../subnets/network-runner"},"Lux Network Runner"),".")),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"This section will walk you through creating an ",(0,o.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-721"},"ERC721")," with Foundry and Lux Smart Contract Quickstart.\nClone the Lux Smart Contract Quickstart repo and install its dependencies by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"git clone https://github.com/luxdefi/lux-smart-contract-quickstart.git\ncd lux-smart-contract-quickstart\nyarn\n")),(0,o.kt)("p",null,"In order to deploy contracts, you need to have some LUX. You can get testnet LUX from the ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.lux.network"},"Lux Faucet"),", which is an easy way to get to play around with Lux. After getting comfortable with your code, you can run it on Mainnet after making the necessary changes to your workflow."),(0,o.kt)("h2",{id:"implement-a-game-item-nft"},"Implement a Game Item NFT"),(0,o.kt)("p",null,"We will use our example ERC721 smart contract, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/3fbba0ac28f6420e9be5d2635d5f23693f80127a/contracts/NFT.sol"},(0,o.kt)("inlineCode",{parentName:"a"},"NFT.sol"))," found in ",(0,o.kt)("inlineCode",{parentName:"p"},"./contracts")," of our project."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'//SPDX-License-Identifier: MIT\n// contracts/ERC721.sol\n\npragma solidity >=0.6.2;\n\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\nimport "@openzeppelin/contracts/utils/Counters.sol";\n\ncontract NFT is ERC721 {\n  using Counters for Counters.Counter;\n  Counters.Counter private _tokenIds;\n\n  constructor() ERC721("GameItem", "ITM") {}\n\n  // commented out unused variable\n  // function awardItem(address player, string memory tokenURI)\n  function awardItem(address player)\n    public\n    returns (uint256)\n  {\n    _tokenIds.increment();\n\n    uint256 newItemId = _tokenIds.current();\n    _mint(player, newItemId);\n    // _setTokenURI(newItemId, tokenURI);\n\n    return newItemId;\n  }\n}\n')),(0,o.kt)("p",null,"Let's examine this implementation of an NFT as a Game Item. We start by importing to contracts from our node modules. We import Openzeppelin's open source implementation of the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/2.x/api/token/erc721"},"ERC721 standard")," which our NFT contract will inherit from. Our constructor takes the ",(0,o.kt)("inlineCode",{parentName:"p"},"_name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_symbol")," arguments for our NFT and passes them on to the constructor of the parent ERC721 implementation. Lastly we implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"awardItem")," function which allows anyone to mint an NFT to a player's wallet address. This function increments the ",(0,o.kt)("inlineCode",{parentName:"p"},"currentTokenId")," and makes use of the ",(0,o.kt)("inlineCode",{parentName:"p"},"_mint")," function of our parent contract."),(0,o.kt)("h2",{id:"compile--deploy-with-forge"},"Compile & deploy with Forge"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-build.html"},"Forge")," is a command-line tool that ships with Foundry. Forge tests, builds, and deploys your smart contracts."),(0,o.kt)("p",null,"To compile the NFT contract run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"forge build\n")),(0,o.kt)("p",null,"By default the compiler output will be in the ",(0,o.kt)("inlineCode",{parentName:"p"},"out")," directory. To deploy our compiled contract with Forge we have to set environment variables for the RPC endpoint and the private key we want to use to deploy."),(0,o.kt)("p",null,"Set your environment variables by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"export RPC_URL=<YOUR-RPC-ENDPOINT>\nexport PRIVATE_KEY=<YOUR-PRIVATE-KEY>\n")),(0,o.kt)("p",null,"Since we are deploying to Fuji testnet, our ",(0,o.kt)("inlineCode",{parentName:"p"},"RPC_URL")," export should be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"export RPC_URL=https://api.lux-test.network/ext/bc/C/rpc\n")),(0,o.kt)("p",null,"Once set, you can ",(0,o.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/forge/forge-create.html"},"deploy your NFT with Forge")," by running the command below while adding the values for ",(0,o.kt)("inlineCode",{parentName:"p"},"_name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_symbol"),", the relevant ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/3ad93abf50fba65e3aab68f23382bcace73968be/contracts/NFT.sol#L13"},"constructor arguments")," of the NFT contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"forge create NFT --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY --constructor-args GameItem ITM\n")),(0,o.kt)("p",null,"Upon successful deployment, you will see the deploying wallet's address, the contract's address as well as the transaction hash printed to your terminal."),(0,o.kt)("p",null,"Here's an example output from an NFT deployment."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"[\u2814] Compiling...\nNo files changed, compilation skipped\nDeployer: 0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc\nDeployed to: 0x52c84043cd9c865236f11d9fc9f56aa003c1f922\nTransaction hash: 0xf35c40dbbdc9e4298698ad1cb9937195e5a5e74e557bab1970a5dfd42a32f533\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note: Please store your ",(0,o.kt)("inlineCode",{parentName:"em"},"Deployed to")," address for use in the next section.")),(0,o.kt)("h1",{id:"using-cast-to-interact-with-the-smart-contract"},"Using Cast to Interact with the Smart Contract"),(0,o.kt)("p",null,"We can call functions on our NFT contract with ",(0,o.kt)("a",{parentName:"p",href:"https://book.getfoundry.sh/reference/cast/cast-send.html"},"Cast"),", Foundry's command-line tool for interacting with smart contracts, sending transactions, and getting chain data. In this scenario, we will mint a Game Item to a player's wallet using the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/0f29cbb6375a1a452579213f688609c880d52c01/contracts/NFT.sol#L17"},(0,o.kt)("inlineCode",{parentName:"a"},"awardItem")," function")," in our smart contract."),(0,o.kt)("p",null,"Mint an NFT from your contract by replacing ",(0,o.kt)("inlineCode",{parentName:"p"},"<NFT-CONTRACT-ADDRESS>")," with your ",(0,o.kt)("inlineCode",{parentName:"p"},"Deployed to")," address and ",(0,o.kt)("inlineCode",{parentName:"p"},"<NFT-RECIPIENT-ADDRESS>")," with an address of your choice."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note: This section assumes that you have already set your RPC and private key env variables during deployment")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'cast send --rpc-url=$RPC_URL  <NFT-CONTRACT-ADDRESS> "awardItem(address)" <NFT-RECIPIENT-ADDRESS> --private-key=$PRIVATE_KEY\n')),(0,o.kt)("p",null,"Upon success, the command line will display the ",(0,o.kt)("a",{parentName:"p",href:"https://testnet.snowtrace.io/tx/0x4651ae041a481a6eeb852e5300e9be48e66a1d2332733df22d8e75cf460b0c2c"},"transaction data"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'blockHash               0x1d9b0364fe002eeddd0e32be0c27d6797c63dffb51fe555ea446357759e6a6f8\nblockNumber             10714448\ncontractAddress\ncumulativeGasUsed       90837\neffectiveGasPrice       28000000000\ngasUsed                 90837\nlogs                    [{"address":"0x45857b942723fff8ee7acd2b1d6515d9965c16e5","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x0000000000000000000000000000000000000000000000000000000000000000","0x000000000000000000000000845095a03a6686e24b90fed55e11f4ec808b1ab3","0x0000000000000000000000000000000000000000000000000000000000000001"],"data":"0x","blockHash":"0x1d9b0364fe002eeddd0e32be0c27d6797c63dffb51fe555ea446357759e6a6f8","blockNumber":"0xa37d50","transactionHash":"0x4651ae041a481a6eeb852e5300e9be48e66a1d2332733df22d8e75cf460b0c2c","transactionIndex":"0x0","logIndex":"0x0","removed":false}]\nlogsBloom               0xnroot\nstatus                  1\ntransactionHash         0x4651ae041a481a6eeb852e5300e9be48e66a1d2332733df22d8e75cf460b0c2c\ntransactionIndex        0\ntype                    2\n')),(0,o.kt)("p",null,"Well done! You just minted your first NFT from your contract. You can check the owner of ",(0,o.kt)("inlineCode",{parentName:"p"},"tokenId")," 1 by running the ",(0,o.kt)("inlineCode",{parentName:"p"},"cast call")," command below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},'cast call --rpc-url=$RPC_URL --private-key=$PRIVATE_KEY <NFT-CONTRACT-ADDRESS> "ownerOf(uint256)" 1\n')),(0,o.kt)("p",null,"The address you provided above should be returned as the owner."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"0x000000000000000000000000845095a03a6686e24b90fed55e11f4ec808b1ab3\n")),(0,o.kt)("h2",{id:"mainnet-workflow"},"Mainnet Workflow"),(0,o.kt)("p",null,"The Fuji workflow above can be adapted to Mainnet with the following modifications to the environment variables:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"export RPC_URL=https://api.lux.network/ext/bc/C/rpc\nexport PRIVATE_KEY=<YOUR-PRIVATE-KEY>\n")),(0,o.kt)("h2",{id:"local-workflow"},"Local Workflow"),(0,o.kt)("p",null,"The Fuji workflow above can be adapted to a Local Network by doing following:"),(0,o.kt)("p",null,"In a new terminal navigate to your ",(0,o.kt)("a",{parentName:"p",href:"/subnets/network-runner"},"Lux Network Runner")," directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"cd /path/to/Lux-Network-Runner\n")),(0,o.kt)("p",null,"Next, deploy a new Lux Network with five nodes (a Cluster) locally."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"go run examples/local/fivenodenetwork/main.go\n")),(0,o.kt)("p",null,"Next, modify the environment variables in your Foundry project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-zsh"},"export RPC_URL=http://localhost:9650/ext/bc/C/rpc\nexport PRIVATE_KEY=56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027\n")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"The example PRIVATE_KEY variable above provides a pre-funded account on Lux Network Runner and should be used for LOCAL DEVELOPMENT ONLY.")))}m.isMDXComponent=!0}}]);