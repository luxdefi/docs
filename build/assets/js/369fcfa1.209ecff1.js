"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[9479],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,c(c({ref:t},u),{},{components:n})):a.createElement(m,c({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5368:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),c=["components"],i={},l="Using Hardhat with the Lux C-Chain",s={unversionedId:"dapps/smart-contracts/using-hardhat-with-the-lux-c-chain",id:"dapps/smart-contracts/using-hardhat-with-the-lux-c-chain",title:"Using Hardhat with the Lux C-Chain",description:"Introduction",source:"@site/docs/dapps/smart-contracts/using-hardhat-with-the-lux-c-chain.md",sourceDirName:"dapps/smart-contracts",slug:"/dapps/smart-contracts/using-hardhat-with-the-lux-c-chain",permalink:"/dapps/smart-contracts/using-hardhat-with-the-lux-c-chain",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/dapps/smart-contracts/using-hardhat-with-the-lux-c-chain.md",tags:[],version:"current",frontMatter:{},sidebar:"dapps",previous:{title:"Using Foundry with the Lux C-Chain",permalink:"/dapps/smart-contracts/using-foundry-with-the-lux-c-chain"},next:{title:"Using Truffle with the Lux C-Chain",permalink:"/dapps/smart-contracts/using-truffle-with-the-lux-c-chain"}},u={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"NodeJS and Yarn",id:"nodejs-and-yarn",level:3},{value:"LuxGo and Lux Network Runner",id:"luxgo-and-lux-network-runner",level:3},{value:"Solidity and Lux",id:"solidity-and-lux",level:3},{value:"Dependencies",id:"dependencies",level:2},{value:"Write Contracts",id:"write-contracts",level:2},{value:"Hardhat Config",id:"hardhat-config",level:2},{value:"Hardhat Tasks",id:"hardhat-tasks",level:2},{value:"Accounts",id:"accounts",level:3},{value:"Balances",id:"balances",level:3},{value:"Hardhat Help",id:"hardhat-help",level:2},{value:"Typical Lux Network Runner Workflow",id:"typical-lux-network-runner-workflow",level:2},{value:"Run Lux Network Runner",id:"run-lux-network-runner",level:3},{value:"Start the server",id:"start-the-server",level:3},{value:"Start a New Lux Network with Five Nodes",id:"start-a-new-lux-network-with-five-nodes",level:3},{value:"Fund Accounts",id:"fund-accounts",level:3},{value:"Compile Smart Contracts",id:"compile-smart-contracts",level:3},{value:"Deploy Smart Contracts",id:"deploy-smart-contracts",level:2},{value:"Interact with Smart Contract",id:"interact-with-smart-contract",level:3},{value:"Summary",id:"summary",level:2}],d={toc:p};function h(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-hardhat-with-the-lux-c-chain"},"Using Hardhat with the Lux C-Chain"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Lux is an open-source platform for launching decentralized applications and enterprise blockchain deployments in one interoperable, highly scalable ecosystem. Lux gives you complete control on both the network and application layers\u2014helping you build anything you can imagine."),(0,o.kt)("p",null,"The Lux Network is composed of many blockchains. One of these blockchains is the C-Chain (Contract Chain), which is an Ethereum Virtual Machine instance. The C-Chain's API is almost identical to an Ethereum node's API. Lux offers the same interface as Ethereum but with higher speed, higher throughput, lower fees and lower transaction confirmation times. These properties considerably improve the performance of DApps and the user experience of smart contracts."),(0,o.kt)("p",null,"The goal of this guide is to lay out best practices regarding writing, testing and deployment of smart contracts to Lux's C-Chain. We'll be building smart contracts with development environment ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org"},"Hardhat"),"."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("h3",{id:"nodejs-and-yarn"},"NodeJS and Yarn"),(0,o.kt)("p",null,"First, install the LTS (long-term support) version of ",(0,o.kt)("a",{parentName:"p",href:"https://nodejs.org/en"},"nodejs"),". This is ",(0,o.kt)("inlineCode",{parentName:"p"},"14.17.0")," at the time of writing. NodeJS bundles ",(0,o.kt)("inlineCode",{parentName:"p"},"npm"),"."),(0,o.kt)("p",null,"Next, install ",(0,o.kt)("a",{parentName:"p",href:"https://yarnpkg.com"},"yarn"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"npm install -g yarn\n")),(0,o.kt)("h3",{id:"luxgo-and-lux-network-runner"},"LuxGo and Lux Network Runner"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/luxd"},"LuxGo")," is an Lux node implementation written in Go. ",(0,o.kt)("a",{parentName:"p",href:"/subnets/network-runner"},"Lux Network Runner")," is a tool to quickly deploy local test networks. Together, you can deploy local test networks and run tests on them."),(0,o.kt)("h3",{id:"solidity-and-lux"},"Solidity and Lux"),(0,o.kt)("p",null,"It is also helpful to have a basic understanding of ",(0,o.kt)("a",{parentName:"p",href:"https://docs.soliditylang.org"},"Solidity")," and Lux."),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("p",null,"Clone the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart"},"quickstart repository")," and install the necessary packages via ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ git clone https://github.com/luxdefi/lux-smart-contract-quickstart.git\n$ cd lux-smart-contract-quickstart\n$ yarn\n")),(0,o.kt)("h2",{id:"write-contracts"},"Write Contracts"),(0,o.kt)("p",null,"Edit the ",(0,o.kt)("inlineCode",{parentName:"p"},"Coin.sol")," contract in ",(0,o.kt)("inlineCode",{parentName:"p"},"contracts/"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"Coin.sol")," is an ",(0,o.kt)("a",{parentName:"p",href:"https://openzeppelin.com"},"Open Zeppelin")," ",(0,o.kt)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-20"},"ERC20")," contract. ERC20 is a popular smart contract interface. You can also add your own contracts."),(0,o.kt)("h2",{id:"hardhat-config"},"Hardhat Config"),(0,o.kt)("p",null,"Hardhat uses ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.js")," as the configuration file. You can define tasks, networks, compilers and more in that file. For more information see ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/config/"},"here"),"."),(0,o.kt)("p",null,"In our repository we use a pre-configured file ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/main/hardhat.config.ts"},"hardhat.config.ts"),". This file configures necessary network information to provide smooth interaction with Lux. There are also some pre-defined private keys for testing on a local test network."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The port in this tutorial uses 9650. Depending on how you start your local network, it could be different. Please check ",(0,o.kt)("a",{parentName:"p",href:"/quickstart/create-a-local-test-network#retrieve-all-nodes"},"here")," to see how to retrieve the port numbers.")),(0,o.kt)("h2",{id:"hardhat-tasks"},"Hardhat Tasks"),(0,o.kt)("p",null,"You can define custom hardhat tasks in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/main/hardhat.config.ts"},"hardhat.config.ts"),". There are two tasks included as examples: ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"balances"),". Both have scripts in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/main/package.json"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'"accounts": "npx hardhat accounts",\n"balances": "npx hardhat balances"\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"yarn accounts")," prints the list of accounts. ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn balances")," prints the list of LUX account balances. As with other ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn")," scripts you can pass in a ",(0,o.kt)("inlineCode",{parentName:"p"},"--network")," flag to hardhat tasks."),(0,o.kt)("h3",{id:"accounts"},"Accounts"),(0,o.kt)("p",null,"Prints a list of accounts on the local Lux Network Runner network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ yarn accounts --network local\nyarn run v1.22.4\nnpx hardhat accounts --network local\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC\n0x9632a79656af553F58738B0FB750320158495942\n0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430\n0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4\n0x0B891dB1901D4875056896f28B6665083935C7A8\n0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2\n0x78A23300E04FB5d5D2820E23cc679738982e1fd5\n0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293\n0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB\n0x0Fa8EA536Be85F32724D57A37758761B86416123\n")),(0,o.kt)("h3",{id:"balances"},"Balances"),(0,o.kt)("p",null,"Prints a list of accounts and their corresponding LUX balances on the local Lux Network Runner network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ yarn balances --network local\nyarn run v1.22.4\nnpx hardhat balances --network local\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC has balance 50000000000000000000000000\n0x9632a79656af553F58738B0FB750320158495942 has balance 0\n0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430 has balance 0\n0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4 has balance 0\n0x0B891dB1901D4875056896f28B6665083935C7A8 has balance 0\n0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2 has balance 0\n0x78A23300E04FB5d5D2820E23cc679738982e1fd5 has balance 0\n0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293 has balance 0\n0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB has balance 0\n0x0Fa8EA536Be85F32724D57A37758761B86416123 has balance 0\n")),(0,o.kt)("p",null,"Notice that the first account is already funded. This is because this address is pre-funded in the local network genesis file."),(0,o.kt)("h2",{id:"hardhat-help"},"Hardhat Help"),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn hardhat")," to list Hardhat's version, usage instructions, global options and available tasks."),(0,o.kt)("h2",{id:"typical-lux-network-runner-workflow"},"Typical Lux Network Runner Workflow"),(0,o.kt)("h3",{id:"run-lux-network-runner"},"Run Lux Network Runner"),(0,o.kt)("p",null,"First confirm you have the latest LuxGo built."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ cd /path/to/luxd\n$ git fetch -p\n$ git checkout master\n$ ./scripts/build.sh\n")),(0,o.kt)("p",null,"(Note that you can also ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/luxd/releases"},"download pre-compiled LuxGo binaries")," rather than building from source.)"),(0,o.kt)("p",null,"Confirm you have Lux Network Runner installed by following the steps listed ",(0,o.kt)("a",{parentName:"p",href:"/quickstart/create-a-local-test-network#installation"},"here")),(0,o.kt)("p",null,"Start Lux Network Runner and run a script to start a new local network."),(0,o.kt)("h3",{id:"start-the-server"},"Start the server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'$ cd /path/to/Lux-Network-Runner\n$ lux-network-runner server \\\n--log-level debug \\\n--port=":8080" \\\n--grpc-gateway-port=":8081"\n')),(0,o.kt)("h3",{id:"start-a-new-lux-network-with-five-nodes"},"Start a New Lux Network with Five Nodes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# replace execPath with the path to LuxGo on your machine\n# e.g., ${HOME}/go/src/github.com/luxdefi/luxd/build/luxd\n$ LUXGO_EXEC_PATH="luxd"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ lux-network-runner control start \\\n--log-level debug \\\n--endpoint="0.0.0.0:8080" \\\n--number-of-nodes=5 \\\n--luxd-path ${LUXGO_EXEC_PATH}\n')),(0,o.kt)("p",null,"Now you're running a local Lux network with 5 nodes."),(0,o.kt)("h3",{id:"fund-accounts"},"Fund Accounts"),(0,o.kt)("p",null,"Transfer 1,000 LUX from the X-Chain to each of the 10 accounts in ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts")," with the script ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/main/scripts/fund-cchain-addresses.js"},(0,o.kt)("inlineCode",{parentName:"a"},"fund-cchain-addresses")),". Funding these accounts is a prerequisite for deploying and interacting with smart contracts."),(0,o.kt)("p",null,"Note: If you see ",(0,o.kt)("inlineCode",{parentName:"p"},'Error: Invalid JSON RPC response: "API call rejected because chain is not done bootstrapping"'),", you need to wait until network is bootstrapped and ready to use. It should not take too long."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ cd /path/to/lux-smart-contract-quickstart\n$ yarn fund-cchain-addresses\nyarn run v1.22.4\nnpx hardhat run scripts/fund-cchain-addresses.js\nExporting 1000 LUX to each address on the C-Chain...\n2b75ae74ScLkWe5GVFTYJoP2EniMywkcZySQUoFGN2EJLiPDgp\nImporting LUX to the C-Chain...\n2dyXcQGiCk1ckCX4Fs8nLgL8GJgsM72f9Ga13rX5v9TAguVJYM\n\u2728  Done in 5.03s.\n")),(0,o.kt)("p",null,"Confirm each of the accounts are funded with 1000 LUX."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ yarn balances --network local\nyarn run v1.22.4\nnpx hardhat balances --network local\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC has balance 50000001000000000000000000\n0x9632a79656af553F58738B0FB750320158495942 has balance 1000000000000000000\n0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430 has balance 1000000000000000000\n0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4 has balance 1000000000000000000\n0x0B891dB1901D4875056896f28B6665083935C7A8 has balance 1000000000000000000\n0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2 has balance 1000000000000000000\n0x78A23300E04FB5d5D2820E23cc679738982e1fd5 has balance 1000000000000000000\n0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293 has balance 1000000000000000000\n0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB has balance 1000000000000000000\n0x0Fa8EA536Be85F32724D57A37758761B86416123 has balance 1000000000000000000\n\u2728  Done in 0.72s.\n")),(0,o.kt)("p",null,"Send each of the accounts some LUX from the first account."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ yarn send-lux-wallet-signer --network local\nyarn run v1.22.4\nnpx hardhat run scripts/sendAvaWalletSigner.ts --network local\nSeeding addresses with LUX\n\u2728  Done in 1.33s.\n")),(0,o.kt)("p",null,"Confirm that the balances are updated"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ yarn balances --network local\nyarn run v1.22.4\nnpx hardhat balances --network local\n0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC has balance 49999999995275000000000000\n0x9632a79656af553F58738B0FB750320158495942 has balance 1000010000000000000000\n0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430 has balance 1000010000000000000000\n0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4 has balance 1000010000000000000000\n0x0B891dB1901D4875056896f28B6665083935C7A8 has balance 1000010000000000000000\n0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2 has balance 1000010000000000000000\n0x78A23300E04FB5d5D2820E23cc679738982e1fd5 has balance 1000010000000000000000\n0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293 has balance 1000010000000000000000\n0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB has balance 1000010000000000000000\n0x0Fa8EA536Be85F32724D57A37758761B86416123 has balance 1000010000000000000000\n")),(0,o.kt)("p",null,"Note: If you see ",(0,o.kt)("inlineCode",{parentName:"p"},"Error HH108: Cannot connect to the network local. Please make sure your node is running, and check your internet connection and networks config"),", ensure that you are using a valid Node Port. See which ports the Nodes are using by running the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'$ cd /path/to/lux-network-runner\n$ lux-network-runner control uris \\\n--log-level debug \\\n--endpoint="0.0.0.0:8080"\n')),(0,o.kt)("h3",{id:"compile-smart-contracts"},"Compile Smart Contracts"),(0,o.kt)("p",null,"In ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/main/package.json"},(0,o.kt)("inlineCode",{parentName:"a"},"package.json"))," there's a ",(0,o.kt)("inlineCode",{parentName:"p"},"compile")," script."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'"compile": "npx hardhat compile",\n')),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn compile")," to make sure your project compiles."),(0,o.kt)("p",null,"Compile the smart contract."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ yarn compile\nyarn run v1.22.4\nrimraf ./build/\nnpx hardhat compile\nCompiling 1 file with 0.6.4\nCompilation finished successfully\n\u2728  Done in 2.13s.\n")),(0,o.kt)("h2",{id:"deploy-smart-contracts"},"Deploy Smart Contracts"),(0,o.kt)("p",null,"Hardhat enables deploying to multiple environments. In ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/main/package.json"},"package.json")," there is a script for deploying."),(0,o.kt)("p",null,"Edit the deployment script in ",(0,o.kt)("inlineCode",{parentName:"p"},"scripts/deploy.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'"deploy": "npx hardhat run scripts/deploy.ts",\n')),(0,o.kt)("p",null,"You can choose which environment that you want to deploy to by passing in the ",(0,o.kt)("inlineCode",{parentName:"p"},"--network")," flag with ",(0,o.kt)("inlineCode",{parentName:"p"},"local")," (e.g. a local network created with Lux Network Runner), ",(0,o.kt)("inlineCode",{parentName:"p"},"fuji"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"mainnet")," for each respective environment. If you don't pass in ",(0,o.kt)("inlineCode",{parentName:"p"},"--network")," then it will default to the hardhat network. For example, if you want to deploy to mainnet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"yarn deploy --network mainnet\n")),(0,o.kt)("p",null,"Deploy the contract to your local network"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ yarn deploy --network local\nyarn run v1.22.4\nnpx hardhat run scripts/deploy.ts --network local\nCoin deployed to: 0x17aB05351fC94a1a67Bf3f56DdbB941aE6\n\u2728  Done in 1.28s.\n")),(0,o.kt)("p",null,"We now have a token deployed at ",(0,o.kt)("inlineCode",{parentName:"p"},"0x17aB05351fC94a1a67Bf3f56DdbB941aE6"),"."),(0,o.kt)("h3",{id:"interact-with-smart-contract"},"Interact with Smart Contract"),(0,o.kt)("p",null,"Hardhat has a developer console to interact with contracts and the network. For more information about Hardhat's console see ",(0,o.kt)("a",{parentName:"p",href:"https://hardhat.org/guides/hardhat-console.html"},"here"),". Hardhat console is a NodeJS-REPL, and you can use different tools in it. ",(0,o.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/"},"ethers")," is the library that we'll use to interact with our network."),(0,o.kt)("p",null,"You can open console with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},'$ yarn console --network local\nyarn run v1.22.11\nnpx hardhat console --network local\nWelcome to Node.js v16.2.0.\nType ".help" for more information.\n>\n')),(0,o.kt)("p",null,"Get the contract instance with factory and contract address to interact with our contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> const Coin = await ethers.getContractFactory('ExampleERC20');\nundefined\n> const coin = await Coin.attach('0x17aB05351fC94a1a67Bf3f56DdbB941aE6')\nundefined\n")),(0,o.kt)("p",null,"The first line retrieves contract factory with ABI & bytecode. The second line retrieves an instance of that contract factory with given contract address. Recall that our contract was already deployed to ",(0,o.kt)("inlineCode",{parentName:"p"},"0x17aB05351fC94a1a67Bf3f56DdbB941aE6")," in the previous step."),(0,o.kt)("p",null,"Fetch the accounts:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> let accounts = await ethers.provider.listAccounts()\nundefined\n> accounts\n[\n  '0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC',\n  '0x9632a79656af553F58738B0FB750320158495942',\n  '0x55ee05dF718f1a5C1441e76190EB1a19eE2C9430',\n  '0x4Cf2eD3665F6bFA95cE6A11CFDb7A2EF5FC1C7E4',\n  '0x0B891dB1901D4875056896f28B6665083935C7A8',\n  '0x01F253bE2EBF0bd64649FA468bF7b95ca933BDe2',\n  '0x78A23300E04FB5d5D2820E23cc679738982e1fd5',\n  '0x3C7daE394BBf8e9EE1359ad14C1C47003bD06293',\n  '0x61e0B3CD93F36847Abbd5d40d6F00a8eC6f3cfFB',\n  '0x0Fa8EA536Be85F32724D57A37758761B86416123'\n]\n")),(0,o.kt)("p",null,"This is exactly the same account list as in ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn accounts"),"."),(0,o.kt)("p",null,"Now we can interact with our ",(0,o.kt)("inlineCode",{parentName:"p"},"ERC-20")," contract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> let value = await coin.balanceOf(accounts[0])\nundefined\n> value.toString()\n'123456789'\n> value = await coin.balanceOf(accounts[1])\nBigNumber { _hex: '0x00', _isBigNumber: true }\n> value.toString()\n'0'\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"account[0]")," has a balance because ",(0,o.kt)("inlineCode",{parentName:"p"},"account[0]")," is the default account. The contract is deployed with this account. The constructor of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/luxdefi/lux-smart-contract-quickstart/blob/main/contracts/ERC20.sol"},"ERC20.sol")," mints ",(0,o.kt)("inlineCode",{parentName:"p"},"TOTAL_SUPPLY")," of 123456789 token to the deployer of the contract."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"accounts[1]")," currently has no balance. Send some tokens to ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts[1]"),", which is ",(0,o.kt)("inlineCode",{parentName:"p"},"0x9632a79656af553F58738B0FB750320158495942"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> let result = await coin.transfer(accounts[1], 100)\nundefined\n> result\n{\n  hash: '0x35eec91011f9089ba7689479617a90baaf8590395b5c80bb209fa7000e4848a5',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC',\n  gasPrice: BigNumber { _hex: '0x34630b8a00', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0x8754', _isBigNumber: true },\n  to: '0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25',\n  value: BigNumber { _hex: '0x00', _isBigNumber: true },\n  nonce: 3,\n  data: '0xa9059cbb0000000000000000000000009632a79656af553f58738b0fb7503201584959420000000000000000000000000000000000000000000000000000000000000064',\n  r: '0xc2b9680771c092a106eadb2887e5bff41fcda166c8e00f36ae79b196bbc53d36',\n  s: '0x355138cb5e2b9f20c15626638750775cfc9423881db374d732a8549d05ebf601',\n  v: 86260,\n  creates: null,\n  chainId: 43112,\n  wait: [Function (anonymous)]\n}\n")),(0,o.kt)("p",null,"Note: Since this is a local network, we did not need to wait until transaction is accepted. However for other networks like ",(0,o.kt)("inlineCode",{parentName:"p"},"fuji")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"mainnet")," you need to wait until transaction is accepted with: ",(0,o.kt)("inlineCode",{parentName:"p"},"await result.wait()"),"."),(0,o.kt)("p",null,"Now we can ensure that tokens are transferred:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> value = await coin.balanceOf(accounts[0])\nBigNumber { _hex: '0x075bccb1', _isBigNumber: true }\n> value.toString()\n'123456689'\n> value = await coin.balanceOf(accounts[1])\nBigNumber { _hex: '0x64', _isBigNumber: true }\n> value.toString()\n'100'\n")),(0,o.kt)("p",null,'As you might noticed there was no "sender" information in ',(0,o.kt)("inlineCode",{parentName:"p"},"await coin.transfer(accounts[1], 100)"),"; this is because ",(0,o.kt)("inlineCode",{parentName:"p"},"ethers")," uses the first signer as the default signer. In our case this is ",(0,o.kt)("inlineCode",{parentName:"p"},"account[0]"),". If we want to use another account we need to connect with it first."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> let signer1 = await ethers.provider.getSigner(1)\n> let contractAsSigner1 = coin.connect(signer1)\n")),(0,o.kt)("p",null,"Now we can call the contract with ",(0,o.kt)("inlineCode",{parentName:"p"},"signer1"),", which is ",(0,o.kt)("inlineCode",{parentName:"p"},"account[1]"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> await contractAsSigner1.transfer(accounts[0], 5)\n{\n  hash: '0x807947f1c40bb723ac312739d238b62764ae3c3387c6cdbbb6534501577382dd',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0x9632a79656af553F58738B0FB750320158495942',\n  gasPrice: BigNumber { _hex: '0x34630b8a00', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0x8754', _isBigNumber: true },\n  to: '0x17aB05351fC94a1a67Bf3f56DdbB941aE6c63E25',\n  value: BigNumber { _hex: '0x00', _isBigNumber: true },\n  nonce: 2,\n  data: '0xa9059cbb0000000000000000000000008db97c7cece249c2b98bdc0226cc4c2a57bf52fc0000000000000000000000000000000000000000000000000000000000000005',\n  r: '0xcbf126dd0b109491d037c5f3af754ef2d0d7d06149082b13d0e27e502d3adc5b',\n  s: '0x5978521804dd15674147cc6b532b8801c4d3a0e94f41f5d7ffaced14b9262504',\n  v: 86259,\n  creates: null,\n  chainId: 43112,\n  wait: [Function (anonymous)]\n}\n")),(0,o.kt)("p",null,"Let's check balances now:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"> value = await coin.balanceOf(accounts[0])\nBigNumber { _hex: '0x075bccb6', _isBigNumber: true }\n> value.toString()\n'123456694'\n> value = await coin.balanceOf(accounts[1])\nBigNumber { _hex: '0x5f', _isBigNumber: true }\n> value.toString()\n'95'\n")),(0,o.kt)("p",null,"We've succesfully transfered 5 tokes from ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts[1]")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"accounts[0]")),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Now you have the tools you need to launch a local Lux network, create a Hardhat project, as well as create, compile, deploy and interact with Solidity contracts."),(0,o.kt)("p",null,"Join our ",(0,o.kt)("a",{parentName:"p",href:"https://chat.lux.network"},"Discord Server")," to learn more and ask any questions you may have."))}h.isMDXComponent=!0}}]);