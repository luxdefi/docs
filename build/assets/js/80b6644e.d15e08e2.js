"use strict";(self.webpackChunklux_docs=self.webpackChunklux_docs||[]).push([[462],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){x(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,x=function(e,t){if(null==e)return{};var n,a,x={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(x[n]=e[n]);return x}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(x[n]=e[n])}return x}var l=a.createContext({}),o=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,x=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=o(n),u=x,k=c["".concat(l,".").concat(u)]||c[u]||p[u]||i;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function u(e,t){var n=arguments,x=t&&t.mdxType;if("string"==typeof e||x){var i=n.length,r=new Array(i);r[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:x,r[1]=s;for(var o=2;o<i;o++)r[o]=n[o];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1491:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return o},toc:function(){return p}});var a=n(7462),x=n(3366),i=(n(7294),n(3905)),r=["components"],s={},l="Platform Transaction Format",o={unversionedId:"specs/platform-transaction-serialization",id:"specs/platform-transaction-serialization",title:"Platform Transaction Format",description:"This file is meant to be the single source of truth for how we serialize transactions in Lux\u2019s Platform Virtual Machine, aka the Platform Chain or P-Chain. This document uses the primitive serialization format for packing and secp256k1 for cryptographic user identification.",source:"@site/docs/specs/platform-transaction-serialization.md",sourceDirName:"specs",slug:"/specs/platform-transaction-serialization",permalink:"/specs/platform-transaction-serialization",draft:!1,editUrl:"https://github.com/luxdefi/network-docs/edit/main/docs/specs/platform-transaction-serialization.md",tags:[],version:"current",frontMatter:{},sidebar:"specs",previous:{title:"Serialization Primitives",permalink:"/specs/serialization-primitives"},next:{title:"Abigen",permalink:"/specs/abigen"}},d={},p=[{value:"Codec ID",id:"codec-id",level:2},{value:"Transferable Output",id:"transferable-output",level:2},{value:"What Transferable Output Contains",id:"what-transferable-output-contains",level:3},{value:"Gantt Transferable Output Specification",id:"gantt-transferable-output-specification",level:3},{value:"Proto Transferable Output Specification",id:"proto-transferable-output-specification",level:3},{value:"Transferable Output Example",id:"transferable-output-example",level:3},{value:"Transferable Input",id:"transferable-input",level:2},{value:"What Transferable Input Contains",id:"what-transferable-input-contains",level:3},{value:"Gantt Transferable Input Specification",id:"gantt-transferable-input-specification",level:3},{value:"Proto Transferable Input Specification",id:"proto-transferable-input-specification",level:3},{value:"Transferable Input Example",id:"transferable-input-example",level:3},{value:"Outputs",id:"outputs",level:2},{value:"SECP256K1 Transfer Output",id:"secp256k1-transfer-output",level:2},{value:"<strong>What SECP256K1 Transfer Output Contains</strong>",id:"what-secp256k1-transfer-output-contains",level:3},{value:"<strong>Gantt SECP256K1 Transfer Output Specification</strong>",id:"gantt-secp256k1-transfer-output-specification",level:3},{value:"<strong>Proto SECP256K1 Transfer Output Specification</strong>",id:"proto-secp256k1-transfer-output-specification",level:3},{value:"<strong>SECP256K1 Transfer Output Example</strong>",id:"secp256k1-transfer-output-example",level:3},{value:"SECP256K1 Output Owners Output",id:"secp256k1-output-owners-output",level:2},{value:"<strong>What SECP256K1 Output Owners Output Contains</strong>",id:"what-secp256k1-output-owners-output-contains",level:3},{value:"<strong>Gantt SECP256K1 Output Owners Output Specification</strong>",id:"gantt-secp256k1-output-owners-output-specification",level:3},{value:"<strong>Proto SECP256K1 Output Owners Output Specification</strong>",id:"proto-secp256k1-output-owners-output-specification",level:3},{value:"<strong>SECP256K1 Output Owners Output Example</strong>",id:"secp256k1-output-owners-output-example",level:3},{value:"Inputs",id:"inputs",level:2},{value:"SECP256K1 Transfer Input",id:"secp256k1-transfer-input",level:2},{value:"<strong>What SECP256K1 Transfer Input Contains</strong>",id:"what-secp256k1-transfer-input-contains",level:3},{value:"<strong>Gantt SECP256K1 Transfer Input Specification</strong>",id:"gantt-secp256k1-transfer-input-specification",level:3},{value:"<strong>SECP256K1 Transfer Input Example</strong>",id:"secp256k1-transfer-input-example",level:3},{value:"Unsigned Transactions",id:"unsigned-transactions",level:2},{value:"Unsigned BaseTx",id:"unsigned-basetx",level:2},{value:"<strong>What Base Tx Contains</strong>",id:"what-base-tx-contains",level:3},{value:"<strong>Gantt Base Tx Specification</strong>",id:"gantt-base-tx-specification",level:3},{value:"<strong>Proto Base Tx Specification</strong>",id:"proto-base-tx-specification",level:3},{value:"<strong>Base Tx Example</strong>",id:"base-tx-example",level:3},{value:"Unsigned Add Validator Tx",id:"unsigned-add-validator-tx",level:2},{value:"<strong>What Unsigned Add Validator Tx Contains</strong>",id:"what-unsigned-add-validator-tx-contains",level:3},{value:"<strong>Gantt Unsigned Add Validator Tx Specification</strong>",id:"gantt-unsigned-add-validator-tx-specification",level:3},{value:"<strong>Proto Unsigned Add Validator Tx Specification</strong>",id:"proto-unsigned-add-validator-tx-specification",level:3},{value:"<strong>Unsigned Add Validator Tx Example</strong>",id:"unsigned-add-validator-tx-example",level:3},{value:"Unsigned Add Subnet Validator Tx",id:"unsigned-add-subnet-validator-tx",level:2},{value:"<strong>What Unsigned Add Subnet Validator Tx Contains</strong>",id:"what-unsigned-add-subnet-validator-tx-contains",level:3},{value:"<strong>Gantt Unsigned Add Subnet Validator Tx Specification</strong>",id:"gantt-unsigned-add-subnet-validator-tx-specification",level:3},{value:"<strong>Proto Unsigned Add Subnet Validator Tx Specification</strong>",id:"proto-unsigned-add-subnet-validator-tx-specification",level:3},{value:"<strong>Unsigned Add Subnet Validator Tx Example</strong>",id:"unsigned-add-subnet-validator-tx-example",level:3},{value:"Unsigned Add Delegator Tx",id:"unsigned-add-delegator-tx",level:2},{value:"<strong>What Unsigned Add Delegator Tx Contains</strong>",id:"what-unsigned-add-delegator-tx-contains",level:3},{value:"<strong>Gantt Unsigned Add Delegator Tx Specification</strong>",id:"gantt-unsigned-add-delegator-tx-specification",level:3},{value:"<strong>Proto Unsigned Add Delegator Tx Specification</strong>",id:"proto-unsigned-add-delegator-tx-specification",level:3},{value:"<strong>Unsigned Add Delegator Tx Example</strong>",id:"unsigned-add-delegator-tx-example",level:3},{value:"Unsigned Create Chain Tx",id:"unsigned-create-chain-tx",level:2},{value:"<strong>What Unsigned Create Chain Tx Contains</strong>",id:"what-unsigned-create-chain-tx-contains",level:3},{value:"<strong>Gantt Unsigned Create Chain Tx Specification</strong>",id:"gantt-unsigned-create-chain-tx-specification",level:3},{value:"<strong>Proto Unsigned Create Chain Tx Specification</strong>",id:"proto-unsigned-create-chain-tx-specification",level:3},{value:"<strong>Unsigned Create Chain Tx Example</strong>",id:"unsigned-create-chain-tx-example",level:3},{value:"Unsigned Create Subnet Tx",id:"unsigned-create-subnet-tx",level:2},{value:"<strong>What Unsigned Create Subnet Tx Contains</strong>",id:"what-unsigned-create-subnet-tx-contains",level:3},{value:"<strong>Gantt Unsigned Create Subnet Tx Specification</strong>",id:"gantt-unsigned-create-subnet-tx-specification",level:3},{value:"<strong>Proto Unsigned Create Subnet Tx Specification</strong>",id:"proto-unsigned-create-subnet-tx-specification",level:3},{value:"<strong>Unsigned Create Subnet Tx Example</strong>",id:"unsigned-create-subnet-tx-example",level:3},{value:"Unsigned Import Tx",id:"unsigned-import-tx",level:2},{value:"<strong>What Unsigned Import Tx Contains</strong>",id:"what-unsigned-import-tx-contains",level:3},{value:"<strong>Gantt Unsigned Import Tx Specification</strong>",id:"gantt-unsigned-import-tx-specification",level:3},{value:"<strong>Proto Unsigned Import Tx Specification</strong>",id:"proto-unsigned-import-tx-specification",level:3},{value:"<strong>Unsigned Import Tx Example</strong>",id:"unsigned-import-tx-example",level:3},{value:"Unsigned Export Tx",id:"unsigned-export-tx",level:2},{value:"<strong>What Unsigned Export Tx Contains</strong>",id:"what-unsigned-export-tx-contains",level:3},{value:"<strong>Gantt Unsigned Export Tx Specification</strong>",id:"gantt-unsigned-export-tx-specification",level:3},{value:"<strong>Proto Unsigned Export Tx Specification</strong>",id:"proto-unsigned-export-tx-specification",level:3},{value:"<strong>Unsigned Export Tx Example</strong>",id:"unsigned-export-tx-example",level:3},{value:"Credentials",id:"credentials",level:2},{value:"SECP256K1 Credential",id:"secp256k1-credential",level:2},{value:"<strong>What SECP256K1 Credential Contains</strong>",id:"what-secp256k1-credential-contains",level:3},{value:"<strong>Gantt SECP256K1 Credential Specification</strong>",id:"gantt-secp256k1-credential-specification",level:3},{value:"<strong>Proto SECP256K1 Credential Specification</strong>",id:"proto-secp256k1-credential-specification",level:3},{value:"<strong>SECP256K1 Credential Example</strong>",id:"secp256k1-credential-example",level:3},{value:"Signed Transaction",id:"signed-transaction",level:2},{value:"What Signed Transaction Contains",id:"what-signed-transaction-contains",level:3},{value:"Gantt Signed Transaction Specification",id:"gantt-signed-transaction-specification",level:3},{value:"Proto Signed Transaction Specification",id:"proto-signed-transaction-specification",level:3},{value:"Signed Transaction Example",id:"signed-transaction-example",level:3},{value:"UTXO",id:"utxo",level:2},{value:"What UTXO Contains",id:"what-utxo-contains",level:3},{value:"Gantt UTXO Specification",id:"gantt-utxo-specification",level:4},{value:"Proto UTXO Specification",id:"proto-utxo-specification",level:3},{value:"UTXO Example",id:"utxo-example",level:3},{value:"StakeableLockIn",id:"stakeablelockin",level:2},{value:"<strong>What StakeableLockIn Contains</strong>",id:"what-stakeablelockin-contains",level:3},{value:"<strong>Gantt StakeableLockIn Specification</strong>",id:"gantt-stakeablelockin-specification",level:3},{value:"<strong>Proto StakeableLockIn Specification</strong>",id:"proto-stakeablelockin-specification",level:3},{value:"<strong>StakeableLockIn Example</strong>",id:"stakeablelockin-example",level:3},{value:"StakeableLockOut",id:"stakeablelockout",level:2},{value:"<strong>What StakeableLockOut Contains</strong>",id:"what-stakeablelockout-contains",level:3},{value:"<strong>Gantt StakeableLockOut Specification</strong>",id:"gantt-stakeablelockout-specification",level:3},{value:"<strong>Proto StakeableLockOut Specification</strong>",id:"proto-stakeablelockout-specification",level:3},{value:"<strong>StakeableLockOut Example</strong>",id:"stakeablelockout-example",level:3},{value:"Subnet Auth",id:"subnet-auth",level:2},{value:"<strong>What Subnet Auth Contains</strong>",id:"what-subnet-auth-contains",level:3},{value:"<strong>Gantt Subnet Auth Specification</strong>",id:"gantt-subnet-auth-specification",level:3},{value:"<strong>Proto Subnet Auth Specification</strong>",id:"proto-subnet-auth-specification",level:3},{value:"<strong>Subnet Auth Example</strong>",id:"subnet-auth-example",level:3},{value:"Validator",id:"validator",level:2},{value:"<strong>What Validator Contains</strong>",id:"what-validator-contains",level:3},{value:"<strong>Gantt Validator Specification</strong>",id:"gantt-validator-specification",level:3},{value:"<strong>Proto Validator Specification</strong>",id:"proto-validator-specification",level:3},{value:"<strong>Validator Example</strong>",id:"validator-example",level:3},{value:"Rewards Owner",id:"rewards-owner",level:2},{value:"<strong>What Rewards Owner Contains</strong>",id:"what-rewards-owner-contains",level:3},{value:"<strong>Gantt Rewards Owner Specification</strong>",id:"gantt-rewards-owner-specification",level:3},{value:"<strong>Proto Rewards Owner Specification</strong>",id:"proto-rewards-owner-specification",level:3},{value:"<strong>Rewards Owner Example</strong>",id:"rewards-owner-example",level:3}],c={toc:p};function u(e){var t=e.components,n=(0,x.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"platform-transaction-format"},"Platform Transaction Format"),(0,i.kt)("p",null,"This file is meant to be the single source of truth for how we serialize transactions in Lux\u2019s Platform Virtual Machine, aka the ",(0,i.kt)("inlineCode",{parentName:"p"},"Platform Chain")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"P-Chain"),". This document uses the ",(0,i.kt)("a",{parentName:"p",href:"/specs/serialization-primitives"},"primitive serialization")," format for packing and ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," for cryptographic user identification."),(0,i.kt)("h2",{id:"codec-id"},"Codec ID"),(0,i.kt)("p",null,"Some data is prepended with a codec ID (unt16) that denotes how the data should be deserialized. Right now, the only valid codec ID is 0 (",(0,i.kt)("inlineCode",{parentName:"p"},"0x00 0x00"),")."),(0,i.kt)("h2",{id:"transferable-output"},"Transferable Output"),(0,i.kt)("p",null,"Transferable outputs wrap an output with an asset ID."),(0,i.kt)("h3",{id:"what-transferable-output-contains"},"What Transferable Output Contains"),(0,i.kt)("p",null,"A transferable output contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"AssetID")," and an ",(0,i.kt)("inlineCode",{parentName:"p"},"Output"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID"))," is a 32-byte array that defines which asset this output references. The only valid ",(0,i.kt)("inlineCode",{parentName:"li"},"AssetID")," is the LUX ",(0,i.kt)("inlineCode",{parentName:"li"},"AssetID"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output"))," is an output, as defined below. For example, this can be a SECP256K1 transfer output.")),(0,i.kt)("h3",{id:"gantt-transferable-output-specification"},"Gantt Transferable Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+----------+----------+-------------------------+\n| asset_id : [32]byte |                32 bytes |\n+----------+----------+-------------------------+\n| output   : Output   |      size(output) bytes |\n+----------+----------+-------------------------+\n                      | 32 + size(output) bytes |\n                      +-------------------------+\n")),(0,i.kt)("h3",{id:"proto-transferable-output-specification"},"Proto Transferable Output Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message TransferableOutput {\n    bytes asset_id = 1; // 32 bytes\n    Output output = 2;  // size(output)\n}\n")),(0,i.kt)("h3",{id:"transferable-output-example"},"Transferable Output Example"),(0,i.kt)("p",null,"Let\u2019s make a transferable output:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"AssetID: 0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Output: "Example SECP256K1 Transfer Output from below"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    AssetID <- 0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a,\n    Output  <- 0x0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c,\n]\n=\n[\n    // assetID:\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    // output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n]\n")),(0,i.kt)("h2",{id:"transferable-input"},"Transferable Input"),(0,i.kt)("p",null,"Transferable inputs describe a specific UTXO with a provided transfer input."),(0,i.kt)("h3",{id:"what-transferable-input-contains"},"What Transferable Input Contains"),(0,i.kt)("p",null,"A transferable input contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TxID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTXOIndex")," ",(0,i.kt)("inlineCode",{parentName:"p"},"AssetID")," and an ",(0,i.kt)("inlineCode",{parentName:"p"},"Input"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," is a 32-byte array that defines which transaction this input is consuming an output from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex"))," is an int that defines which utxo this input is consuming the specified transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID"))," is a 32-byte array that defines which asset this input references. The only valid ",(0,i.kt)("inlineCode",{parentName:"li"},"AssetID")," is the LUX ",(0,i.kt)("inlineCode",{parentName:"li"},"AssetID"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Input"))," is a transferable input object.")),(0,i.kt)("h3",{id:"gantt-transferable-input-specification"},"Gantt Transferable Input Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------+----------+------------------------+\n| tx_id      : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| utxo_index : int      |               04 bytes |\n+------------+----------+------------------------+\n| asset_id   : [32]byte |               32 bytes |\n+------------+----------+------------------------+\n| input      : Input    |      size(input) bytes |\n+------------+----------+------------------------+\n                        | 68 + size(input) bytes |\n                        +------------------------+\n")),(0,i.kt)("h3",{id:"proto-transferable-input-specification"},"Proto Transferable Input Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message TransferableInput {\n    bytes tx_id = 1;       // 32 bytes\n    uint32 utxo_index = 2; // 04 bytes\n    bytes asset_id = 3;    // 32 bytes\n    Input input = 4;       // size(input)\n}\n")),(0,i.kt)("h3",{id:"transferable-input-example"},"Transferable Input Example"),(0,i.kt)("p",null,"Let\u2019s make a transferable input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0dfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Input")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transfer Input from below"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TxID      <- 0x0dfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15\n    UTXOIndex <- 0x00000001\n    AssetID   <- 0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a\n    Input     <- 0x0000000500000000ee6b28000000000100000000\n]\n=\n[\n    // txID:\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00\n]\n")),(0,i.kt)("h2",{id:"outputs"},"Outputs"),(0,i.kt)("p",null,"Outputs have two possible type: ",(0,i.kt)("inlineCode",{parentName:"p"},"SECP256K1TransferOutput"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SECP256K1OutputOwners"),"."),(0,i.kt)("h2",{id:"secp256k1-transfer-output"},"SECP256K1 Transfer Output"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," transfer output allows for sending a quantity of an asset to a collection of addresses after a specified unix time. The only valid asset is LUX."),(0,i.kt)("h3",{id:"what-secp256k1-transfer-output-contains"},(0,i.kt)("strong",{parentName:"h3"},"What SECP256K1 Transfer Output Contains")),(0,i.kt)("p",null,"A secp256k1 transfer output contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Amount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Threshold"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Addresses"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000007"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount"))," is a long that specifies the quantity of the asset that this output owns. Must be positive."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp that this output can be spent after. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold"))," is an int that names the number of unique signatures required to spend the output. Must be less than or equal to the length of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),". If ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is empty, must be 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is a list of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-secp256k1-transfer-output-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt SECP256K1 Transfer Output Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| amount    : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 28 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-transfer-output-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto SECP256K1 Transfer Output Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1TransferOutput {\n    uint32 type_id = 1;           // 04 bytes\n    uint64 amount = 2;            // 08 bytes\n    uint64 locktime = 3;          // 08 bytes\n    uint32 threshold = 4;         // 04 bytes\n    repeated bytes addresses = 5; // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-transfer-output-example"},(0,i.kt)("strong",{parentName:"h3"},"SECP256K1 Transfer Output Example")),(0,i.kt)("p",null,"Let\u2019s make a secp256k1 transfer output with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": 7"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount")),": 3999000000"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": 0"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": 1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"0xda2bee01be82ecc00c34f361eda8eb30fb5a715c")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID    <- 0x00000007\n    Amount    <- 0x00000000ee5be5c0\n    Locktime  <- 0x0000000000000000\n    Threshold <- 0x00000001\n    Addresses <- [\n        0xda2bee01be82ecc00c34f361eda8eb30fb5a715c,\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x07,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0xee, 0x5b, 0xe5, 0xc0,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x01,\n    // addrs[0]:\n    0xda, 0x2b, 0xee, 0x01, 0xbe, 0x82, 0xec, 0xc0,\n    0x0c, 0x34, 0xf3, 0x61, 0xed, 0xa8, 0xeb, 0x30,\n    0xfb, 0x5a, 0x71, 0x5c,\n]\n")),(0,i.kt)("h2",{id:"secp256k1-output-owners-output"},"SECP256K1 Output Owners Output"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," output owners output will receive the staking rewards when the lock up period ends."),(0,i.kt)("h3",{id:"what-secp256k1-output-owners-output-contains"},(0,i.kt)("strong",{parentName:"h3"},"What SECP256K1 Output Owners Output Contains")),(0,i.kt)("p",null,"A secp256k1 output owners output contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Threshold"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Addresses"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000b"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp that this output can be spent after. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold"))," is an int that names the number of unique signatures required to spend the output. Must be less than or equal to the length of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),". If ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is empty, must be 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is a list of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-secp256k1-output-owners-output-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt SECP256K1 Output Owners Output Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------+------------+--------------------------------+\n| type_id   : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| locktime  : long       |                        8 bytes |\n+-----------+------------+--------------------------------+\n| threshold : int        |                        4 bytes |\n+-----------+------------+--------------------------------+\n| addresses : [][20]byte |  4 + 20 * len(addresses) bytes |\n+-----------+------------+--------------------------------+\n                         | 20 + 20 * len(addresses) bytes |\n                         +--------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-output-owners-output-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto SECP256K1 Output Owners Output Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1OutputOwnersOutput {\n    uint32 type_id = 1;           // 04 bytes\n    uint64 locktime = 2;          // 08 bytes\n    uint32 threshold = 3;         // 04 bytes\n    repeated bytes addresses = 4; // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-output-owners-output-example"},(0,i.kt)("strong",{parentName:"h3"},"SECP256K1 Output Owners Output Example")),(0,i.kt)("p",null,"Let\u2019s make a secp256k1 output owners output with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": 11"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": 0"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": 1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"0xda2bee01be82ecc00c34f361eda8eb30fb5a715c")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID    <- 0x0000000b\n    Locktime  <- 0x0000000000000000\n    Threshold <- 0x00000001\n    Addresses <- [\n        0xda2bee01be82ecc00c34f361eda8eb30fb5a715c,\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x0b,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x01,\n    // addrs[0]:\n    0xda, 0x2b, 0xee, 0x01, 0xbe, 0x82, 0xec, 0xc0,\n    0x0c, 0x34, 0xf3, 0x61, 0xed, 0xa8, 0xeb, 0x30,\n    0xfb, 0x5a, 0x71, 0x5c,\n]\n")),(0,i.kt)("h2",{id:"inputs"},"Inputs"),(0,i.kt)("p",null,"Inputs have one possible type: ",(0,i.kt)("inlineCode",{parentName:"p"},"SECP256K1TransferInput"),"."),(0,i.kt)("h2",{id:"secp256k1-transfer-input"},"SECP256K1 Transfer Input"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," transfer input allows for spending an unspent secp256k1 transfer output."),(0,i.kt)("h3",{id:"what-secp256k1-transfer-input-contains"},(0,i.kt)("strong",{parentName:"h3"},"What SECP256K1 Transfer Input Contains")),(0,i.kt)("p",null,"A secp256k1 transfer input contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"Amount")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AddressIndices"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000005"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount"))," is a long that specifies the quantity that this input should be consuming from the UTXO. Must be positive. Must be equal to the amount specified in the UTXO."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices"))," is a list of unique ints that define the private keys are being used to spend the UTXO. Each UTXO has an array of addresses that can spend the UTXO. Each int represents the index in this address array that will sign this transaction. The array must be sorted low to high.")),(0,i.kt)("h3",{id:"gantt-secp256k1-transfer-input-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt SECP256K1 Transfer Input Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-------------------------+-------------------------------------+\n| type_id         : int   |                             4 bytes |\n+-----------------+-------+-------------------------------------+\n| amount          : long  |                             8 bytes |\n+-----------------+-------+-------------------------------------+\n| address_indices : []int |  4 + 4 * len(address_indices) bytes |\n+-----------------+-------+-------------------------------------+\n                          | 16 + 4 * len(address_indices) bytes |\n                          +-------------------------------------+\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Proto SECP256K1 Transfer Input Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1TransferInput {\n    uint32 type_id = 1;                  // 04 bytes\n    uint64 amount = 2;                   // 08 bytes\n    repeated uint32 address_indices = 3; // 04 bytes + 4 bytes * len(address_indices)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-transfer-input-example"},(0,i.kt)("strong",{parentName:"h3"},"SECP256K1 Transfer Input Example")),(0,i.kt)("p",null,"Let\u2019s make a payment input with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": 5"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Amount")),": 4000000000"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices")),": ","[","0","]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID         <- 0x00000005\n    Amount         <- 0x00000000ee6b2800,\n    AddressIndices <- [0x00000000]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x05,\n    // amount:\n    0x00, 0x00, 0x00, 0x00, 0xee, 0x6b, 0x28, 0x00,\n    // length:\n    0x00, 0x00, 0x00, 0x01,\n    // address_indices[0]\n    0x00, 0x00, 0x00, 0x00\n]\n")),(0,i.kt)("h2",{id:"unsigned-transactions"},"Unsigned Transactions"),(0,i.kt)("p",null,"Unsigned transactions contain the full content of a transaction with only the signatures missing. Unsigned transactions have six possible types: ",(0,i.kt)("inlineCode",{parentName:"p"},"AddValidatorTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AddSubnetValidatorTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AddDelegatorTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateSubnetTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ImportTx"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"ExportTx"),". They embed ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", which contains common fields and operations."),(0,i.kt)("h2",{id:"unsigned-basetx"},"Unsigned BaseTx"),(0,i.kt)("h3",{id:"what-base-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Base Tx Contains")),(0,i.kt)("p",null,"A base tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NetworkID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"BlockchainID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Outputs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Inputs"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Memo"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000000"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NetworkID"))," is an int that defines which network this transaction is meant to be issued to. This value is meant to support transaction routing and is not designed for replay attack prevention."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BlockchainID"))," is a 32-byte array that defines which blockchain this transaction was issued to. This is used for replay attack prevention for transactions that could potentially be valid across network or blockchain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outputs"))," is an array of transferable output objects. Outputs must be sorted lexicographically by their serialized representation. The total quantity of the assets created in these outputs must be less than or equal to the total quantity of each asset consumed in the inputs minus the transaction fee."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Inputs"))," is an array of transferable input objects. Inputs must be sorted and unique. Inputs are sorted first lexicographically by their ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," and then by the ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex"))," from low to high. If there are inputs that have the same ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," and ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),", then the transaction is invalid as this would result in a double spend."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Memo"))," Memo field contains arbitrary bytes, up to 256 bytes.")),(0,i.kt)("h3",{id:"gantt-base-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Base Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------------+----------------------+-----------------------------------------+\n| type_id       : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| network_id    : int                  |                                 4 bytes |\n+---------------+----------------------+-----------------------------------------+\n| blockchain_id : [32]byte             |                                32 bytes |\n+---------------+----------------------+-----------------------------------------+\n| outputs       : []TransferableOutput |                 4 + size(outputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| inputs        : []TransferableInput  |                  4 + size(inputs) bytes |\n+---------------+----------------------+-----------------------------------------+\n| memo          : [256]byte            |                    4 + size(memo) bytes |\n+---------------+----------------------+-----------------------------------------+\n                          | 52 + size(outputs) + size(inputs) + size(memo) bytes |\n                          +------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-base-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Base Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message BaseTx {\n    uint32 type_id = 1;          // 04 bytes\n    uint32 network_id = 2;       // 04 bytes\n    bytes blockchain_id = 3;     // 32 bytes\n    repeated Output outputs = 4; // 04 bytes + size(outs)\n    repeated Input inputs = 5;   // 04 bytes + size(ins)\n    bytes memo = 6;              // 04 bytes + size(memo)\n}\n")),(0,i.kt)("h3",{id:"base-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Base Tx Example")),(0,i.kt)("p",null,"Let\u2019s make a base tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NetworkID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"12345")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BlockchainID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000000000000000000000000000000000000000000000000000000000000000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outputs")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"Example Transferable Output as defined above"')))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Inputs")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"Example Transferable Input as defined above"'))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID       <- 0x00000000\n    NetworkID    <- 0x00003039\n    BlockchainID <- 0x000000000000000000000000000000000000000000000000000000000000000\n    Outputs      <- [\n        0x6870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c\n    ]\n    Inputs       <- [\n        0xdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x00,\n    // networkID:\n    0x00, 0x00, 0x30, 0x39,\n    // blockchainID:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // number of outputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable output:\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    // number of inputs:\n    0x00, 0x00, 0x00, 0x01,\n    // transferable input:\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    // Memo length:\n    0x00, 0x00, 0x00, 0x00,\n]\n")),(0,i.kt)("h2",{id:"unsigned-add-validator-tx"},"Unsigned Add Validator Tx"),(0,i.kt)("h3",{id:"what-unsigned-add-validator-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Unsigned Add Validator Tx Contains")),(0,i.kt)("p",null,"An unsigned add validator tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Validator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Stake"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"RewardsOwner"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Shares"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x0000000c"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Validator"))," Validator has a ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeID"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"StartTime"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"EndTime"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"Weight"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID"))," is 20 bytes which is the node ID of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"StartTime"))," is a long which is the Unix time when the validator starts validating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"EndTime"))," is a long which is the Unix time when the validator stops validating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Weight"))," is a long which is the amount the validator stakes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Stake"))," Stake has ",(0,i.kt)("inlineCode",{parentName:"li"},"LockedOuts"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"LockedOuts"))," An array of Transferable Outputs that are locked for the duration of the staking period. At the end of the staking period, these outputs are refunded to their respective addresses."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"RewardsOwner"))," A ",(0,i.kt)("inlineCode",{parentName:"li"},"SECP256K1OutputOwners")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Shares"))," 10,000 times percentage of reward taken from delegators")),(0,i.kt)("h3",{id:"gantt-unsigned-add-validator-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Unsigned Add Validator Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------------+-----------------------+-----------------------------------------+\n| base_tx       : BaseTx                |                     size(base_tx) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| validator     : Validator             |                                44 bytes |\n+---------------+-----------------------+-----------------------------------------+\n| stake         : Stake                 |                  size(LockedOuts) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| rewards_owner : SECP256K1OutputOwners |               size(rewards_owner) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| shares        : Shares                |                                 4 bytes |\n+---------------+-----------------------+-----------------------------------------+\n                  | 48 + size(stake) + size(rewards_owner) + size(base_tx) bytes |\n                  +--------------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-add-validator-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Unsigned Add Validator Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message AddValidatorTx {\n    BaseTx base_tx = 1;                      // size(base_tx)\n    Validator validator = 2;                 // 44 bytes\n    Stake stake = 3;                         // size(LockedOuts)\n    SECP256K1OutputOwners rewards_owner = 4; // size(rewards_owner)\n    uint32 shares = 5;                       // 04 bytes\n}\n")),(0,i.kt)("h3",{id:"unsigned-add-validator-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Unsigned Add Validator Tx Example")),(0,i.kt)("p",null,"Let\u2019s make an unsigned add validator tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx")),": ",(0,i.kt)("inlineCode",{parentName:"p"},'"Example BaseTx as defined above with ID set to 0c"'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Validator"))," Validator has a ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"StartTime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"EndTime"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Weight")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID"))," is 20 bytes which is the node ID of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"StartTime"))," is a long which is the Unix time when the validator starts validating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"EndTime"))," is a long which is the Unix time when the validator stops validating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Weight"))," is a long which is the amount the validator stakes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Stake")),": ",(0,i.kt)("inlineCode",{parentName:"p"},"0x0000000139c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d55008800000007000001d1a94a2000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"RewardsOwner")),": ",(0,i.kt)("inlineCode",{parentName:"p"},"0x0000000b00000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Shares")),": ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000064")),(0,i.kt)("p",{parentName:"li"},"0x0000000b00000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx       <- 0x0000000c000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    NodeID       <- 0xe9094f73698002fd52c90819b457b9fbc866ab80\n    StarTime     <- 0x000000005f21f31d\n    EndTime      <- 0x000000005f497dc6\n    Weight       <- 0x000000000000d431\n    Stake        <- 0x0000000139c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d55008800000007000001d1a94a2000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c\n    RewardsOwner <- 0x0000000b00000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c\n    Shares       <- 0x00000064\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x68, 0x70, 0xb7, 0xd6,\n    0x6a, 0xc3, 0x25, 0x40, 0x31, 0x13, 0x79, 0xe5,\n    0xb5, 0xdb, 0xad, 0x28, 0xec, 0x7e, 0xb8, 0xdd,\n    0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    0x00, 0x00, 0x00, 0x01,\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Node ID\n    0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,\n    0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,\n    0xc8, 0x66, 0xab, 0x80,\n    // StartTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,\n    // EndTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,\n    // Weight\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // Stake\n    0x00, 0x00, 0x00, 0x01, 0x39, 0xc3, 0x3a, 0x49,\n    0x9c, 0xe4, 0xc3, 0x3a, 0x3b, 0x09, 0xcd, 0xd2,\n    0xcf, 0xa0, 0x1a, 0xe7, 0x0d, 0xbf, 0x2d, 0x18,\n    0xb2, 0xd7, 0xd1, 0x68, 0x52, 0x44, 0x40, 0xe5,\n    0x5d, 0x55, 0x00, 0x88, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,\n    0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,\n    0x61, 0xe1, 0xb2, 0x9c,\n    // RewardsOwner\n    0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    // Shares\n    0x00, 0x00, 0x00, 0x64,\n]\n")),(0,i.kt)("h2",{id:"unsigned-add-subnet-validator-tx"},"Unsigned Add Subnet Validator Tx"),(0,i.kt)("h3",{id:"what-unsigned-add-subnet-validator-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Unsigned Add Subnet Validator Tx Contains")),(0,i.kt)("p",null,"An unsigned add Subnet validator tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Validator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SubnetID"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"SubnetAuth"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x0000000d"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Validator"))," Validator has a ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeID"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"StartTime"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"EndTime"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"Weight"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID"))," is 20 bytes which is the node ID of the validator."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"StartTime"))," is a long which is the Unix time when the validator starts validating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"EndTime"))," is a long which is the Unix time when the validator stops validating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Weight"))," is a long which is the amount the validator stakes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetID"))," a 32 byte Subnet id"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetAuth"))," contains ",(0,i.kt)("inlineCode",{parentName:"li"},"SigIndices")," and has a type id of ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000a"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"SigIndices")," is a list of unique ints that define the addresses signing the control signature to add a validator to a Subnet. The array must be sorted low to high.")),(0,i.kt)("h3",{id:"gantt-unsigned-add-subnet-validator-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Unsigned Add Subnet Validator Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------------+----------------------+-----------------------------------------+\n| base_tx       : BaseTx               |                     size(base_tx) bytes |\n+---------------+----------------------+-----------------------------------------+\n| validator     : Validator            |                                44 bytes |\n+---------------+----------------------+-----------------------------------------+\n| subnet_id     : [32]byte             |                                32 bytes |\n+---------------+----------------------+-----------------------------------------+\n| subnet_auth   : SubnetAuth           |        4 bytes + len(sig_indices) bytes |\n+---------------+----------------------+-----------------------------------------+\n                                   | 80 + len(sig_indices) + size(base_tx) bytes |\n                                   +---------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-add-subnet-validator-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Unsigned Add Subnet Validator Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message AddSubnetValidatorTx {\n    BaseTx base_tx = 1;         // size(base_tx)\n    Validator validator = 2;    // size(validator)\n    SubnetID subnet_id = 3;     // 32 bytes\n    SubnetAuth subnet_auth = 4; // 04 bytes + len(sig_indices)\n}\n")),(0,i.kt)("h3",{id:"unsigned-add-subnet-validator-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Unsigned Add Subnet Validator Tx Example")),(0,i.kt)("p",null,"Let\u2019s make an unsigned add Subnet validator tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example BaseTx as defined above with ID set to 0d"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xe9094f73698002fd52c90819b457b9fbc866ab80")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"StarTime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000000005f21f31d")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"EndTime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000000005f497dc6")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Weight")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000000000000d431")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x58b1092871db85bc752742054e2e8be0adf8166ec1f0f0769f4779f14c71d7eb")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetAuth")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000a")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SigIndices")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000000"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx       <- 0x0000000d000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    NodeID       <- 0xe9094f73698002fd52c90819b457b9fbc866ab80\n    StarTime     <- 0x000000005f21f31d\n    EndTime      <- 0x000000005f497dc6\n    Weight       <- 0x000000000000d431\n    SubnetID     <- 0x58b1092871db85bc752742054e2e8be0adf8166ec1f0f0769f4779f14c71d7eb\n    SubnetAuth TypeID   <- 0x0000000a\n    SubnetAuth   <- 0x00000000\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x0d,\n    0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    0x00, 0x00, 0x00, 0x01,\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Node ID\n    0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,\n    0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,\n    0xc8, 0x66, 0xab, 0x80,\n    // StartTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,\n    // EndTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,\n    // Weight\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // SubnetID\n    0x58, 0xb1, 0x09, 0x28, 0x71, 0xdb, 0x85, 0xbc,\n    0x75, 0x27, 0x42, 0x05, 0x4e, 0x2e, 0x8b, 0xe0,\n    0xad, 0xf8, 0x16, 0x6e, 0xc1, 0xf0, 0xf0, 0x76,\n    0x9f, 0x47, 0x79, 0xf1, 0x4c, 0x71, 0xd7, 0xeb,\n    // SubnetAuth\n    // SubnetAuth TypeID\n    0x00, 0x00, 0x00, 0x0a,\n    // SigIndices length\n    0x00, 0x00, 0x00, 0x01,\n    // SigIndices\n    0x00, 0x00, 0x00, 0x00,\n]\n")),(0,i.kt)("h2",{id:"unsigned-add-delegator-tx"},"Unsigned Add Delegator Tx"),(0,i.kt)("h3",{id:"what-unsigned-add-delegator-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Unsigned Add Delegator Tx Contains")),(0,i.kt)("p",null,"An unsigned add delegator tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Validator"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Stake"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"RewardsOwner"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x0000000e"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Validator"))," Validator has a ",(0,i.kt)("inlineCode",{parentName:"li"},"NodeID"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"StartTime"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"EndTime"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"Weight"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID"))," is 20 bytes which is the node ID of the delegatee."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"StartTime"))," is a long which is the Unix time when the delegator starts delegating."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"EndTime"))," is a long which is the Unix time when the delegator stops delegating (and staked LUX is returned)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Weight"))," is a long which is the amount the delegator stakes"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Stake"))," Stake has ",(0,i.kt)("inlineCode",{parentName:"li"},"LockedOuts"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"LockedOuts"))," An array of Transferable Outputs that are locked for the duration of the staking period. At the end of the staking period, these outputs are refunded to their respective addresses."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"RewardsOwner"))," An ",(0,i.kt)("inlineCode",{parentName:"li"},"SECP256K1OutputOwners"))),(0,i.kt)("h3",{id:"gantt-unsigned-add-delegator-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Unsigned Add Delegator Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------------+-----------------------+-----------------------------------------+\n| base_tx       : BaseTx                |                     size(base_tx) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| validator     : Validator             |                                44 bytes |\n+---------------+-----------------------+-----------------------------------------+\n| stake         : Stake                 |                  size(LockedOuts) bytes |\n+---------------+-----------------------+-----------------------------------------+\n| rewards_owner : SECP256K1OutputOwners |               size(rewards_owner) bytes |\n+---------------+-----------------------+-----------------------------------------+\n                  | 44 + size(stake) + size(rewards_owner) + size(base_tx) bytes |\n                  +--------------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-add-delegator-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Unsigned Add Delegator Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message AddDelegatorTx {\n    BaseTx base_tx = 1;                      // size(base_tx)\n    Validator validator = 2;                 // 44 bytes\n    Stake stake = 3;                         // size(LockedOuts)\n    SECP256K1OutputOwners rewards_owner = 4; // size(rewards_owner)\n}\n")),(0,i.kt)("h3",{id:"unsigned-add-delegator-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Unsigned Add Delegator Tx Example")),(0,i.kt)("p",null,"Let\u2019s make an unsigned add delegator tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example BaseTx as defined above with ID set to 0e"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xe9094f73698002fd52c90819b457b9fbc866ab80")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"StarTime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000000005f21f31d")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"EndTime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000000005f497dc6")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Weight")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000000000000d431")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Stake")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000139c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d55008800000007000001d1a94a2000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"RewardsOwner")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000b00000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx       <- 0x0000000e000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    NodeID       <- 0xe9094f73698002fd52c90819b457b9fbc866ab80\n    StarTime     <- 0x000000005f21f31d\n    EndTime      <- 0x000000005f497dc6\n    Weight       <- 0x000000000000d431\n    Stake        <- 0x0000000139c33a499ce4c33a3b09cdd2cfa01ae70dbf2d18b2d7d168524440e55d55008800000007000001d1a94a2000000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c\n    RewardsOwner <- 0x0000000b00000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715c\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x5b, 0xe5, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n    0x00, 0x00, 0x00, 0x01,\n    0xdf, 0xaf, 0xbd, 0xf5, 0xc8, 0x1f, 0x63, 0x5c,\n    0x92, 0x57, 0x82, 0x4f, 0xf2, 0x1c, 0x8e, 0x3e,\n    0x6f, 0x7b, 0x63, 0x2a, 0xc3, 0x06, 0xe1, 0x14,\n    0x46, 0xee, 0x54, 0x0d, 0x34, 0x71, 0x1a, 0x15,\n    0x00, 0x00, 0x00, 0x01,\n    0x68, 0x70, 0xb7, 0xd6, 0x6a, 0xc3, 0x25, 0x40,\n    0x31, 0x13, 0x79, 0xe5, 0xb5, 0xdb, 0xad, 0x28,\n    0xec, 0x7e, 0xb8, 0xdd, 0xbf, 0xc8, 0xf4, 0xd6,\n    0x72, 0x99, 0xeb, 0xb4, 0x84, 0x75, 0x90, 0x7a,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00,\n    // Node ID\n    0xe9, 0x09, 0x4f, 0x73, 0x69, 0x80, 0x02, 0xfd,\n    0x52, 0xc9, 0x08, 0x19, 0xb4, 0x57, 0xb9, 0xfb,\n    0xc8, 0x66, 0xab, 0x80,\n    // StartTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x21, 0xf3, 0x1d,\n    // EndTime\n    0x00, 0x00, 0x00, 0x00, 0x5f, 0x49, 0x7d, 0xc6,\n    // Weight\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // Stake\n    0x00, 0x00, 0x00, 0x01, 0x39, 0xc3, 0x3a, 0x49,\n    0x9c, 0xe4, 0xc3, 0x3a, 0x3b, 0x09, 0xcd, 0xd2,\n    0xcf, 0xa0, 0x1a, 0xe7, 0x0d, 0xbf, 0x2d, 0x18,\n    0xb2, 0xd7, 0xd1, 0x68, 0x52, 0x44, 0x40, 0xe5,\n    0x5d, 0x55, 0x00, 0x88, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x01, 0xd1, 0xa9, 0x4a, 0x20, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,\n    0x3c, 0xb7, 0xd3, 0x84, 0x2e, 0x8c, 0xee, 0x6a,\n    0x0e, 0xbd, 0x09, 0xf1, 0xfe, 0x88, 0x4f, 0x68,\n    0x61, 0xe1, 0xb2, 0x9c,\n    // RewardsOwner\n    0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c,\n]\n")),(0,i.kt)("h2",{id:"unsigned-create-chain-tx"},"Unsigned Create Chain Tx"),(0,i.kt)("h3",{id:"what-unsigned-create-chain-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Unsigned Create Chain Tx Contains")),(0,i.kt)("p",null,"An unsigned create chain tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SubnetID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ChainName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"VMID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"FxIDs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"GenesisData")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"SubnetAuth"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x0000000f"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetID"))," ID of the Subnet that validates this blockchain"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ChainName"))," A human readable name for the chain; need not be unique"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"VMID"))," ID of the VM running on the new chain"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"FxIDs"))," IDs of the feature extensions running on the new chain"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GenesisData"))," Byte representation of genesis state of the new chain"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetAuth"))," Authorizes this blockchain to be added to this Subnet")),(0,i.kt)("h3",{id:"gantt-unsigned-create-chain-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Unsigned Create Chain Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+--------------+-------------+------------------------------------------+\n| base_tx      : BaseTx      |                      size(base_tx) bytes |\n+--------------+-------------+------------------------------------------+\n| subnet_id    : SubnetID    |                                 32 bytes |\n+--------------+-------------+------------------------------------------+\n| chain_name   : ChainName   |                2 + len(chain_name) bytes |\n+--------------+-------------+------------------------------------------+\n| vm_id        : VMID        |                                 32 bytes |\n+--------------+-------------+------------------------------------------+\n| fx_ids       : FxIDs       |                   4 + size(fx_ids) bytes |\n+--------------+-------------+------------------------------------------+\n| genesis_data : GenesisData |             4 + size(genesis_data) bytes |\n+--------------+-------------+------------------------------------------+\n| subnet_auth  : SubnetAuth  |                  size(subnet_auth) bytes |\n+--------------+-------------+------------------------------------------+\n               | 74 + size(base_tx) + size(chain_name) + size(fx_ids) + |\n               |           size(genesis_data) + size(subnet_auth) bytes |\n+--------------+--------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-create-chain-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Unsigned Create Chain Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message CreateChainTx {\n    BaseTx base_tx = 1;               // size(base_tx)\n    SubnetID subnet_id = 2;           // 32 bytes\n    ChainName chain_name = 3;         // 2 + len(chain_name) bytes\n    VMID vm_id = 4;                   // 32 bytes\n    FxIDs fx_ids = 5;                 // 4 + size(fx_ids) bytes\n    GenesisData genesis_data = 6      // 4 + size(genesis_data) bytes\n    SubnetAuth subnet_auth = 7;       // size(subnet_auth) bytes\n}\n")),(0,i.kt)("h3",{id:"unsigned-create-chain-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Unsigned Create Chain Tx Example")),(0,i.kt)("p",null,"Let\u2019s make an unsigned create chain tx that uses the inputs and outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example BaseTx as defined above with ID set to 0f"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"24tZhrm8j8GCJRE9PomW8FaeqbgGS4UAQjJnqqn8pq5NwYSYV1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"ChainName")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"EPIC AVM")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"VMID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"avm")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"FxIDs")),": ","[",(0,i.kt)("inlineCode",{parentName:"li"},"secp256k1fx"),"]"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"GenesisData")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"11111DdZMhYXUZiFV9FNpfpTSQroysXhzWicG954YAKfkrk3bCEzLVY7gun1eAmAwMiQzVhtGpdR6dnPVcfhBE7brzkJ1r4wzi3dgA8G9Jwc4WpZ6Uh4Dr9aTdw7sFA5cpvCAVBsx6Xf3CB82jwH1gjPZ3WQnnCSKr2reoLtam6TfyYRra5xxXSkZcUm6BaJMW4fKzNP58uyExajPYKZvT5LrQ7MPJ9Fp7ebmYSzXg7YYauNARj")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SubnetAuth")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000a0000000100000000"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx       <- 0x0000000f000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    SubnetID     <- 0x8c86d07cd60218661863e0116552dccd5bd84c564bd29d7181dbddd5ec616104\n    ChainName    <- 0x455049432041564d\n    VMID         <- 0x61766d0000000000000000000000000000000000000000000000000000000000\n    FxIDs        <- 0x736563703235366b316678000000000000000000000000000000000000000000\n    GenesisData  <- 0x000000000001000e4173736574416c6961735465737400000539000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b66726f6d20736e6f77666c616b6520746f206176616c616e636865000a54657374204173736574000454455354000000000100000000000000010000000700000000000001fb000000000000000000000001000000013cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c\n    SubnetAuth   <- 0x0000000a0000000100000000\n]\n=\n[\n  // base tx\n  0x00, 0x00, 0x00, 0x0f,\n  0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n  0x39, 0xc3, 0x3a, 0x49, 0x9c, 0xe4, 0xc3, 0x3a,\n  0x3b, 0x09, 0xcd, 0xd2, 0xcf, 0xa0, 0x1a, 0xe7,\n  0x0d, 0xbf, 0x2d, 0x18, 0xb2, 0xd7, 0xd1, 0x68,\n  0x52, 0x44, 0x40, 0xe5, 0x5d, 0x55, 0x00, 0x88,\n  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x12, 0x30,\n  0x9c, 0xd5, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n  0x00, 0x00, 0x00, 0x01, 0x3c, 0xb7, 0xd3, 0x84,\n  0x2e, 0x8c, 0xee, 0x6a, 0x0e, 0xbd, 0x09, 0xf1,\n  0xfe, 0x88, 0x4f, 0x68, 0x61, 0xe1, 0xb2, 0x9c,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // end base tx\n\n  // Subnet id\n  0x8c, 0x86, 0xd0, 0x7c, 0xd6, 0x02, 0x18, 0x66,\n  0x18, 0x63, 0xe0, 0x11, 0x65, 0x52, 0xdc, 0xcd,\n  0x5b, 0xd8, 0x4c, 0x56, 0x4b, 0xd2, 0x9d, 0x71,\n  0x81, 0xdb, 0xdd, 0xd5, 0xec, 0x61, 0x61, 0x04,\n\n  // chain name length\n  0x00, 0x08,\n\n  // chain name\n  0x45, 0x50, 0x49, 0x43, 0x20, 0x41, 0x56, 0x4d,\n\n  // vm id\n  0x61, 0x76, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\n  // fxids\n  // num fxids\n  0x00, 0x00, 0x00, 0x01,\n  // fxid\n  0x73, 0x65, 0x63, 0x70, 0x32, 0x35, 0x36, 0x6b,\n  0x31, 0x66, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\n  // genesis data len\n  0x00, 0x00, 0x00, 0xb0,\n  // genesis data\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0e,\n  0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x6c, 0x69,\n  0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x00, 0x00,\n  0x05, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x66, 0x72,\n  0x6f, 0x6d, 0x20, 0x73, 0x6e, 0x6f, 0x77, 0x66,\n  0x6c, 0x61, 0x6b, 0x65, 0x20, 0x74, 0x6f, 0x20,\n  0x61, 0x76, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x68,\n  0x65, 0x00, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x20,\n  0x41, 0x73, 0x73, 0x65, 0x74, 0x00, 0x04, 0x54,\n  0x45, 0x53, 0x54, 0x00, 0x00, 0x00, 0x00, 0x01,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n  0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x01, 0xfb, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n  0x00, 0x00, 0x00, 0x01, 0x3c, 0xb7, 0xd3, 0x84,\n  0x2e, 0x8c, 0xee, 0x6a, 0x0e, 0xbd, 0x09, 0xf1,\n  0xfe, 0x88, 0x4f, 0x68, 0x61, 0xe1, 0xb2, 0x9c,\n\n  // type id (Subnet Auth)\n  0x00, 0x00, 0x00, 0x0a,\n  // num address indices\n  0x00, 0x00, 0x00, 0x01,\n  // address index\n  0x00, 0x00, 0x00, 0x00,\n]\n")),(0,i.kt)("h2",{id:"unsigned-create-subnet-tx"},"Unsigned Create Subnet Tx"),(0,i.kt)("h3",{id:"what-unsigned-create-subnet-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Unsigned Create Subnet Tx Contains")),(0,i.kt)("p",null,"An unsigned create Subnet tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"RewardsOwner"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000010"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"RewardsOwner"))," A ",(0,i.kt)("inlineCode",{parentName:"li"},"SECP256K1OutputOwners"))),(0,i.kt)("h3",{id:"gantt-unsigned-create-subnet-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Unsigned Create Subnet Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------------+-----------------------|---------------------------------+\n| base_tx         : BaseTx                |             size(base_tx) bytes |\n+-----------------+-----------------------+--------------------------------+\n| rewards_owner   : SECP256K1OutputOwners |       size(rewards_owner) bytes |\n+-----------------+-----------------------+---------------------------------+\n                                | size(rewards_owner) + size(base_tx) bytes |\n                                +-------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-create-subnet-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Unsigned Create Subnet Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message CreateSubnetTx {\n    BaseTx base_tx = 1;                      // size(base_tx)\n    SECP256K1OutputOwners rewards_owner = 2; // size(rewards_owner)\n}\n")),(0,i.kt)("h3",{id:"unsigned-create-subnet-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Unsigned Create Subnet Tx Example")),(0,i.kt)("p",null,"Let\u2019s make an unsigned create Subnet tx that uses the inputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx")),': "Example BaseTx as defined above but with TypeID set to 16"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"RewardsOwner")),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeId")),": 11"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": 0"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": 1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),": ","["," 0xda2bee01be82ecc00c34f361eda8eb30fb5a715c ","]")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx        <- 0x00000010000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    RewardsOwner <-\n        TypeID    <- 0x0000000b\n        Locktime  <- 0x0000000000000000\n        Threshold <- 0x00000001\n        Addresses <- [\n            0xda2bee01be82ecc00c34f361eda8eb30fb5a715c,\n        ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x10,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x39, 0xc3, 0x3a, 0x49, 0x9c, 0xe4, 0xc3, 0x3a,\n    0x3b, 0x09, 0xcd, 0xd2, 0xcf, 0xa0, 0x1a, 0xe7,\n    0x0d, 0xbf, 0x2d, 0x18, 0xb2, 0xd7, 0xd1, 0x68,\n    0x52, 0x44, 0x40, 0xe5, 0x5d, 0x55, 0x00, 0x88,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x12, 0x30,\n    0x9c, 0xd5, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0x3c, 0xb7, 0xd3, 0x84,\n    0x2e, 0x8c, 0xee, 0x6a, 0x0e, 0xbd, 0x09, 0xf1,\n    0xfe, 0x88, 0x4f, 0x68, 0x61, 0xe1, 0xb2, 0x9c,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // RewardsOwner type id\n    0x00, 0x00, 0x00, 0x0b,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // threshold:\n    0x00, 0x00, 0x00, 0x01,\n    // number of addresses:\n    0x00, 0x00, 0x00, 0x01,\n    // addrs[0]:\n    0xda, 0x2b, 0xee, 0x01,\n    0xbe, 0x82, 0xec, 0xc0, 0x0c, 0x34, 0xf3, 0x61,\n    0xed, 0xa8, 0xeb, 0x30, 0xfb, 0x5a, 0x71, 0x5c\n]\n")),(0,i.kt)("h2",{id:"unsigned-import-tx"},"Unsigned Import Tx"),(0,i.kt)("h3",{id:"what-unsigned-import-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Unsigned Import Tx Contains")),(0,i.kt)("p",null,"An unsigned import tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SourceChain"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Ins"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000011"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SourceChain"))," is a 32-byte source blockchain ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Ins"))," is a variable length array of Transferable Inputs.")),(0,i.kt)("h3",{id:"gantt-unsigned-import-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Unsigned Import Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------------+--------------|---------------------------------+\n| base_tx         : BaseTx       |             size(base_tx) bytes |\n+-----------------+--------------+---------------------------------+\n| source_chain    : [32]byte     |                        32 bytes |\n+-----------------+--------------+---------------------------------+\n| ins             : []TransferIn |             4 + size(ins) bytes |\n+-----------------+--------------+---------------------------------+\n                            | 36 + size(ins) + size(base_tx) bytes |\n                            +--------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-import-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Unsigned Import Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message ImportTx {\n    BaseTx base_tx = 1;          // size(base_tx)\n    bytes source_chain = 2;      // 32 bytes\n    repeated TransferIn ins = 3; // 4 bytes + size(ins)\n}\n")),(0,i.kt)("h3",{id:"unsigned-import-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Unsigned Import Tx Example")),(0,i.kt)("p",null,"Let\u2019s make an unsigned import tx that uses the inputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"BaseTx")),': "Example BaseTx as defined above with TypeID set to 17"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"SourceChain")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Ins")),': "Example SECP256K1 Transfer Input as defined above"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx        <- 0x00000011000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    SourceChain   <- 0x787cd3243c002e9bf5bbbaea8a42a16c1a19cc105047c66996807cbf16acee10\n    Ins <- [\n            // input:\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x11,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x39, 0xc3, 0x3a, 0x49, 0x9c, 0xe4, 0xc3, 0x3a,\n    0x3b, 0x09, 0xcd, 0xd2, 0xcf, 0xa0, 0x1a, 0xe7,\n    0x0d, 0xbf, 0x2d, 0x18, 0xb2, 0xd7, 0xd1, 0x68,\n    0x52, 0x44, 0x40, 0xe5, 0x5d, 0x55, 0x00, 0x88,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x12, 0x30,\n    0x9c, 0xd5, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x01, 0x3c, 0xb7, 0xd3, 0x84,\n    0x2e, 0x8c, 0xee, 0x6a, 0x0e, 0xbd, 0x09, 0xf1,\n    0xfe, 0x88, 0x4f, 0x68, 0x61, 0xe1, 0xb2, 0x9c,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // sourceChain\n    0x78, 0x7c, 0xd3, 0x24, 0x3c, 0x00, 0x2e, 0x9b,\n    0xf5, 0xbb, 0xba, 0xea, 0x8a, 0x42, 0xa1, 0x6c,\n    0x1a, 0x19, 0xcc, 0x10, 0x50, 0x47, 0xc6, 0x69,\n    0x96, 0x80, 0x7c, 0xbf, 0x16, 0xac, 0xee, 0x10,\n    // input count:\n    0x00, 0x00, 0x00, 0x01,\n    // txID:\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    // utxoIndex:\n    0x00, 0x00, 0x00, 0x05,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // input:\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0xee, 0x6b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n]\n")),(0,i.kt)("h2",{id:"unsigned-export-tx"},"Unsigned Export Tx"),(0,i.kt)("h3",{id:"what-unsigned-export-tx-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Unsigned Export Tx Contains")),(0,i.kt)("p",null,"An unsigned export tx contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DestinationChain"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Outs"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID")," for this type is ",(0,i.kt)("inlineCode",{parentName:"p"},"0x00000012"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"DestinationChain"))," is the 32 byte ID of the chain where the funds are being exported to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Outs"))," is a variable length array of Transferable Outputs.")),(0,i.kt)("h3",{id:"gantt-unsigned-export-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Unsigned Export Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-------------------+---------------+--------------------------------------+\n| base_tx           : BaseTx        |                  size(base_tx) bytes |\n+-------------------+---------------+--------------------------------------+\n| destination_chain : [32]byte      |                             32 bytes |\n+-------------------+---------------+--------------------------------------+\n| outs              : []TransferOut |                 4 + size(outs) bytes |\n+-------------------+---------------+--------------------------------------+\n                          | 36 + size(outs) + size(base_tx) bytes |\n                          +---------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-unsigned-export-tx-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Unsigned Export Tx Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message ExportTx {\n    BaseTx base_tx = 1;            // size(base_tx)\n    bytes destination_chain = 2;   // 32 bytes\n    repeated TransferOut outs = 3; // 4 bytes + size(outs)\n}\n")),(0,i.kt)("h3",{id:"unsigned-export-tx-example"},(0,i.kt)("strong",{parentName:"h3"},"Unsigned Export Tx Example")),(0,i.kt)("p",null,"Let\u2019s make an unsigned export tx that uses the outputs from the previous examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BaseTx"),': "Example BaseTx as defined above" with ',(0,i.kt)("inlineCode",{parentName:"li"},"TypeID")," set to 18"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DestinationChain"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000000000000000000000000000000000000000000000000000000000000")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Outs"),': "Example SECP256K1 Transfer Output as defined above"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    BaseTx           <- 0x00000012000030390000000000000000000000000000000000000000000000000000000000000006870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000700000000ee5be5c000000000000000000000000100000001da2bee01be82ecc00c34f361eda8eb30fb5a715cdfafbdf5c81f635c9257824ff21c8e3e6f7b632ac306e11446ee540d34711a15000000016870b7d66ac32540311379e5b5dbad28ec7eb8ddbfc8f4d67299ebb48475907a0000000500000000ee6b28000000000100000000\n    DestinationChain <- 0x0000000000000000000000000000000000000000000000000000000000000000\n    Outs <- [\n        000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n=\n[\n    // base tx:\n    0x00, 0x00, 0x00, 0x12\n    0x00, 0x00, 0x00, 0x04, 0xff, 0xff, 0xff, 0xff,\n    0xee, 0xee, 0xee, 0xee, 0xdd, 0xdd, 0xdd, 0xdd,\n    0xcc, 0xcc, 0xcc, 0xcc, 0xbb, 0xbb, 0xbb, 0xbb,\n    0xaa, 0xaa, 0xaa, 0xaa, 0x99, 0x99, 0x99, 0x99,\n    0x88, 0x88, 0x88, 0x88, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59, 0x00, 0x00, 0x00, 0x01,\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x00, 0x00, 0x00, 0x07, 0x5b, 0xcd, 0x15,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,\n    0x00, 0x01, 0x02, 0x03\n    // destination_chain:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    // outs[] count:\n    0x00, 0x00, 0x00, 0x01,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,\n    0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,\n    0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"credentials"},"Credentials"),(0,i.kt)("p",null,"Credentials have one possible types: ",(0,i.kt)("inlineCode",{parentName:"p"},"SECP256K1Credential"),". Each credential is paired with an Input or Operation. The order of the credentials match the order of the inputs or operations."),(0,i.kt)("h2",{id:"secp256k1-credential"},"SECP256K1 Credential"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/specs/cryptographic-primitives#secp-256-k1-addresses"},"secp256k1")," credential contains a list of 65-byte recoverable signatures."),(0,i.kt)("h3",{id:"what-secp256k1-credential-contains"},(0,i.kt)("strong",{parentName:"h3"},"What SECP256K1 Credential Contains")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000009"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Signatures"))," is an array of 65-byte recoverable signatures. The order of the signatures must match the input\u2019s signature indices.")),(0,i.kt)("h3",{id:"gantt-secp256k1-credential-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt SECP256K1 Credential Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------------------------+---------------------------------+\n| type_id         : int        |                         4 bytes |\n+-----------------+------------+---------------------------------+\n| signatures      : [][65]byte |  4 + 65 * len(signatures) bytes |\n+-----------------+------------+---------------------------------+\n                               |  8 + 65 * len(signatures) bytes |\n                               +---------------------------------+\n")),(0,i.kt)("h3",{id:"proto-secp256k1-credential-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto SECP256K1 Credential Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SECP256K1Credential {\n    uint32 TypeID = 1;             // 4 bytes\n    repeated bytes signatures = 2; // 4 bytes + 65 bytes * len(signatures)\n}\n")),(0,i.kt)("h3",{id:"secp256k1-credential-example"},(0,i.kt)("strong",{parentName:"h3"},"SECP256K1 Credential Example")),(0,i.kt)("p",null,"Let\u2019s make a payment input with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"signatures")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    Signatures <- [\n        0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00,\n        0x404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00,\n    ]\n]\n=\n[\n    // Type ID\n    0x00, 0x00, 0x00, 0x09,\n    // length:\n    0x00, 0x00, 0x00, 0x02,\n    // sig[0]\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n    0x00,\n    // sig[1]\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,\n    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d, 0x5f,\n    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d, 0x6f,\n    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,\n    0x00,\n]\n")),(0,i.kt)("h2",{id:"signed-transaction"},"Signed Transaction"),(0,i.kt)("p",null,"A signed transaction is an unsigned transaction with the addition of an array of credentials."),(0,i.kt)("h3",{id:"what-signed-transaction-contains"},"What Signed Transaction Contains"),(0,i.kt)("p",null,"A signed transaction contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"CodecID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UnsignedTx"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Credentials"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID"))," The only current valid codec id is ",(0,i.kt)("inlineCode",{parentName:"li"},"00 00"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UnsignedTx"))," is an unsigned transaction, as described above."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Credentials"))," is an array of credentials. Each credential will be paired with the input in the same index at this credential.")),(0,i.kt)("h3",{id:"gantt-signed-transaction-specification"},"Gantt Signed Transaction Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+---------------------+--------------+------------------------------------------------+\n| codec_id            : uint16       |                                        2 bytes |\n+---------------------+--------------+------------------------------------------------+\n| unsigned_tx         : UnsignedTx   |                        size(unsigned_tx) bytes |\n+---------------------+--------------+------------------------------------------------+\n| credentials         : []Credential |                    4 + size(credentials) bytes |\n+---------------------+--------------+------------------------------------------------+\n                                     | 6 + size(unsigned_tx) + len(credentials) bytes |\n                                     +------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-signed-transaction-specification"},"Proto Signed Transaction Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message Tx {\n    uint32 codec_id = 1;                 // 2 bytes\n    UnsignedTx unsigned_tx = 2;          // size(unsigned_tx)\n    repeated Credential credentials = 3; // 4 bytes + size(credentials)\n}\n")),(0,i.kt)("h3",{id:"signed-transaction-example"},"Signed Transaction Example"),(0,i.kt)("p",null,"Let\u2019s make a signed transaction that uses the unsigned transaction and credential from the previous examples."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UnsignedTx")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000100000003ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000003000000070000000400010203")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Credentials"))," ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000900000002000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID     <- 0x0000\n    UnsignedTx  <- 0x0000000100000003ffffffffeeeeeeeeddddddddccccccccbbbbbbbbaaaaaaaa999999998888888800000001000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab085900000001f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000200000003000000070000000400010203\n    Credentials <- [\n        0x0000000900000002000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1e1d1f202122232425262728292a2b2c2e2d2f303132333435363738393a3b3c3d3e3f00404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5e5d5f606162636465666768696a6b6c6e6d6f707172737475767778797a7b7c7d7e7f00,\n    ]\n]\n=\n[\n    // Codec ID\n    0x00, 0x00,\n    // unsigned transaction:\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,\n    0xff, 0xff, 0xff, 0xff, 0xee, 0xee, 0xee, 0xee,\n    0xdd, 0xdd, 0xdd, 0xdd, 0xcc, 0xcc, 0xcc, 0xcc,\n    0xbb, 0xbb, 0xbb, 0xbb, 0xaa, 0xaa, 0xaa, 0xaa,\n    0x99, 0x99, 0x99, 0x99, 0x88, 0x88, 0x88, 0x88,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x39,\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,\n    0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n    0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n    0x6d, 0x55, 0xa9, 0x55, 0xc3, 0x34, 0x41, 0x28,\n    0xe0, 0x60, 0x12, 0x8e, 0xde, 0x35, 0x23, 0xa2,\n    0x4a, 0x46, 0x1c, 0x89, 0x43, 0xab, 0x08, 0x59,\n    0x00, 0x00, 0x00, 0x01, 0xf1, 0xe1, 0xd1, 0xc1,\n    0xb1, 0xa1, 0x91, 0x81, 0x71, 0x61, 0x51, 0x41,\n    0x31, 0x21, 0x11, 0x01, 0xf0, 0xe0, 0xd0, 0xc0,\n    0xb0, 0xa0, 0x90, 0x80, 0x70, 0x60, 0x50, 0x40,\n    0x30, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07,\n    0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x02, 0x03\n    // number of credentials:\n    0x00, 0x00, 0x00, 0x01,\n    // credential[0]:\n    0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1e, 0x1d, 0x1f,\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2e, 0x2d, 0x2f,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,\n    0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46,\n    0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e,\n    0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56,\n    0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5e, 0x5d,\n    0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,\n    0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6e, 0x6d,\n    0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,\n    0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e,\n    0x7f, 0x00,\n")),(0,i.kt)("h2",{id:"utxo"},"UTXO"),(0,i.kt)("p",null,"A UTXO is a standalone representation of a transaction output."),(0,i.kt)("h3",{id:"what-utxo-contains"},"What UTXO Contains"),(0,i.kt)("p",null,"A UTXO contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"CodecID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TxID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UTXOIndex"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Output"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID"))," The only current valid codec id is ",(0,i.kt)("inlineCode",{parentName:"li"},"00 00"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," is a 32-byte transaction ID. Transaction IDs are calculated by taking sha256 of the bytes of the signed transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex"))," is an int that specifies which output in the transaction specified by ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID"))," that this utxo was created by."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID"))," is a 32-byte array that defines which asset this utxo references."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output"))," is the output object that created this utxo. The serialization of Outputs was defined above.")),(0,i.kt)("h4",{id:"gantt-utxo-specification"},"Gantt UTXO Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+--------------+----------+-------------------------+\n| codec_id     : uint16   |                 2 bytes |\n+--------------+----------+-------------------------+\n| tx_id        : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output_index : int      |                 4 bytes |\n+--------------+----------+-------------------------+\n| asset_id     : [32]byte |                32 bytes |\n+--------------+----------+-------------------------+\n| output       : Output   |      size(output) bytes |\n+--------------+----------+-------------------------+\n                          | 70 + size(output) bytes |\n                          +-------------------------+\n")),(0,i.kt)("h3",{id:"proto-utxo-specification"},"Proto UTXO Specification"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message Utxo {\n    uint32 codec_id = 1;     // 02 bytes\n    bytes tx_id = 2;         // 32 bytes\n    uint32 output_index = 3; // 04 bytes\n    bytes asset_id = 4;      // 32 bytes\n    Output output = 5;       // size(output)\n}\n")),(0,i.kt)("h3",{id:"utxo-example"},"UTXO Example"),(0,i.kt)("p",null,"Let\u2019s make a UTXO from the signed transaction created above:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"CodecID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TxID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0xf966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"UTXOIndex")),": 0x00000000"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AssetID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Output")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transferable Output as defined above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    CodecID   <- 0x0000\n    TxID      <- 0xf966750f438867c3c9828ddcdbe660e21ccdbb36a9276958f011ba472f75d4e7\n    UTXOIndex <- 0x00000000\n    AssetID   <- 0x000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\n    Output    <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859\n]\n=\n[\n    // Codec ID:\n    0x00, 0x00,\n    // txID:\n    0xf9, 0x66, 0x75, 0x0f, 0x43, 0x88, 0x67, 0xc3,\n    0xc9, 0x82, 0x8d, 0xdc, 0xdb, 0xe6, 0x60, 0xe2,\n    0x1c, 0xcd, 0xbb, 0x36, 0xa9, 0x27, 0x69, 0x58,\n    0xf0, 0x11, 0xba, 0x47, 0x2f, 0x75, 0xd4, 0xe7,\n    // utxo index:\n    0x00, 0x00, 0x00, 0x00,\n    // assetID:\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    // output:\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x02, 0x03,\n    0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,\n    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,\n    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,\n    0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,\n    0x24, 0x25, 0x26, 0x27,\n]\n")),(0,i.kt)("h2",{id:"stakeablelockin"},"StakeableLockIn"),(0,i.kt)("p",null,"A StakeableLockIn is a staked and locked input. The StakeableLockIn can only fund StakeableLockOuts with the same address until its locktime has passed."),(0,i.kt)("h3",{id:"what-stakeablelockin-contains"},(0,i.kt)("strong",{parentName:"h3"},"What StakeableLockIn Contains")),(0,i.kt)("p",null,"A StakeableLockIn contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TransferableIn"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000015"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp before which the input can be consumed only to stake. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransferableIn"))," is a transferable input object.")),(0,i.kt)("h3",{id:"gantt-stakeablelockin-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt StakeableLockIn Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------------+-------------------+--------------------------------+\n| type_id         : int               |                        4 bytes |\n+-----------------+-------------------+--------------------------------+\n| locktime        : long              |                        8 bytes |\n+-----------------+-------------------+--------------------------------+\n| transferable_in : TransferableInput |          size(transferable_in) |\n+-----------------+-------------------+--------------------------------+\n                                    | 12 + size(transferable_in) bytes |\n                                    +----------------------------------+\n")),(0,i.kt)("h3",{id:"proto-stakeablelockin-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto StakeableLockIn Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message StakeableLockIn {\n    uint32 type_id = 1;                    // 04 bytes\n    uint64 locktime = 2;                   // 08 bytes\n    TransferableInput transferable_in = 3; // size(transferable_in)\n}\n")),(0,i.kt)("h3",{id:"stakeablelockin-example"},(0,i.kt)("strong",{parentName:"h3"},"StakeableLockIn Example")),(0,i.kt)("p",null,"Let\u2019s make a StakeableLockIn with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": 21"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": 54321"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransferableIn")),': "Example SECP256K1 Transfer Input as defined above"')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID    <- 0x00000015\n    Locktime  <- 0x000000000000d431\n    TransferableIn <- [\n        f1e1d1c1b1a191817161514131211101f0e0d0c0b0a09080706050403020100000000005000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0000000500000000075bcd150000000100000000,\n    ]\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x15,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // transferable_in\n    0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91, 0x81,\n    0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01,\n    0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90, 0x80,\n    0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00,\n    0x00, 0x00, 0x00, 0x05,\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n    0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,\n    0x07, 0x5b, 0xcd, 0x15, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x00,\n]\n")),(0,i.kt)("h2",{id:"stakeablelockout"},"StakeableLockOut"),(0,i.kt)("p",null,"A StakeableLockOut is an output that is locked until its locktime, but can be staked in the meantime."),(0,i.kt)("h3",{id:"what-stakeablelockout-contains"},(0,i.kt)("strong",{parentName:"h3"},"What StakeableLockOut Contains")),(0,i.kt)("p",null,"A StakeableLockOut contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"TransferableOut"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this output type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x00000016"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp before which the output can be consumed only to stake. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"transferableout")),': "Example SECP256K1 Transfer Output as defined above"')),(0,i.kt)("h3",{id:"gantt-stakeablelockout-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt StakeableLockOut Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------------+--------------------+--------------------------------+\n| type_id          : int                |                        4 bytes |\n+------------------+--------------------+--------------------------------+\n| locktime         : long               |                        8 bytes |\n+------------------+--------------------+--------------------------------+\n| transferable_out : TransferableOutput |         size(transferable_out) |\n+------------------+--------------------+--------------------------------+\n                                     | 12 + size(transferable_out) bytes |\n                                     +-----------------------------------+\n")),(0,i.kt)("h3",{id:"proto-stakeablelockout-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto StakeableLockOut Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message StakeableLockOut {\n    uint32 type_id = 1;                      // 04 bytes\n    uint64 locktime = 2;                     // 08 bytes\n    TransferableOutput transferable_out = 3; // size(transferable_out)\n}\n")),(0,i.kt)("h3",{id:"stakeablelockout-example"},(0,i.kt)("strong",{parentName:"h3"},"StakeableLockOut Example")),(0,i.kt)("p",null,"Let\u2019s make a stakeablelockout with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": 22"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": 54321"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TransferableOutput")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"Example SECP256K1 Transfer Output from above"'))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID              <- 0x00000016\n    Locktime            <- 0x000000000000d431\n    TransferableOutput  <- 0x000000070000000000003039000000000000d431000000010000000251025c61fbcfc078f69334f834be6dd26d55a955c3344128e060128ede3523a24a461c8943ab0859,\n]\n=\n[\n    // type_id:\n    0x00, 0x00, 0x00, 0x16,\n    // locktime:\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n    // transferable_out\n    0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0x30, 0x39, 0x00, 0x00, 0x00, 0x00,\n    0x00, 0x00, 0xd4, 0x31, 0x00, 0x00, 0x00, 0x01,\n    0x00, 0x00, 0x00, 0x02, 0x51, 0x02, 0x5c, 0x61,\n    0xfb, 0xcf, 0xc0, 0x78, 0xf6, 0x93, 0x34, 0xf8,\n    0x34, 0xbe, 0x6d, 0xd2, 0x6d, 0x55, 0xa9, 0x55,\n    0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n    0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n    0x43, 0xab, 0x08, 0x59,\n]\n")),(0,i.kt)("h2",{id:"subnet-auth"},"Subnet Auth"),(0,i.kt)("h3",{id:"what-subnet-auth-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Subnet Auth Contains")),(0,i.kt)("p",null,"Specifies the addresses whose signatures will be provided to demonstrate that the owners of a Subnet approve something."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this type. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000a"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices"))," defines which addresses' signatures will be attached to this transaction. AddressIndices","[i]"," is the index in a Subnet owner list that corresponds to the signature at index i in the signature list. Must be sorted low to high and not have duplicates.")),(0,i.kt)("h3",{id:"gantt-subnet-auth-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Subnet Auth Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+-----------------+------------------+-------------------------------------+\n| type_id         : int              |                             4 bytes |\n+-----------------+------------------+-------------------------------------+\n| address_indices : []int            |    4 + 4*len(address_indices) bytes |\n+-----------------+------------------+-------------------------------------+\n                  |                       8 + 4*len(address_indices) bytes |\n+-----------------+--------------------------------------------------------+\n")),(0,i.kt)("h3",{id:"proto-subnet-auth-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Subnet Auth Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message SubnetAuth {\n    uint32 type_id = 1;                          // 04 bytes\n    repeated AddressIndex address_indices = 2;   // 04 + 4*len(address_indices) bytes\n}\n")),(0,i.kt)("h3",{id:"subnet-auth-example"},(0,i.kt)("strong",{parentName:"h3"},"Subnet Auth Example")),(0,i.kt)("p",null,"Let\u2019s make a Subnet auth:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"10")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"AddressIndices")),": ","[",(0,i.kt)("inlineCode",{parentName:"li"},"0"),"]")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID                <- 0x0000000a\n    AddressIndices        <-  [\n       0x00000000\n    ]\n]\n\n=\n[\n  // type id\n  0x00, 0x00, 00x0, 0x0a,\n\n  // num address indices\n  0x00, 0x00, 0x00, 0x01,\n\n  // address index 1\n  0x00, 0x00, 0x00, 0x00\n]\n")),(0,i.kt)("h2",{id:"validator"},"Validator"),(0,i.kt)("p",null,"A validator verifies transactions on a blockchain."),(0,i.kt)("h3",{id:"what-validator-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Validator Contains")),(0,i.kt)("p",null,"A validator contains ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Start"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"End"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Wght")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID"))," is the ID of the validator"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Start"))," Unix time this validator starts validating"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"End"))," Unix time this validator stops validating"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Wght"))," Weight of this validator used when sampling")),(0,i.kt)("h3",{id:"gantt-validator-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Validator Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------------+----------+\n| node_id : string | 20 bytes |\n+------------------+----------+\n| start   : uint64 | 8 bytes  |\n+------------------+----------+\n| end     : uint64 | 8 bytes  |\n+------------------+----------+\n| wght    : uint64 | 8 bytes  |\n+------------------+----------+\n|                  | 44 bytes |\n+------------------+----------+\n")),(0,i.kt)("h3",{id:"proto-validator-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Validator Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message Validator {\n    string node_id = 1;        // 20 bytes\n    uint64 start = 2;          // 08 bytes\n    uint64 end = 3;            // 08 bytes\n    uint64 wght = 4;           // 08 bytes\n}\n")),(0,i.kt)("h3",{id:"validator-example"},(0,i.kt)("strong",{parentName:"h3"},"Validator Example")),(0,i.kt)("p",null,"Let\u2019s make a validator:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"NodeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},'"NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Start")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1643068824")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"End")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1644364767")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Wght")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"20"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    NodeID  <- 0xaa18d3991cf637aa6c162f5e95cf163f69cd8291\n    Start   <- 0x61ef3d98\n    End     <- 0x620303df\n    Wght    <- 0x14\n]\n\n=\n[\n  // node id\n  0xaa, 0x18, 0xd3, 0x99, 0x1c, 0xf6, 0x37, \n  0xaa, 0x6c, 0x16, 0x2f, 0x5e, 0x95, 0xcf, \n  0x16, 0x3f, 0x69, 0xcd, 0x82, 0x91,\n  // start\n  0x61, 0xef, 0x3d, 0x98,\n  // end\n  0x62, 0x03, 0x03, 0xdf,\n  // wght\n  0x14,\n]\n")),(0,i.kt)("h2",{id:"rewards-owner"},"Rewards Owner"),(0,i.kt)("p",null,"Where to send staking rewards when done validating"),(0,i.kt)("h3",{id:"what-rewards-owner-contains"},(0,i.kt)("strong",{parentName:"h3"},"What Rewards Owner Contains")),(0,i.kt)("p",null,"A rewards owner contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"TypeID"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Locktime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Threshold"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"Addresses"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID"))," is the ID for this validator. It is ",(0,i.kt)("inlineCode",{parentName:"li"},"0x0000000b"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime"))," is a long that contains the unix timestamp that this output can be spent after. The unix timestamp is specific to the second."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold"))," is an int that names the number of unique signatures required to spend the output. Must be less than or equal to the length of ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),". If ",(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is empty, must be 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses"))," is a list of unique addresses that correspond to the private keys that can be used to spend this output. Addresses must be sorted lexicographically.")),(0,i.kt)("h3",{id:"gantt-rewards-owner-specification"},(0,i.kt)("strong",{parentName:"h3"},"Gantt Rewards Owner Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"+------------------------+-------------------------------+\n| type_id   : int        | 4 bytes                       |\n+------------------------+-------------------------------+\n| locktime  : long       | 8 bytes                       |\n+------------------------+-------------------------------+\n| threshold : int        | 4 bytes                       |\n+------------------------+-------------------------------+\n| addresses : [][20]byte | 4 + 20 * len(addresses) bytes |\n+------------------------+-------------------------------+\n|                        | 40 bytes                      |\n+------------------------+-------------------------------+\n")),(0,i.kt)("h3",{id:"proto-rewards-owner-specification"},(0,i.kt)("strong",{parentName:"h3"},"Proto Rewards Owner Specification")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"message RewardsOwner {\n    string type_id = 1;           // 4 bytes\n    uint64 locktime = 2;          // 08 bytes\n    uint32 threshold = 3;         // 04 bytes\n    repeated bytes addresses = 4; // 04 bytes + 20 bytes * len(addresses)\n}\n")),(0,i.kt)("h3",{id:"rewards-owner-example"},(0,i.kt)("strong",{parentName:"h3"},"Rewards Owner Example")),(0,i.kt)("p",null,"Let\u2019s make a rewards owner:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"TypeID")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"11")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Locktime")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"54321")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Threshold")),": ",(0,i.kt)("inlineCode",{parentName:"li"},"1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"Addresses")),":"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0x51025c61fbcfc078f69334f834be6dd26d55a955")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"0xc3344128e060128ede3523a24a461c8943ab0859"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"[\n    TypeID  <- 0x0000000b\n    Locktime  <- 0x000000000000d431\n    Threshold <- 0x00000001\n    Addresses <- [\n        0x51025c61fbcfc078f69334f834be6dd26d55a955,\n        0xc3344128e060128ede3523a24a461c8943ab0859,\n    ]\n]\n\n=\n[\n  // type id\n  0x00, 0x00, 0x00, 0x0b,\n  // locktime\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x31,\n  // threshold:\n  0x00, 0x00, 0x00, 0x01,\n  // number of addresses:\n  0x00, 0x00, 0x00, 0x02,\n  // addrs[0]:\n  0x51, 0x02, 0x5c, 0x61, 0xfb, 0xcf, 0xc0, 0x78,\n  0xf6, 0x93, 0x34, 0xf8, 0x34, 0xbe, 0x6d, 0xd2,\n  0x6d, 0x55, 0xa9, 0x55,\n  // addrs[1]:\n  0xc3, 0x34, 0x41, 0x28, 0xe0, 0x60, 0x12, 0x8e,\n  0xde, 0x35, 0x23, 0xa2, 0x4a, 0x46, 0x1c, 0x89,\n  0x43, 0xab, 0x08, 0x59,\n]\n")))}u.isMDXComponent=!0}}]);